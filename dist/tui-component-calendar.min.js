/*!
 * tui-component-calendar.min.js
 * @version 1.2.0
 * @author NHNEnt FE Development Lab <dl_javascript@nhnent.com>
 * @license MIT
 */
!function(t){function e(n){if(a[n])return a[n].exports;var r=a[n]={exports:{},id:n,loaded:!1};return t[n].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var a={};return e.m=t,e.c=a,e.p="dist",e(0)}([function(t,e,a){"use strict";var n=a(1);tui.util.defineNamespace("tui.component",{Calendar:n})},function(t,e,a){"use strict";var n=a(3),r=a(2),i=tui.util,s=i.bind,o=i.extend,l=i.defineClass({init:function(t){this._option={},this._shownDate={year:0,month:1,date:1},this.$element=$(t.element||arguments[0]),this.$header=null,this.$title=null,this.$titleYear=null,this.$titleMonth=null,this.$body=null,this.$weekTemplate=null,this.$weekAppendTarget=null,this._$dateElement=null,this._$dateContainerElement=null,this.$footer=null,this.$today=null,this.shownLayerIdx=0,this.dataOfMonthLayer={},this.dataOfYearLayer={},this.isClickableTitle=!1,this.handlers={},this._setDefault(t)},_setDefault:function(t){this._setOption(t),this._assignHTMLElements(),this._attachEvent(),this.draw(this._option.year,this._option.month,!1,0)},_setOption:function(t){var e=this._option,a=n.getDateHash(),i={classPrefix:"calendar-",year:a.year,month:a.month,titleFormat:"yyyy-mm",todayFormat:"yyyy/mm/dd (D)",yearTitleFormat:"yyyy",monthTitleFormat:"m",monthTitles:["JAN","FEB","MAR","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC"],dayTitles:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],itemCountOfYear:r.itemCountOfYear};o(e,i,t)},_assignHTMLElements:function(){var t=this._option.classPrefix,e=this.$element,a="."+t;this._assignHeader(e,a,t),this._assignBody(e,a,t),this._assignFooter(e,a,t)},_assignHeader:function(t,e,a){var n,i,s=t.find(e+"header"),o=r.relativeMonthValueKey,l="btn-";s.length||(n=r.calendarHeader,i=r.defaultClassPrefixRegExp,s=$(n.replace(i,a)),t.append(s)),s.find(e+l+r.prevYear).data(o,-12),s.find(e+l+r.prevMonth).data(o,-1),s.find(e+l+r.nextYear).data(o,12),s.find(e+l+r.nextMonth).data(o,1),this.$title=s.find(e+"title"),this.$titleYear=s.find(e+"title-year"),this.$titleMonth=s.find(e+"title-month"),this.$header=s,this.$title.hasClass(this._option.classPrefix+r.clickable)&&(this.isClickableTitle=!0)},_assignBody:function(t,e,a){var n,i,s=t.find(e+"body");s.length||(n=r.calendarBody,i=r.defaultClassPrefixRegExp,s=$(n.replace(i,a)),t.append(s)),this._assignWeek(e),this._assignMonthLayer(e),this._assignYearLayer(e),this.$body=s.hide()},_assignWeek:function(t){var e=this.$element.find(t+"body"),a=e.find(t+"week");this.$weekTemplate=a.clone(!0),this.$weekAppendTarget=a.parent()},_assignMonthLayer:function(t){var e=this.$element.find(t+"body"),a=e.find(t+"month-group"),n=a.find(t+"month").length,r=Math.ceil(this._option.monthTitles.length/n);this.dataOfMonthLayer={template:a.clone(!0),appendedTarget:a.parent(),frame:{cols:n,rows:r}}},_assignYearLayer:function(t){var e=this.$element.find(t+"body"),a=e.find(t+"year-group"),n=a.find(t+"year").length,r=Math.ceil(this._option.itemCountOfYear/n);this.dataOfYearLayer={template:a.clone(!0),appendedTarget:a.parent(),frame:{cols:n,rows:r}}},_assignFooter:function(t,e,a){var n,i,s=t.find(e+"footer");s.length||(n=r.calendarFooter,i=r.defaultClassPrefixRegExp,s=$(n.replace(i,a)),t.append(s)),this.$today=s.find(e+"today"),this.$footer=s},_attachEvent:function(){this.handlers.clickRolloverBtn=s(this._onClickRolloverButton,this),this.attachEventToRolloverBtn(),o(this.handlers,{clickTitle:s(this._onClickTitle,this),clickYearLayer:s(this._onClickYearLayer,this),clickMonthLayer:s(this._onClickMonthLayer,this)}),this.isClickableTitle&&this.attachEventToTitle(),this.attachEventToBody()},attachEventToRolloverBtn:function(){var t="."+this._option.classPrefix+"rollover",e=this.$header.find(t);e.on("click",this.handlers.clickRolloverBtn)},detachEventToRolloverBtn:function(){var t="."+this._option.classPrefix+"rollover",e=this.$header.find(t);e.off("click",this.handlers.clickRolloverBtn)},attachEventToTitle:function(){this.$title.on("click",this.handlers.clickTitle)},detachEventToTitle:function(){this.$title.off("click",this.handlers.clickTitle)},attachEventToBody:function(){var t="."+this._option.classPrefix,e=this.dataOfYearLayer.appendedTarget,a=this.dataOfMonthLayer.appendedTarget;e.on("click",t+"year",this.handlers.clickYearLayer),a.on("click",t+"month",this.handlers.clickMonthLayer)},detachEventToBody:function(){var t="."+this._option.classPrefix,e=this.dataOfYearLayer.appendedTarget,a=this.dataOfMonthLayer.appendedTarget;e.off("click",t+"year",this.handlers.clickYearLayer),a.off("click",t+"month",this.handlers.clickMonthLayer)},_onClickRolloverButton:function(t){var e=$(t.currentTarget).data(r.relativeMonthValueKey);t.preventDefault(),this.draw(0,e,!0)},_onClickTitle:function(t){var e,a=this.shownLayerIdx;t.preventDefault(),2!==a&&(a=2!==a?a+1:0,e=this.getDate(),this.draw(e.year,e.month,!1,a))},_onClickYearLayer:function(t){var e=$(t.currentTarget).data(r.relativeMonthValueKey);t.preventDefault(),this.draw(0,e,!0,1)},_onClickMonthLayer:function(t){var e=$(t.currentTarget).data(r.relativeMonthValueKey);t.preventDefault(),this.draw(0,e,!0,0)},_getDateForDrawing:function(t,e,a){var r,s=this.getDate();return s.date=1,i.isNumber(t)||i.isNumber(e)?(a?(r=n.getRelativeDate(t,e,0,s),s.year=r.year,s.month=r.month):(s.year=t||s.year,s.month=e||s.month),s):s},_isNecessaryForDrawing:function(t,e){var a=this._shownDate;return a.year!==t||a.month!==e},_setCalendarText:function(t){var e=t.year,a=t.month;this._setCalendarToday(),this._setCalendarTitle(e,a)},_drawDates:function(t,e){var a=t.year,s=t.month,o=0,l=n.getRelativeDate(0,-1,0,t),d=n.getRelativeDate(0,1,0,t),h=[],c=n.getFirstDay(a,s),y=this._fillDates(a,s,h);i.forEach(h,function(t,n){var i,h=!1,f=!1,u=$(this._$dateContainerElement[n]),p=a,m=s;n<c?(h=!0,u.addClass(e+r.prevMonth),p=l.year,m=l.month):n>y&&(f=!0,u.addClass(e+r.nextMonth),p=d.year,m=d.month),this._setWeekend(o,u,e),this._isToday(p,m,t)&&u.addClass(e+"today"),i={$date:$(this._$dateElement.get(n)),$dateContainer:u,year:p,month:m,date:t,isPrevMonth:h,isNextMonth:f,html:t},$(i.$date).html(i.html.toString()),o=(o+1)%7,this.fire("draw",i)},this)},_isToday:function(t,e,a){var r=n.getDateHash(),i=!t||r.year===t,s=!e||r.month===e,o=!a||r.date===a;return i&&s&&o},_setWeeks:function(t,e){var a,r,i=n.getWeeks(t,e);for(r=0;r<i;r+=1)a=this.$weekTemplate.clone(!0),a.appendTo(this.$weekAppendTarget),this._weekElements.push(a)},_fillDates:function(t,e,a){var r,i,s=n.getFirstDay(t,e),o=n.getLastDay(t,e),l=n.getLastDate(t,e),d=n.getRelativeDate(0,-1,0,{year:t,month:e,date:1}),h=n.getLastDate(d.year,d.month);if(s>0)for(i=h-s;i<h;i+=1)a.push(i+1);for(i=1;i<l+1;i+=1)a.push(i);for(r=a.length-1,i=1;i<7-o;i+=1)a.push(i);return r},_setWeekend:function(t,e,a){0===t?e.addClass(a+"sun"):6===t&&e.addClass(a+"sat")},_clear:function(){this._weekElements=[],this.$weekAppendTarget.empty(),this.dataOfMonthLayer.appendedTarget.empty(),this.dataOfYearLayer.appendedTarget.empty()},_setCalendarTitle:function(t,e){var a,i,s=this._option,o=s.titleFormat;e=n.prependLeadingZero(e),a=this._getReplaceMap(t,e),i=r.titleRegExp,this._setDateTextInCalendar(this.$title,o,a,i),i=r.titleYearRegExp,this._setDateTextInCalendar(this.$titleYear,s.yearTitleFormat,a,i),i=r.titleMonthRegExp,this._setDateTextInCalendar(this.$titleMonth,s.monthTitleFormat,a,i)},_setDateTextInCalendar:function(t,e,a,r){var i,s=$(t);s.length&&(i=n.getConvertedTitle(e,a,r),s.text(i))},_getReplaceMap:function(t,e,a){var n=this._option,r=t.toString().substr(2,2),i=n.monthTitles[e-1],s=new Date(t,e-1,a||1).getDay(),o=n.dayTitles[s];return{yyyy:t,yy:r,mm:e,m:Number(e),M:i,dd:a,d:Number(a),D:o}},_setCalendarToday:function(){var t,e,a,i,s,o,l,d=this.$today;d.length&&(e=n.getDateHash(),a=e.year,i=n.prependLeadingZero(e.month),s=n.prependLeadingZero(e.date),t=this._option.todayFormat,o=this._getReplaceMap(a,i,s),l=r.todayRegExp,this._setDateTextInCalendar(d,t,o,l))},_setTitleOnYearLayer:function(t){var e=this._getInfoOfYearRange(t),a=this._getConvertedYearTitle(e.startYear),n=this._getConvertedYearTitle(e.endYear),r=a+" - "+n;this.$title.text(r)},_setClassNameOnTitle:function(t){var e=this._option.classPrefix+r.clickable;this.isClickableTitle&&(2!==t?this.$title.addClass(e):this.$title.removeClass(e))},_getConvertedYearTitle:function(t){var e,a,i=this._option;return e=this._getReplaceMap(t),a=r.titleYearRegExp,n.getConvertedTitle(i.yearTitleFormat,e,a)},_getInfoOfYearRange:function(t){var e=this.dataOfYearLayer.frame,a=e.cols,n=e.rows,r=a*Math.floor(n/2)+Math.floor(a/2),i=t-r,s=i+a*n-1;return{startYear:i,endYear:s}},_getIndexOfShownLayer:function(t){return t?i.inArray(t,r.layerKeys):this.shownLayerIdx},_drawHeader:function(t,e){var a,n,i="."+this._option.classPrefix+"btn-",s=this.$header.find(i+r.prev),o=this.$header.find(i+r.next),l=r.relativeMonthValueKey,d=this._option.itemCountOfYear;switch(this._setClassNameOnTitle(e),e){case 0:this._setCalendarText(t),a=-1,n=1;break;case 1:this.$title.text(this._getConvertedYearTitle(t.year)),a=-12,n=12;break;case 2:this._setTitleOnYearLayer(t.year),a=-12*d,n=12*d}s.data(l,a),o.data(l,n)},_drawBody:function(t,e){var a=t.year,n=t.month,r=this._option.classPrefix;this._setWeeks(a,n),this._$dateElement=$("."+r+"date",this.$weekAppendTarget),this._$dateContainerElement=$("."+r+"week > *",this.$weekAppendTarget),this._drawDates(t,r),this._drawFrameOnMonthLayer(),this._drawButtonsOfMonth(t,r),this._drawFrameOnYearLayer(),this._drawButtonsOfYear(t,r),this._changeShownLayer(e)},_drawFrameOnMonthLayer:function(){for(var t,e=0,a=this.dataOfMonthLayer.frame.rows,n=this.dataOfMonthLayer;e<a;e+=1)t=n.template.clone(!0),t.appendTo(n.appendedTarget)},_drawButtonsOfMonth:function(t,e){var a,n,s,o,l=r.relativeMonthValueKey,d=t.month,h=this._option.monthTitles,c=this.dataOfMonthLayer.appendedTarget.find("."+e+"month");i.forEach(h,function(i,h){a=c.eq(h),n=h+1,n===d&&a.addClass(e+r.selected),this._isToday(this._shownDate.year,n)&&a.addClass(e+r.today),s=n-d,a.data(l,s).html(i),o={$date:a,$dateContainer:a,year:t.year,month:n,date:0,html:i},this.fire("draw",o)},this)},_drawFrameOnYearLayer:function(){for(var t,e=0,a=this.dataOfMonthLayer.frame.rows,n=this.dataOfYearLayer;e<a;e+=1)t=n.template.clone(!0),t.appendTo(n.appendedTarget)},_drawButtonsOfYear:function(t,e){for(var a,n,i,s=r.relativeMonthValueKey,o=t.year,l=this._getInfoOfYearRange(o),d=l.startYear,h=l.endYear,c=0,y=this.dataOfYearLayer.appendedTarget.find("."+e+"year");d<=h;d+=1)a=y.eq(c),d===o&&a.addClass(e+r.selected),this._isToday(d)&&a.addClass(e+r.today),n=12*(d-o),a.data(s,n).html(d),c+=1,i={$date:a,$dateContainer:a,year:d,month:0,date:0,html:d},this.fire("draw",i)},_changeShownLayer:function(t){var e=this._option.classPrefix,a=this.shownLayerIdx,n=this.$element.find("."+e+"body");this.shownLayerIdx=t,n.eq(a).hide(),n.eq(t).show()},draw:function(t,e,a,n){var r,s=this._getDateForDrawing(t,e,a);this.invoke("beforeDraw",s)&&(r=i.isNumber(n)?n:this._getIndexOfShownLayer(n),t=s.year,e=s.month,this.setDate(t,e),this._clear(),this._drawHeader(s,r),this._drawBody(s,r),this.fire("afterDraw",s))},getDate:function(){return{year:this._shownDate.year,month:this._shownDate.month}},setDate:function(t,e){var a=this._shownDate;a.year=i.isNumber(t)?t:a.year,a.month=i.isNumber(e)?e:a.month}});i.CustomEvents.mixin(l),t.exports=l},function(t,e){"use strict";var a={relativeMonthValueKey:"relativeMonthValue",prev:"prev",prevYear:"prev-year",prevMonth:"prev-month",next:"next",nextYear:"next-year",nextMonth:"next-month",selected:"selected",today:"today",clickable:"clickable-title",calendarHeader:null,calendarBody:null,calendarFooter:null,defaultClassPrefixRegExp:/calendar-/g,titleRegExp:/yyyy|yy|mm|m|M/g,titleYearRegExp:/yyyy|yy/g,titleMonthRegExp:/mm|m|M/g,todayRegExp:/yyyy|yy|mm|m|M|dd|d|D/g,itemCountOfYear:12,layerKeys:["date","month","year"]};a.calendarHeader=['<div class="calendar-header">','<a href="#" class="calendar-rollover calendar-btn-'+a.prev+'">Prev</a>','<strong class="calendar-title calendar-clickable-title"></strong>','<a href="#" class="calendar-rollover calendar-btn-'+a.next+'">Next</a>',"</div>"].join(""),a.calendarBody=['<div class="calendar-body">',"<table>","<thead>","<tr>",'<th class="calendar-sun">Su</th><th>Mo</th><th>Tu</th><th>We</th><th>Th</th><th>Fa</th><th class="calendar-sat">Sa</th>',"</tr>","</thead>","<tbody>",'<tr class="calendar-week">','<td class="calendar-date"></td>','<td class="calendar-date"></td>','<td class="calendar-date"></td>','<td class="calendar-date"></td>','<td class="calendar-date"></td>','<td class="calendar-date"></td>','<td class="calendar-date"></td>',"</tr>","</tbody>","</table>","</div>",'<div class="calendar-body">',"<table>","<tbody>",'<tr class="calendar-month-group">','<td class="calendar-month"></td>','<td class="calendar-month"></td>','<td class="calendar-month"></td>',"</tr>","</tbody>","</table>","</div>",'<div class="calendar-body">',"<table>","<tbody>",'<tr class="calendar-year-group">','<td class="calendar-year"></td>','<td class="calendar-year"></td>','<td class="calendar-year"></td>',"</tr>","</tbody>","</table>","</div>"].join(""),a.calendarFooter=['<div class="calendar-footer">','<p>오늘 <em class="calendar-today"></em></p>',"</div>"].join(""),t.exports=a},function(t,e){"use strict";var a={getDateHash:function(t,e,a){var n;return arguments.length<3&&(n=arguments[0]||new Date,t=n.getFullYear(),e=n.getMonth()+1,a=n.getDate()),{year:t,month:e,date:a}},getToday:function(){return a.getDateHash()},getWeeks:function(t,e){var a=this.getFirstDay(t,e),n=this.getLastDate(t,e);return Math.ceil((a+n)/7)},getTime:function(t){return this.getDateObject(t).getTime()},getFirstDay:function(t,e){return new Date(t,e-1,1).getDay()},getLastDay:function(t,e){return new Date(t,e,0).getDay()},getLastDate:function(t,e){return new Date(t,e,0).getDate()},getDateObject:function(t){return 3===arguments.length?new Date(arguments[0],arguments[1]-1,arguments[2]):new Date(t.year,t.month-1,t.date)},getRelativeDate:function(t,e,n,r){var i=r.year+t,s=r.month+e-1,o=r.date+n,l=new Date(i,s,o);return a.getDateHash(l)},prependLeadingZero:function(t){var e="";return t<10&&(e="0"),e+t},getConvertedTitle:function(t,e,a){return t=t.replace(a,function(t){return e[t]||""})}};t.exports=a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vdHVpLWNvbXBvbmVudC1jYWxlbmRhci5taW4uanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDI5MTkyNjgzZTI1ZDU2MGU2MDBhIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsZW5kYXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMuanMiXSwibmFtZXMiOlsibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJleHBvcnRzIiwibW9kdWxlIiwiaWQiLCJsb2FkZWQiLCJjYWxsIiwibSIsImMiLCJwIiwiQ2FsZW5kYXIiLCJ0dWkiLCJ1dGlsIiwiZGVmaW5lTmFtZXNwYWNlIiwiY2FsZW5kYXJVdGlscyIsIkNPTlNUQU5UUyIsImJpbmQiLCJleHRlbmQiLCJkZWZpbmVDbGFzcyIsImluaXQiLCJvcHRpb24iLCJ0aGlzIiwiX29wdGlvbiIsIl9zaG93bkRhdGUiLCJ5ZWFyIiwibW9udGgiLCJkYXRlIiwiJGVsZW1lbnQiLCIkIiwiZWxlbWVudCIsImFyZ3VtZW50cyIsIiRoZWFkZXIiLCIkdGl0bGUiLCIkdGl0bGVZZWFyIiwiJHRpdGxlTW9udGgiLCIkYm9keSIsIiR3ZWVrVGVtcGxhdGUiLCIkd2Vla0FwcGVuZFRhcmdldCIsIl8kZGF0ZUVsZW1lbnQiLCJfJGRhdGVDb250YWluZXJFbGVtZW50IiwiJGZvb3RlciIsIiR0b2RheSIsInNob3duTGF5ZXJJZHgiLCJkYXRhT2ZNb250aExheWVyIiwiZGF0YU9mWWVhckxheWVyIiwiaXNDbGlja2FibGVUaXRsZSIsImhhbmRsZXJzIiwiX3NldERlZmF1bHQiLCJfc2V0T3B0aW9uIiwiX2Fzc2lnbkhUTUxFbGVtZW50cyIsIl9hdHRhY2hFdmVudCIsImRyYXciLCJpbnN0YW5jZU9wdGlvbiIsInRvZGF5IiwiZ2V0RGF0ZUhhc2giLCJkZWZhdWx0T3B0aW9uIiwiY2xhc3NQcmVmaXgiLCJ0aXRsZUZvcm1hdCIsInRvZGF5Rm9ybWF0IiwieWVhclRpdGxlRm9ybWF0IiwibW9udGhUaXRsZUZvcm1hdCIsIm1vbnRoVGl0bGVzIiwiZGF5VGl0bGVzIiwiaXRlbUNvdW50T2ZZZWFyIiwiY2xhc3NTZWxlY3RvciIsIl9hc3NpZ25IZWFkZXIiLCJfYXNzaWduQm9keSIsIl9hc3NpZ25Gb290ZXIiLCJoZWFkZXJUZW1wbGF0ZSIsImRlZmF1bHRDbGFzc1ByZWZpeFJlZ0V4cCIsImZpbmQiLCJrZXkiLCJyZWxhdGl2ZU1vbnRoVmFsdWVLZXkiLCJidG5DbGFzc05hbWUiLCJsZW5ndGgiLCJjYWxlbmRhckhlYWRlciIsInJlcGxhY2UiLCJhcHBlbmQiLCJwcmV2WWVhciIsImRhdGEiLCJwcmV2TW9udGgiLCJuZXh0WWVhciIsIm5leHRNb250aCIsImhhc0NsYXNzIiwiY2xpY2thYmxlIiwiYm9keVRlbXBsYXRlIiwiY2FsZW5kYXJCb2R5IiwiX2Fzc2lnbldlZWsiLCJfYXNzaWduTW9udGhMYXllciIsIl9hc3NpZ25ZZWFyTGF5ZXIiLCJoaWRlIiwiY2xvbmUiLCJwYXJlbnQiLCIkbW9udGhzVGVtcGxhdGUiLCJjb2xzIiwicm93cyIsIk1hdGgiLCJjZWlsIiwidGVtcGxhdGUiLCJhcHBlbmRlZFRhcmdldCIsImZyYW1lIiwiJHllYXJzVGVtcGxhdGUiLCJmb290ZXJUZW1wbGF0ZSIsImNhbGVuZGFyRm9vdGVyIiwiY2xpY2tSb2xsb3ZlckJ0biIsIl9vbkNsaWNrUm9sbG92ZXJCdXR0b24iLCJhdHRhY2hFdmVudFRvUm9sbG92ZXJCdG4iLCJjbGlja1RpdGxlIiwiX29uQ2xpY2tUaXRsZSIsImNsaWNrWWVhckxheWVyIiwiX29uQ2xpY2tZZWFyTGF5ZXIiLCJjbGlja01vbnRoTGF5ZXIiLCJfb25DbGlja01vbnRoTGF5ZXIiLCJhdHRhY2hFdmVudFRvVGl0bGUiLCJhdHRhY2hFdmVudFRvQm9keSIsInNlbGVjdG9yIiwiYnRucyIsIm9uIiwiZGV0YWNoRXZlbnRUb1JvbGxvdmVyQnRuIiwib2ZmIiwiZGV0YWNoRXZlbnRUb1RpdGxlIiwieWVhckxheWVyIiwibW9udGhMYXllciIsImRldGFjaEV2ZW50VG9Cb2R5IiwiZXZlbnQiLCJyZWxhdGl2ZU1vbnRoVmFsdWUiLCJjdXJyZW50VGFyZ2V0IiwicHJldmVudERlZmF1bHQiLCJnZXREYXRlIiwiX2dldERhdGVGb3JEcmF3aW5nIiwiaXNSZWxhdGl2ZSIsInJlbGF0aXZlRGF0ZSIsIm5EYXRlIiwiaXNOdW1iZXIiLCJnZXRSZWxhdGl2ZURhdGUiLCJfaXNOZWNlc3NhcnlGb3JEcmF3aW5nIiwic2hvd25EYXRlIiwiX3NldENhbGVuZGFyVGV4dCIsImRhdGVGb3JEcmF3aW5nIiwiX3NldENhbGVuZGFyVG9kYXkiLCJfc2V0Q2FsZW5kYXJUaXRsZSIsIl9kcmF3RGF0ZXMiLCJkYXlJbldlZWsiLCJkYXRlUHJldk1vbnRoIiwiZGF0ZU5leHRNb250aCIsImRhdGVzIiwiZmlyc3REYXkiLCJnZXRGaXJzdERheSIsImluZGV4T2ZMYXN0RGF0ZSIsIl9maWxsRGF0ZXMiLCJmb3JFYWNoIiwiaSIsImV2ZW50RGF0YSIsImlzUHJldk1vbnRoIiwiaXNOZXh0TW9udGgiLCIkZGF0ZUNvbnRhaW5lciIsInRlbXBZZWFyIiwidGVtcE1vbnRoIiwiYWRkQ2xhc3MiLCJfc2V0V2Vla2VuZCIsIl9pc1RvZGF5IiwiJGRhdGUiLCJnZXQiLCJodG1sIiwidG9TdHJpbmciLCJmaXJlIiwiaXNZZWFyIiwiaXNNb250aCIsImlzRGF0ZSIsIl9zZXRXZWVrcyIsIiRlbFdlZWsiLCJ3ZWVrcyIsImdldFdlZWtzIiwiYXBwZW5kVG8iLCJfd2Vla0VsZW1lbnRzIiwicHVzaCIsImxhc3REYXkiLCJnZXRMYXN0RGF5IiwibGFzdERhdGUiLCJnZXRMYXN0RGF0ZSIsInByZXZNb250aExhc3REYXRlIiwiZGF5IiwiX2NsZWFyIiwiZW1wdHkiLCJyZXBsYWNlTWFwIiwicmVnIiwicHJlcGVuZExlYWRpbmdaZXJvIiwiX2dldFJlcGxhY2VNYXAiLCJ0aXRsZVJlZ0V4cCIsIl9zZXREYXRlVGV4dEluQ2FsZW5kYXIiLCJ0aXRsZVllYXJSZWdFeHAiLCJ0aXRsZU1vbnRoUmVnRXhwIiwiZm9ybSIsIm1hcCIsInRpdGxlIiwiJGVsIiwiZ2V0Q29udmVydGVkVGl0bGUiLCJ0ZXh0IiwieWVhclN1YiIsInN1YnN0ciIsIm1vbnRoTGFiZWwiLCJsYWJlbEtleSIsIkRhdGUiLCJnZXREYXkiLCJkYXlMYWJlbCIsInl5eXkiLCJ5eSIsIm1tIiwiTnVtYmVyIiwiTSIsImRkIiwiZCIsIkQiLCJ0b2RheVJlZ0V4cCIsIl9zZXRUaXRsZU9uWWVhckxheWVyIiwiX2dldEluZm9PZlllYXJSYW5nZSIsInN0YXJ0WWVhclRleHQiLCJfZ2V0Q29udmVydGVkWWVhclRpdGxlIiwic3RhcnRZZWFyIiwiZW5kWWVhclRleHQiLCJlbmRZZWFyIiwiX3NldENsYXNzTmFtZU9uVGl0bGUiLCJjbGFzc05hbWUiLCJyZW1vdmVDbGFzcyIsImZyYW1lSW5mbyIsImJhc2VJZHgiLCJmbG9vciIsIl9nZXRJbmRleE9mU2hvd25MYXllciIsInR5cGUiLCJpbkFycmF5IiwibGF5ZXJLZXlzIiwiX2RyYXdIZWFkZXIiLCJwcmV2VmFsdWUiLCJuZXh0VmFsdWUiLCJwcmV2QnRuIiwicHJldiIsIm5leHRCdG4iLCJuZXh0IiwiX2RyYXdCb2R5IiwiX2RyYXdGcmFtZU9uTW9udGhMYXllciIsIl9kcmF3QnV0dG9uc09mTW9udGgiLCJfZHJhd0ZyYW1lT25ZZWFyTGF5ZXIiLCJfZHJhd0J1dHRvbnNPZlllYXIiLCJfY2hhbmdlU2hvd25MYXllciIsIiRtb250aEdyb3VwRWwiLCIkYnV0dG9uRWwiLCJyZWxhdGl2ZU1vbnRoIiwic2VsZWN0ZWRNb250aCIsIiRtb250aEVscyIsImlkeCIsImVxIiwic2VsZWN0ZWQiLCIkeWVhckdyb3VwRWwiLCJjbnQiLCIkeWVhckVscyIsInByZXZzaG93bkxheWVySWR4IiwiJGJvZHlzIiwic2hvdyIsInNob3duVHlwZSIsImludm9rZSIsInNldERhdGUiLCJDdXN0b21FdmVudHMiLCJtaXhpbiIsImpvaW4iLCJ1dGlscyIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXRUb2RheSIsImdldFRpbWUiLCJnZXREYXRlT2JqZWN0IiwiZGF0ZU9iaiIsIm5ZZWFyIiwibk1vbnRoIiwibkRhdGVPYmoiLCJudW1iZXIiLCJwcmVmaXgiLCJzdHIiLCJtYXRjaGVkU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Q0FNUyxTQUFVQSxHQ0ZuQixRQUFBQyxHQUFBQyxHQUdBLEdBQUFDLEVBQUFELEdBQ0EsTUFBQUMsR0FBQUQsR0FBQUUsT0FHQSxJQUFBQyxHQUFBRixFQUFBRCxJQUNBRSxXQUNBRSxHQUFBSixFQUNBSyxRQUFBLEVBVUEsT0FOQVAsR0FBQUUsR0FBQU0sS0FBQUgsRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUgsR0FHQUksRUFBQUUsUUFBQSxFQUdBRixFQUFBRCxRQXZCQSxHQUFBRCxLQXFDQSxPQVRBRixHQUFBUSxFQUFBVCxFQUdBQyxFQUFBUyxFQUFBUCxFQUdBRixFQUFBVSxFQUFBLE9BR0FWLEVBQUEsS0RZTSxTQUFTSSxFQUFRRCxFQUFTSCxHRWxEaEMsWUFFQSxJQUFBVyxHQUFBWCxFQUFBLEVBRUFZLEtBQUFDLEtBQUFDLGdCQUFBLGlCQUNBSCxjRjBETSxTQUFTUCxFQUFRRCxFQUFTSCxHRzNEaEMsWUFFQSxJQUFBZSxHQUFBZixFQUFBLEdBQ0FnQixFQUFBaEIsRUFBQSxHQUVBYSxFQUFBRCxJQUFBQyxLQUNBSSxFQUFBSixFQUFBSSxLQUNBQyxFQUFBTCxFQUFBSyxPQXdDQVAsRUFBQUUsRUFBQU0sYUFDQUMsS0FBQSxTQUFBQyxHQWlCQUMsS0FBQUMsV0FPQUQsS0FBQUUsWUFDQUMsS0FBQSxFQUNBQyxNQUFBLEVBQ0FDLEtBQUEsR0FhQUwsS0FBQU0sU0FBQUMsRUFBQVIsRUFBQVMsU0FBQUMsVUFBQSxJQU9BVCxLQUFBVSxRQUFBLEtBT0FWLEtBQUFXLE9BQUEsS0FPQVgsS0FBQVksV0FBQSxLQU9B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QUNBLE1BQUFwRixHQUFBb0YsSUFBQSxNQU9BbFIsR0FBQUQsUUFBQXNRIiwiZmlsZSI6InR1aS1jb21wb25lbnQtY2FsZW5kYXIubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiB0dWktY29tcG9uZW50LWNhbGVuZGFyLm1pbi5qc1xuICogQHZlcnNpb24gMS4yLjBcbiAqIEBhdXRob3IgTkhORW50IEZFIERldmVsb3BtZW50IExhYiA8ZGxfamF2YXNjcmlwdEBuaG5lbnQuY29tPlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcImRpc3RcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBDYWxlbmRhciA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR0dWkudXRpbC5kZWZpbmVOYW1lc3BhY2UoJ3R1aS5jb21wb25lbnQnLCB7XG5cdCAgICBDYWxlbmRhcjogQ2FsZW5kYXJcblx0fSk7XG5cblxuLyoqKi8gfSxcbi8qIDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qKlxuXHQgKiBAZmlsZW92ZXJ2aWV3IENhbGVuZGFyIGNvbXBvbmVudChmcm9tIFB1ZyBjb21wb25lbnQpXG5cdCAqIEBhdXRob3IgTkhOIEVudC4gRkUgZGV2IExhYiA8ZGxfamF2YXNjcmlwdEBuaG5lbnQuY29tPlxuXHQgKi9cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIGNhbGVuZGFyVXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgQ09OU1RBTlRTID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdHZhciB1dGlsID0gdHVpLnV0aWw7XG5cdHZhciBiaW5kID0gdXRpbC5iaW5kO1xuXHR2YXIgZXh0ZW5kID0gdXRpbC5leHRlbmQ7XG5cdFxuXHQvKipcblx0ICogQ2FsZW5kYXIgY29tcG9uZW50IGNsYXNzXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbl0gQSBvcHRpb25zIGZvciBpbml0aWFsaXplXG5cdCAqICAgICBAcGFyYW0ge0hUTUxFbGVtZW50fSBvcHRpb24uZWxlbWVudCBBIHJvb3QgZWxlbWVudFxuXHQgKiAgICAgQHBhcmFtIHtzdHJpbmd9IFtvcHRpb24uY2xhc3NQcmVmaXg9XCJjYWxlbmRhci1cIl0gQSBwcmVmaXggY2xhc3MgZm9yIG1hcmt1cCBzdHJ1Y3R1cmVcblx0ICogICAgIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9uLnllYXI9dGhpcyB5ZWFyXSBBIHllYXIgZm9yIGluaXRpYWxpemVcblx0ICogICAgIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9uLm1vbnRoPXRoaXMgbW9udGhdIEEgbW9udGggZm9yIGluaXRpYWxpemVcblx0ICogICAgIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9uLnRpdGxlRm9ybWF0PVwieXl5eS1tbVwiXSBBIHRpdGxlIGZvcm1hdC5cblx0ICogICAgICAgICAgICAgICAgICAgICBUaGlzIGNvbXBvbmVudCBmaW5kIHRpdGxlIGVsZW1lbnQgYnkgY2xhc3NOYW1lICdbcHJlZml4XXRpdGxlJ1xuXHQgKiAgICAgQHBhcmFtIHtzdHJpbmd9IFtvcHRpb24udG9kYXlGb3JtYXQgPSBcInl5eXkgWWVhciBtbSBNb250aCBkZCBEYXkgKEQpXCJdIEEgdG9kYXkgZm9ybWF0LlxuXHQgKiAgICAgICAgICAgICAgICAgICAgIFRoaXMgY29tcG9uZW50IGZpbmQgdG9kYXkgZWxlbWVudCBieSBjbGFzc05hbWUgJ1twcmVmaXhddG9kYXknXG5cdCAqICAgICBAcGFyYW0ge3N0cmluZ30gW29wdGlvbi55ZWFyVGl0bGVGb3JtYXQgPSBcInl5eXlcIl0gQSB5ZWFyIHRpdGxlIGZvcm1hbnQuXG5cdCAqICAgICAgICAgICAgICAgICAgICAgIFRoaXMgY29tcG9uZW50IGZpbmQgeWVhciB0aXRsZSBlbGVtZW50IGJ5IGNsYXNzTmFtZSAnW3ByZWZpeF15ZWFyJ1xuXHQgKiAgICAgQHBhcmFtIHtzdHJpbmd9IFtvcHRpb24ubW9udGhUaXRsZUZvcm1hdCA9IFwibVwiXSBBIG1vbnRoIHRpdGxlIGZvcm1hdC5cblx0ICogICAgICAgICAgICAgICAgICAgICBUaGlzIGNvbXBvbmVudCBmaW5kIG1vbnRoIHRpdGxlIGVsZW1lbnQgYnkgY2xhc3NOYW1l7J20ICdbcHJlZml4XW1vbnRoJ1xuXHQgKiAgICAgQHBhcmFtIHtBcnJheX0gW29wdGlvbi5tb250aFRpdGxlcyA9IFtcIkpBTlwiLFwiRkVCXCIsXCJNQVJcIixcIkFQUlwiLFwiTUFZXCIsXCJKVU5cIixcIkpVTFwiLFwiQVVHXCIsXCJTRVBcIixcIk9DVFwiLFwiTk9WXCIsXCJERUNcIl1dXG5cdCAqICAgICAgICAgICAgICAgICAgICBBIGxhYmVsIG9mIGVhY2ggbW9udGguXG5cdCAqICAgICBAcGFyYW0ge0FycmF5fSBbb3B0aW9uLmRheVRpdGxlcyA9IFtcIlN1blwiLFwiTW9uXCIsXCJUdWVcIixcIldlZFwiLFwiVGh1XCIsXCJGcmlcIixcIlNhdFwiXV0gQSBsYWJlbCBmb3IgZGF5LlxuXHQgKiAgICAgICAgICAgICAgICAgICAgSWYgeW91IHNldCB0aGUgb3RoZXIgb3B0aW9uIHRvZGF5Rm9ybWF0ICdEJywgeW91IGNhbiB1c2UgdGhpcyBuYW1lLlxuXHQgKiBAdHV0b3JpYWwgc2FtcGxlMVxuXHQgKiBAdHV0b3JpYWwgc2FtcGxlMlxuXHQgKiBAdHV0b3JpYWwgc2FtcGxlM1xuXHQgKiBAZXhhbXBsZVxuXHQgKiB2YXIgY2FsZW5kYXIgPSBuZXcgdHVpLmNvbXBvbmVudC5DYWxlbmRhcih7XG5cdCAqICAgICBlbGVtZW50OiAnI2xheWVyJyxcblx0ICogICAgIGNsYXNzUHJlZml4OiBcImNhbGVuZGFyLVwiLFxuXHQgKiAgICAgeWVhcjogMTk4Myxcblx0ICogICAgIG1vbnRoOiA1LFxuXHQgKiAgICAgdGl0bGVGb3JtYXQ6IFwieXl5eS1tbVwiLCAvLyB0aXRsZVxuXHQgKiAgICAgdG9kYXlGb3JtYXQ6IFwieXl5eSAvIG1tIC8gZGQgKEQpXCIgLy8gdG9kYXlcblx0ICogICAgIHllYXJUaXRsZUZvcm1hdDogXCJ5eXl5XCIsIC8vIHllYXIgdGl0bGVcblx0ICogICAgIG1vbnRoVGl0bGVGb3JtYXQ6IFwibVwiLCAvLyBtb250aCB0aXRsZVxuXHQgKiAgICAgbW9udGhUaXRsZXM6IFtcIkpBTlwiLCBcIkZFQlwiLCBcIk1BUlwiLCBcIkFQUlwiLCBcIk1BWVwiLCBcIkpVTlwiLCBcIkpVTFwiLCBcIkFVR1wiLCBcIlNFUFwiLCBcIk9DVFwiLCBcIk5PVlwiLCBcIkRFQ1wiXSxcblx0ICogICAgIGRheVRpdGxlczogWydzdW4nLCAnbW9uJywgJ3R1ZScsICd3ZWQnLCAndGh1JywgJ2ZyaScsICdzYXQnXSAvLyBkYXlzXG5cdCAqICAgICBpdGVtQ291bnRPZlllYXI6IDEyXG5cdCAqIH0pO1xuXHQgKi9cblx0dmFyIENhbGVuZGFyID0gdXRpbC5kZWZpbmVDbGFzcygvKiogQGxlbmRzIENhbGVuZGFyLnByb3RvdHlwZSAqLyB7XG5cdCAgICBpbml0OiBmdW5jdGlvbihvcHRpb24pIHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBTZXQgb3B0aW9uc1xuXHQgICAgICAgICAqIG9wdGlvbjoge1xuXHQgICAgICAgICAqICAgICBjbGFzc1ByZWZpeDogc3RyaW5nLFxuXHQgICAgICAgICAqICAgICB5ZWFyOiBudW1iZXJcblx0ICAgICAgICAgKiAgICAgbW9udGg6IG51bWJlclxuXHQgICAgICAgICAqICAgICB0aXRsZUZvcm1hdDogc3RyaW5nLFxuXHQgICAgICAgICAqICAgICB0b2RheUZvcm1hdDogc3RyaW5nLFxuXHQgICAgICAgICAqICAgICB5ZWFyVGl0bGVGb3JtYXQ6IHN0cmluZyxcblx0ICAgICAgICAgKiAgICAgbW9udGhUaXRsZUZvcm1hdDogc3RyaW5nLFxuXHQgICAgICAgICAqICAgICBtb250aFRpdGxlczogQXJyYXksXG5cdCAgICAgICAgICogICAgIGRheVRpdGxlczogQXJyYXksXG5cdCAgICAgICAgICogICAgIGl0ZW1Db3VudE9mWWVhcjogbnVtYmVyXG5cdCAgICAgICAgICogfVxuXHQgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdGhpcy5fb3B0aW9uID0ge307XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEEgZGF5IHRoYXQgaXMgc2hvd25cblx0ICAgICAgICAgKiBAdHlwZSB7e3llYXI6IG51bWJlciwgbW9udGg6IG51bWJlcn19XG5cdCAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB0aGlzLl9zaG93bkRhdGUgPSB7XG5cdCAgICAgICAgICAgIHllYXI6IDAsXG5cdCAgICAgICAgICAgIG1vbnRoOiAxLFxuXHQgICAgICAgICAgICBkYXRlOiAxXG5cdCAgICAgICAgfTtcblx0XG5cdCAgICAgICAgLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0ICAgICAgICAgKiBqUXVlcnkgLSBIVE1MRWxlbWVudFxuXHQgICAgICAgICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogPT09PT09PT09Um9vdCBFbGVtZW50PT09PT09PT09XG5cdCAgICAgICAgICogSWYgb3B0aW9ucyBkbyBub3QgaW5jbHVkZSBlbGVtZW50LCB0aGlzIGNvbXBvbmVudCBqZWRnZSBpbml0aWFsaXplIGVsZW1lbnQgd2l0aG91dCBvcHRpb25zXG5cdCAgICAgICAgICogQHR5cGUge2pRdWVyeX1cblx0ICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHRoaXMuJGVsZW1lbnQgPSAkKG9wdGlvbi5lbGVtZW50IHx8IGFyZ3VtZW50c1swXSk7XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqID09PT09PT09PUhlYWRlcj09PT09PT09PVxuXHQgICAgICAgICAqIEB0eXBlIHtqUXVlcnl9XG5cdCAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB0aGlzLiRoZWFkZXIgPSBudWxsO1xuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBBIHRpbHRlXG5cdCAgICAgICAgICogQHR5cGUge2pRdWVyeX1cblx0ICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHRoaXMuJHRpdGxlID0gbnVsbDtcblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQSB5ZWFyIHRpdGxlXG5cdCAgICAgICAgICogQHR5cGUge2pRdWVyeX1cblx0ICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHRoaXMuJHRpdGxlWWVhciA9IG51bGw7XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEEgbW9udGggdGl0bGVcblx0ICAgICAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuXHQgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdGhpcy4kdGl0bGVNb250aCA9IG51bGw7XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqID09PT09PT09PUJvZHk9PT09PT09PT1cblx0ICAgICAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuXHQgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdGhpcy4kYm9keSA9IG51bGw7XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEEgdGVtcGxhdGUgb2Ygd2Vla1xuXHQgICAgICAgICAqIEB0eXBlIHtqUXVlcnl9XG5cdCAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB0aGlzLiR3ZWVrVGVtcGxhdGUgPSBudWxsO1xuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBBIHdlZWsgcGFyZW50IGVsZW1lbnRcblx0ICAgICAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuXHQgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdGhpcy4kd2Vla0FwcGVuZFRhcmdldCA9IG51bGw7XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEEgZGF0ZSBlbGVtZW50XG5cdCAgICAgICAgICogQHR5cGUge2pRdWVyeX1cblx0ICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHRoaXMuXyRkYXRlRWxlbWVudCA9IG51bGw7XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEEgZGF0ZSB3cmFwcGVyIGVsZW1lbnRcblx0ICAgICAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuXHQgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdGhpcy5fJGRhdGVDb250YWluZXJFbGVtZW50ID0gbnVsbDtcblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogPT09PT09PT09Rm9vdGVyPT09PT09PT09XG5cdCAgICAgICAgICogQHR5cGUge2pRdWVyeX1cblx0ICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHRoaXMuJGZvb3RlciA9IG51bGw7XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFRvZGF5IGVsZW1lbnRcblx0ICAgICAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuXHQgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdGhpcy4kdG9kYXkgPSBudWxsO1xuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbmRleCBvZiBzaG93biBsYXllclxuXHQgICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG5cdCAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB0aGlzLnNob3duTGF5ZXJJZHggPSAwO1xuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBEYXRhIG9mIG1vbnRoJ3MgbGF5ZXJcblx0ICAgICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuXHQgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdGhpcy5kYXRhT2ZNb250aExheWVyID0ge307XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIERhdGEgb2YgeWVhcidzIGxheWVyXG5cdCAgICAgICAgICogQHR5cGUge09iamVjdH1cblx0ICAgICAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHRoaXMuZGF0YU9mWWVhckxheWVyID0ge307XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFdoZXRoZXIgdGl0bGUgaXMgY2xpY2thYmxlIG9yIG5vdFxuXHQgICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuXHQgICAgICAgICAqIEBwcml2YXRlXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdGhpcy5pc0NsaWNrYWJsZVRpdGxlID0gZmFsc2U7XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEhhbmRsZXJzIGJpbmRpbmcgY29udGV4dFxuXHQgICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG5cdCAgICAgICAgICogQHByaXZhdGVcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB0aGlzLmhhbmRsZXJzID0ge307XG5cdFxuXHQgICAgICAgIC8qKiBTZXQgZGVmYXVsdCBvcHRpb25zICovXG5cdCAgICAgICAgdGhpcy5fc2V0RGVmYXVsdChvcHRpb24pO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIFNldCBkZWZ1bGF0IG9waXRvbnNcblx0ICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uXSBBIG9wdGlvbnMgdG8gaW5pdGlhbHppZSBjb21wb25lbnRcblx0ICAgICAqIEBwcml2YXRlXG5cdCAgICAgKi9cblx0ICAgIF9zZXREZWZhdWx0OiBmdW5jdGlvbihvcHRpb24pIHtcblx0ICAgICAgICB0aGlzLl9zZXRPcHRpb24ob3B0aW9uKTtcblx0ICAgICAgICB0aGlzLl9hc3NpZ25IVE1MRWxlbWVudHMoKTtcblx0ICAgICAgICB0aGlzLl9hdHRhY2hFdmVudCgpO1xuXHQgICAgICAgIHRoaXMuZHJhdyh0aGlzLl9vcHRpb24ueWVhciwgdGhpcy5fb3B0aW9uLm1vbnRoLCBmYWxzZSwgMCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogU2F2ZSBvcHRpb25zXG5cdCAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbl0gQSBvcHRpb25zIHRvIGluaXRpYWxpemUgY29tcG9uZW50XG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfc2V0T3B0aW9uOiBmdW5jdGlvbihvcHRpb24pIHtcblx0ICAgICAgICB2YXIgaW5zdGFuY2VPcHRpb24gPSB0aGlzLl9vcHRpb24sXG5cdCAgICAgICAgICAgIHRvZGF5ID0gY2FsZW5kYXJVdGlscy5nZXREYXRlSGFzaCgpO1xuXHRcblx0ICAgICAgICB2YXIgZGVmYXVsdE9wdGlvbiA9IHtcblx0ICAgICAgICAgICAgY2xhc3NQcmVmaXg6ICdjYWxlbmRhci0nLFxuXHQgICAgICAgICAgICB5ZWFyOiB0b2RheS55ZWFyLFxuXHQgICAgICAgICAgICBtb250aDogdG9kYXkubW9udGgsXG5cdCAgICAgICAgICAgIHRpdGxlRm9ybWF0OiAneXl5eS1tbScsXG5cdCAgICAgICAgICAgIHRvZGF5Rm9ybWF0OiAneXl5eS9tbS9kZCAoRCknLFxuXHQgICAgICAgICAgICB5ZWFyVGl0bGVGb3JtYXQ6ICd5eXl5Jyxcblx0ICAgICAgICAgICAgbW9udGhUaXRsZUZvcm1hdDogJ20nLFxuXHQgICAgICAgICAgICBtb250aFRpdGxlczogWydKQU4nLCAnRkVCJywgJ01BUicsICdBUFInLCAnTUFZJywgJ0pVTicsICdKVUwnLCAnQVVHJywgJ1NFUCcsICdPQ1QnLCAnTk9WJywgJ0RFQyddLFxuXHQgICAgICAgICAgICBkYXlUaXRsZXM6IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodScsICdGcmknLCAnU2F0J10sXG5cdCAgICAgICAgICAgIGl0ZW1Db3VudE9mWWVhcjogQ09OU1RBTlRTLml0ZW1Db3VudE9mWWVhclxuXHQgICAgICAgIH07XG5cdCAgICAgICAgZXh0ZW5kKGluc3RhbmNlT3B0aW9uLCBkZWZhdWx0T3B0aW9uLCBvcHRpb24pO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIFNldCBlbGVtZW50IHRvIGZpbGVkXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfYXNzaWduSFRNTEVsZW1lbnRzOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgY2xhc3NQcmVmaXggPSB0aGlzLl9vcHRpb24uY2xhc3NQcmVmaXgsXG5cdCAgICAgICAgICAgICRlbGVtZW50ID0gdGhpcy4kZWxlbWVudCxcblx0ICAgICAgICAgICAgY2xhc3NTZWxlY3RvciA9ICcuJyArIGNsYXNzUHJlZml4O1xuXHRcblx0ICAgICAgICB0aGlzLl9hc3NpZ25IZWFkZXIoJGVsZW1lbnQsIGNsYXNzU2VsZWN0b3IsIGNsYXNzUHJlZml4KTtcblx0ICAgICAgICB0aGlzLl9hc3NpZ25Cb2R5KCRlbGVtZW50LCBjbGFzc1NlbGVjdG9yLCBjbGFzc1ByZWZpeCk7XG5cdCAgICAgICAgdGhpcy5fYXNzaWduRm9vdGVyKCRlbGVtZW50LCBjbGFzc1NlbGVjdG9yLCBjbGFzc1ByZWZpeCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogUmVnaXN0ZXIgaGVhZGVyIGVsZW1lbnQuXG5cdCAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW1lbnQgVGhlIHJvb3QgZWxlbWVudCBvZiBjb21wb25lbnRcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1NlbGVjdG9yIEEgY2xhc3Mgc2VsZWN0b3Jcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1ByZWZpeCBBIHByZWZpeCBmb3IgY2xhc3Ncblx0ICAgICAqIEBwcml2YXRlXG5cdCAgICAgKi9cblx0ICAgIF9hc3NpZ25IZWFkZXI6IGZ1bmN0aW9uKCRlbGVtZW50LCBjbGFzc1NlbGVjdG9yLCBjbGFzc1ByZWZpeCkge1xuXHQgICAgICAgIHZhciAkaGVhZGVyID0gJGVsZW1lbnQuZmluZChjbGFzc1NlbGVjdG9yICsgJ2hlYWRlcicpLFxuXHQgICAgICAgICAgICBoZWFkZXJUZW1wbGF0ZSxcblx0ICAgICAgICAgICAgZGVmYXVsdENsYXNzUHJlZml4UmVnRXhwLFxuXHQgICAgICAgICAgICBrZXkgPSBDT05TVEFOVFMucmVsYXRpdmVNb250aFZhbHVlS2V5LFxuXHQgICAgICAgICAgICBidG5DbGFzc05hbWUgPSAnYnRuLSc7XG5cdFxuXHQgICAgICAgIGlmICghJGhlYWRlci5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgaGVhZGVyVGVtcGxhdGUgPSBDT05TVEFOVFMuY2FsZW5kYXJIZWFkZXI7XG5cdCAgICAgICAgICAgIGRlZmF1bHRDbGFzc1ByZWZpeFJlZ0V4cCA9IENPTlNUQU5UUy5kZWZhdWx0Q2xhc3NQcmVmaXhSZWdFeHA7XG5cdFxuXHQgICAgICAgICAgICAkaGVhZGVyID0gJChoZWFkZXJUZW1wbGF0ZS5yZXBsYWNlKGRlZmF1bHRDbGFzc1ByZWZpeFJlZ0V4cCwgY2xhc3NQcmVmaXgpKTtcblx0ICAgICAgICAgICAgJGVsZW1lbnQuYXBwZW5kKCRoZWFkZXIpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLy8gYnV0dG9uXG5cdCAgICAgICAgJGhlYWRlci5maW5kKGNsYXNzU2VsZWN0b3IgKyBidG5DbGFzc05hbWUgKyBDT05TVEFOVFMucHJldlllYXIpLmRhdGEoa2V5LCAtMTIpO1xuXHQgICAgICAgICRoZWFkZXIuZmluZChjbGFzc1NlbGVjdG9yICsgYnRuQ2xhc3NOYW1lICsgQ09OU1RBTlRTLnByZXZNb250aCkuZGF0YShrZXksIC0xKTtcblx0ICAgICAgICAkaGVhZGVyLmZpbmQoY2xhc3NTZWxlY3RvciArIGJ0bkNsYXNzTmFtZSArIENPTlNUQU5UUy5uZXh0WWVhcikuZGF0YShrZXksIDEyKTtcblx0ICAgICAgICAkaGVhZGVyLmZpbmQoY2xhc3NTZWxlY3RvciArIGJ0bkNsYXNzTmFtZSArIENPTlNUQU5UUy5uZXh0TW9udGgpLmRhdGEoa2V5LCAxKTtcblx0XG5cdCAgICAgICAgLy8gdGl0bGUgdGV4dFxuXHQgICAgICAgIHRoaXMuJHRpdGxlID0gJGhlYWRlci5maW5kKGNsYXNzU2VsZWN0b3IgKyAndGl0bGUnKTtcblx0ICAgICAgICB0aGlzLiR0aXRsZVllYXIgPSAkaGVhZGVyLmZpbmQoY2xhc3NTZWxlY3RvciArICd0aXRsZS15ZWFyJyk7XG5cdCAgICAgICAgdGhpcy4kdGl0bGVNb250aCA9ICRoZWFkZXIuZmluZChjbGFzc1NlbGVjdG9yICsgJ3RpdGxlLW1vbnRoJyk7XG5cdFxuXHQgICAgICAgIHRoaXMuJGhlYWRlciA9ICRoZWFkZXI7XG5cdFxuXHQgICAgICAgIGlmICh0aGlzLiR0aXRsZS5oYXNDbGFzcyh0aGlzLl9vcHRpb24uY2xhc3NQcmVmaXggKyBDT05TVEFOVFMuY2xpY2thYmxlKSkge1xuXHQgICAgICAgICAgICB0aGlzLmlzQ2xpY2thYmxlVGl0bGUgPSB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBSZWdpc3RlciBib2R5IGVsZW1lbnRcblx0ICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbWVudCBUaGUgcm9vdCBlbG1lbnQgb2YgY29tcG9uZW50XG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NTZWxlY3RvciBBIHNlbGVjdG9yXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NQcmVmaXggQSBwcmVmaXggZm9yIGNsYXNzXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfYXNzaWduQm9keTogZnVuY3Rpb24oJGVsZW1lbnQsIGNsYXNzU2VsZWN0b3IsIGNsYXNzUHJlZml4KSB7XG5cdCAgICAgICAgdmFyICRib2R5ID0gJGVsZW1lbnQuZmluZChjbGFzc1NlbGVjdG9yICsgJ2JvZHknKSxcblx0ICAgICAgICAgICAgYm9keVRlbXBsYXRlLFxuXHQgICAgICAgICAgICBkZWZhdWx0Q2xhc3NQcmVmaXhSZWdFeHA7XG5cdFxuXHQgICAgICAgIGlmICghJGJvZHkubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgIGJvZHlUZW1wbGF0ZSA9IENPTlNUQU5UUy5jYWxlbmRhckJvZHk7XG5cdCAgICAgICAgICAgIGRlZmF1bHRDbGFzc1ByZWZpeFJlZ0V4cCA9IENPTlNUQU5UUy5kZWZhdWx0Q2xhc3NQcmVmaXhSZWdFeHA7XG5cdFxuXHQgICAgICAgICAgICAkYm9keSA9ICQoYm9keVRlbXBsYXRlLnJlcGxhY2UoZGVmYXVsdENsYXNzUHJlZml4UmVnRXhwLCBjbGFzc1ByZWZpeCkpO1xuXHQgICAgICAgICAgICAkZWxlbWVudC5hcHBlbmQoJGJvZHkpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgdGhpcy5fYXNzaWduV2VlayhjbGFzc1NlbGVjdG9yKTtcblx0ICAgICAgICB0aGlzLl9hc3NpZ25Nb250aExheWVyKGNsYXNzU2VsZWN0b3IpO1xuXHQgICAgICAgIHRoaXMuX2Fzc2lnblllYXJMYXllcihjbGFzc1NlbGVjdG9yKTtcblx0XG5cdCAgICAgICAgdGhpcy4kYm9keSA9ICRib2R5LmhpZGUoKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBSZWdpc3RlciB3ZWVrIGVsZW1udCBvbiBib2R5XG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NTZWxlY3RvciBBIHNlbGVjdG9yXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfYXNzaWduV2VlazogZnVuY3Rpb24oY2xhc3NTZWxlY3Rvcikge1xuXHQgICAgICAgIHZhciAkYm9keSA9IHRoaXMuJGVsZW1lbnQuZmluZChjbGFzc1NlbGVjdG9yICsgJ2JvZHknKTtcblx0ICAgICAgICB2YXIgJHdlZWtUZW1wbGF0ZSA9ICRib2R5LmZpbmQoY2xhc3NTZWxlY3RvciArICd3ZWVrJyk7XG5cdFxuXHQgICAgICAgIHRoaXMuJHdlZWtUZW1wbGF0ZSA9ICR3ZWVrVGVtcGxhdGUuY2xvbmUodHJ1ZSk7XG5cdCAgICAgICAgdGhpcy4kd2Vla0FwcGVuZFRhcmdldCA9ICR3ZWVrVGVtcGxhdGUucGFyZW50KCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogUmVnaXN0ZXIgZWxlbWVudCBvZiBtb250aCdzIGxheWVyIGFuZCBzYXZlIGRyYXdpbmcgaW5mb1xuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzU2VsZWN0b3IgQSBzZWxlY3RvclxuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXHQgICAgX2Fzc2lnbk1vbnRoTGF5ZXI6IGZ1bmN0aW9uKGNsYXNzU2VsZWN0b3IpIHtcblx0ICAgICAgICB2YXIgJGJvZHkgPSB0aGlzLiRlbGVtZW50LmZpbmQoY2xhc3NTZWxlY3RvciArICdib2R5Jyk7XG5cdCAgICAgICAgdmFyICRtb250aHNUZW1wbGF0ZSA9ICRib2R5LmZpbmQoY2xhc3NTZWxlY3RvciArICdtb250aC1ncm91cCcpO1xuXHQgICAgICAgIHZhciBjb2xzID0gJG1vbnRoc1RlbXBsYXRlLmZpbmQoY2xhc3NTZWxlY3RvciArICdtb250aCcpLmxlbmd0aDtcblx0ICAgICAgICB2YXIgcm93cyA9IE1hdGguY2VpbCh0aGlzLl9vcHRpb24ubW9udGhUaXRsZXMubGVuZ3RoIC8gY29scyk7XG5cdFxuXHQgICAgICAgIHRoaXMuZGF0YU9mTW9udGhMYXllciA9IHtcblx0ICAgICAgICAgICAgdGVtcGxhdGU6ICRtb250aHNUZW1wbGF0ZS5jbG9uZSh0cnVlKSxcblx0ICAgICAgICAgICAgYXBwZW5kZWRUYXJnZXQ6ICRtb250aHNUZW1wbGF0ZS5wYXJlbnQoKSxcblx0ICAgICAgICAgICAgZnJhbWU6IHtcblx0ICAgICAgICAgICAgICAgIGNvbHM6IGNvbHMsXG5cdCAgICAgICAgICAgICAgICByb3dzOiByb3dzXG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIFJlZ2lzdGVyIGVsZW1lbnQgb2YgeWVhcidzIGxheWVyIGFuZCBzYXZlIGRyYXdpbmcgaW5mb1xuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzU2VsZWN0b3IgQSBzZWxlY3RvclxuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXHQgICAgX2Fzc2lnblllYXJMYXllcjogZnVuY3Rpb24oY2xhc3NTZWxlY3Rvcikge1xuXHQgICAgICAgIHZhciAkYm9keSA9IHRoaXMuJGVsZW1lbnQuZmluZChjbGFzc1NlbGVjdG9yICsgJ2JvZHknKTtcblx0ICAgICAgICB2YXIgJHllYXJzVGVtcGxhdGUgPSAkYm9keS5maW5kKGNsYXNzU2VsZWN0b3IgKyAneWVhci1ncm91cCcpO1xuXHQgICAgICAgIHZhciBjb2xzID0gJHllYXJzVGVtcGxhdGUuZmluZChjbGFzc1NlbGVjdG9yICsgJ3llYXInKS5sZW5ndGg7XG5cdCAgICAgICAgdmFyIHJvd3MgPSBNYXRoLmNlaWwodGhpcy5fb3B0aW9uLml0ZW1Db3VudE9mWWVhciAvIGNvbHMpO1xuXHRcblx0ICAgICAgICB0aGlzLmRhdGFPZlllYXJMYXllciA9IHtcblx0ICAgICAgICAgICAgdGVtcGxhdGU6ICR5ZWFyc1RlbXBsYXRlLmNsb25lKHRydWUpLFxuXHQgICAgICAgICAgICBhcHBlbmRlZFRhcmdldDogJHllYXJzVGVtcGxhdGUucGFyZW50KCksXG5cdCAgICAgICAgICAgIGZyYW1lOiB7XG5cdCAgICAgICAgICAgICAgICBjb2xzOiBjb2xzLFxuXHQgICAgICAgICAgICAgICAgcm93czogcm93c1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBSZWdpc3RlciBmb290ZXIgZWxlbWVudFxuXHQgICAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtZW50IFRoZSByb290IGVsZW1lbnQgb2YgY29tcG9uZW50XG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NTZWxlY3RvciBBIHNlbGVjdG9yXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NQcmVmaXggQSBwcmVmaXggZm9yIGNsYXNzXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfYXNzaWduRm9vdGVyOiBmdW5jdGlvbigkZWxlbWVudCwgY2xhc3NTZWxlY3RvciwgY2xhc3NQcmVmaXgpIHtcblx0ICAgICAgICB2YXIgJGZvb3RlciA9ICRlbGVtZW50LmZpbmQoY2xhc3NTZWxlY3RvciArICdmb290ZXInKSxcblx0ICAgICAgICAgICAgZm9vdGVyVGVtcGxhdGUsXG5cdCAgICAgICAgICAgIGRlZmF1bHRDbGFzc1ByZWZpeFJlZ0V4cDtcblx0XG5cdCAgICAgICAgaWYgKCEkZm9vdGVyLmxlbmd0aCkge1xuXHQgICAgICAgICAgICBmb290ZXJUZW1wbGF0ZSA9IENPTlNUQU5UUy5jYWxlbmRhckZvb3Rlcjtcblx0ICAgICAgICAgICAgZGVmYXVsdENsYXNzUHJlZml4UmVnRXhwID0gQ09OU1RBTlRTLmRlZmF1bHRDbGFzc1ByZWZpeFJlZ0V4cDtcblx0XG5cdCAgICAgICAgICAgICRmb290ZXIgPSAkKGZvb3RlclRlbXBsYXRlLnJlcGxhY2UoZGVmYXVsdENsYXNzUHJlZml4UmVnRXhwLCBjbGFzc1ByZWZpeCkpO1xuXHQgICAgICAgICAgICAkZWxlbWVudC5hcHBlbmQoJGZvb3Rlcik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuJHRvZGF5ID0gJGZvb3Rlci5maW5kKGNsYXNzU2VsZWN0b3IgKyAndG9kYXknKTtcblx0ICAgICAgICB0aGlzLiRmb290ZXIgPSAkZm9vdGVyO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIFNldCBldmVudCBoYW5kbGVycyBhbmQgYXR0YWNoIGV2ZW50IG9uIGVsZW1lbnRcblx0ICAgICAqIEBwcml2YXRlXG5cdCAgICAgKi9cblx0ICAgIF9hdHRhY2hFdmVudDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdGhpcy5oYW5kbGVycy5jbGlja1JvbGxvdmVyQnRuID0gYmluZCh0aGlzLl9vbkNsaWNrUm9sbG92ZXJCdXR0b24sIHRoaXMpO1xuXHRcblx0ICAgICAgICB0aGlzLmF0dGFjaEV2ZW50VG9Sb2xsb3ZlckJ0bigpO1xuXHRcblx0ICAgICAgICBleHRlbmQodGhpcy5oYW5kbGVycywge1xuXHQgICAgICAgICAgICBjbGlja1RpdGxlOiBiaW5kKHRoaXMuX29uQ2xpY2tUaXRsZSwgdGhpcyksXG5cdCAgICAgICAgICAgIGNsaWNrWWVhckxheWVyOiBiaW5kKHRoaXMuX29uQ2xpY2tZZWFyTGF5ZXIsIHRoaXMpLFxuXHQgICAgICAgICAgICBjbGlja01vbnRoTGF5ZXI6IGJpbmQodGhpcy5fb25DbGlja01vbnRoTGF5ZXIsIHRoaXMpXG5cdCAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgIGlmICh0aGlzLmlzQ2xpY2thYmxlVGl0bGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5hdHRhY2hFdmVudFRvVGl0bGUoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5hdHRhY2hFdmVudFRvQm9keSgpO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEF0dGFjaCBldmVudCBvbiByb2xsb3ZlciBidXR0b25zIGluIFwiaGVhZGVyXCIgZWxlbWVudFxuXHQgICAgICovXG5cdCAgICBhdHRhY2hFdmVudFRvUm9sbG92ZXJCdG46IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBzZWxlY3RvciA9ICcuJyArIHRoaXMuX29wdGlvbi5jbGFzc1ByZWZpeCArICdyb2xsb3Zlcic7XG5cdCAgICAgICAgdmFyIGJ0bnMgPSB0aGlzLiRoZWFkZXIuZmluZChzZWxlY3Rvcik7XG5cdFxuXHQgICAgICAgIGJ0bnMub24oJ2NsaWNrJywgdGhpcy5oYW5kbGVycy5jbGlja1JvbGxvdmVyQnRuKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBEZXRhY2ggZXZlbnQgb24gcm9sbG92ZXIgYnV0dG9ucyBpbiBcImhlYWRlclwiIGVsZW1lbnRcblx0ICAgICAqL1xuXHQgICAgZGV0YWNoRXZlbnRUb1JvbGxvdmVyQnRuOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgc2VsZWN0b3IgPSAnLicgKyB0aGlzLl9vcHRpb24uY2xhc3NQcmVmaXggKyAncm9sbG92ZXInO1xuXHQgICAgICAgIHZhciBidG5zID0gdGhpcy4kaGVhZGVyLmZpbmQoc2VsZWN0b3IpO1xuXHRcblx0ICAgICAgICBidG5zLm9mZignY2xpY2snLCB0aGlzLmhhbmRsZXJzLmNsaWNrUm9sbG92ZXJCdG4pO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEF0dGFjaCBldmVudCBvbiB0aXRsZSBpbiBcImhlYWRlclwiIGVsZW1lbnRcblx0ICAgICAqL1xuXHQgICAgYXR0YWNoRXZlbnRUb1RpdGxlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB0aGlzLiR0aXRsZS5vbignY2xpY2snLCB0aGlzLmhhbmRsZXJzLmNsaWNrVGl0bGUpO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIERldGFjaCBldmVudCBvbiB0aXRsZSBpbiBcImhlYWRlclwiIGVsZW1lbnRcblx0ICAgICAqL1xuXHQgICAgZGV0YWNoRXZlbnRUb1RpdGxlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB0aGlzLiR0aXRsZS5vZmYoJ2NsaWNrJywgdGhpcy5oYW5kbGVycy5jbGlja1RpdGxlKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBBdHRhY2ggZXZlbnQgb24gdGl0bGUgaW4gXCJib2R5XCIgZWxlbWVudCAobW9udGggJiB5ZWFyIGxheWVyKVxuXHQgICAgICovXG5cdCAgICBhdHRhY2hFdmVudFRvQm9keTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIGNsYXNzUHJlZml4ID0gJy4nICsgdGhpcy5fb3B0aW9uLmNsYXNzUHJlZml4O1xuXHQgICAgICAgIHZhciB5ZWFyTGF5ZXIgPSB0aGlzLmRhdGFPZlllYXJMYXllci5hcHBlbmRlZFRhcmdldDtcblx0ICAgICAgICB2YXIgbW9udGhMYXllciA9IHRoaXMuZGF0YU9mTW9udGhMYXllci5hcHBlbmRlZFRhcmdldDtcblx0XG5cdCAgICAgICAgeWVhckxheWVyLm9uKCdjbGljaycsIGNsYXNzUHJlZml4ICsgJ3llYXInLCB0aGlzLmhhbmRsZXJzLmNsaWNrWWVhckxheWVyKTtcblx0ICAgICAgICBtb250aExheWVyLm9uKCdjbGljaycsIGNsYXNzUHJlZml4ICsgJ21vbnRoJywgdGhpcy5oYW5kbGVycy5jbGlja01vbnRoTGF5ZXIpO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIERldGFjaCBldmVudCBvbiB0aXRsZSBpbiBcImJvZHlcIiBlbGVtZW50IChtb250aCAmIHllYXIgbGF5ZXIpXG5cdCAgICAgKi9cblx0ICAgIGRldGFjaEV2ZW50VG9Cb2R5OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgY2xhc3NQcmVmaXggPSAnLicgKyB0aGlzLl9vcHRpb24uY2xhc3NQcmVmaXg7XG5cdCAgICAgICAgdmFyIHllYXJMYXllciA9IHRoaXMuZGF0YU9mWWVhckxheWVyLmFwcGVuZGVkVGFyZ2V0O1xuXHQgICAgICAgIHZhciBtb250aExheWVyID0gdGhpcy5kYXRhT2ZNb250aExheWVyLmFwcGVuZGVkVGFyZ2V0O1xuXHRcblx0ICAgICAgICB5ZWFyTGF5ZXIub2ZmKCdjbGljaycsIGNsYXNzUHJlZml4ICsgJ3llYXInLCB0aGlzLmhhbmRsZXJzLmNsaWNrWWVhckxheWVyKTtcblx0ICAgICAgICBtb250aExheWVyLm9mZignY2xpY2snLCBjbGFzc1ByZWZpeCArICdtb250aCcsIHRoaXMuaGFuZGxlcnMuY2xpY2tNb250aExheWVyKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBFdmVudCBoYW5kbGVyIC0gY2xpY2sgb24gcm9sbG92ZXIgYnV0dG9uc1xuXHQgICAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudCAtIE1vdXNlIGV2ZW50XG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfb25DbGlja1JvbGxvdmVyQnV0dG9uOiBmdW5jdGlvbihldmVudCkge1xuXHQgICAgICAgIHZhciByZWxhdGl2ZU1vbnRoVmFsdWUgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoQ09OU1RBTlRTLnJlbGF0aXZlTW9udGhWYWx1ZUtleSk7XG5cdCAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgICB0aGlzLmRyYXcoMCwgcmVsYXRpdmVNb250aFZhbHVlLCB0cnVlKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBFdmVudCBoYW5kbGVyIC0gY2xpY2sgb24gdGl0bGVcblx0ICAgICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnQgLSBNb3VzZSBldmVudFxuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXHQgICAgX29uQ2xpY2tUaXRsZTogZnVuY3Rpb24oZXZlbnQpIHtcblx0ICAgICAgICB2YXIgc2hvd25MYXllcklkeCA9IHRoaXMuc2hvd25MYXllcklkeDtcblx0ICAgICAgICB2YXIgZGF0ZTtcblx0XG5cdCAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XG5cdCAgICAgICAgaWYgKHNob3duTGF5ZXJJZHggPT09IDIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgc2hvd25MYXllcklkeCA9IChzaG93bkxheWVySWR4ICE9PSAyKSA/IChzaG93bkxheWVySWR4ICsgMSkgOiAwO1xuXHQgICAgICAgIGRhdGUgPSB0aGlzLmdldERhdGUoKTtcblx0XG5cdCAgICAgICAgdGhpcy5kcmF3KGRhdGUueWVhciwgZGF0ZS5tb250aCwgZmFsc2UsIHNob3duTGF5ZXJJZHgpO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEV2ZW50IGhhbmRsZXIgLSBjbGljayBvbiBtb250aCdzIGxheWVyXG5cdCAgICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGV2ZW50IC0gTW91c2UgZXZlbnRcblx0ICAgICAqIEBwcml2YXRlXG5cdCAgICAgKi9cblx0ICAgIF9vbkNsaWNrWWVhckxheWVyOiBmdW5jdGlvbihldmVudCkge1xuXHQgICAgICAgIHZhciByZWxhdGl2ZU1vbnRoVmFsdWUgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoQ09OU1RBTlRTLnJlbGF0aXZlTW9udGhWYWx1ZUtleSk7XG5cdCAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgICB0aGlzLmRyYXcoMCwgcmVsYXRpdmVNb250aFZhbHVlLCB0cnVlLCAxKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBFdmVudCBoYW5kbGVyIC0gY2xpY2sgb24geWVhcidzIGxheWVyXG5cdCAgICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGV2ZW50IC0gTW91c2UgZXZlbnRcblx0ICAgICAqIEBwcml2YXRlXG5cdCAgICAgKi9cblx0ICAgIF9vbkNsaWNrTW9udGhMYXllcjogZnVuY3Rpb24oZXZlbnQpIHtcblx0ICAgICAgICB2YXIgcmVsYXRpdmVNb250aFZhbHVlID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKENPTlNUQU5UUy5yZWxhdGl2ZU1vbnRoVmFsdWVLZXkpO1xuXHQgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdCAgICAgICAgdGhpcy5kcmF3KDAsIHJlbGF0aXZlTW9udGhWYWx1ZSwgdHJ1ZSwgMCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogR2V0IEhhc2ggZGF0YSB0byBkcm93IGNhbGVuZGFyXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0geWVhciBBIHllYXJcblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtb250aCBBIG1vbnRoXG5cdCAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1JlbGF0aXZlXSAgV2hldGhlciBpcyByZWxhdGVkIG90aGVyIHZhbHVlIG9yIG5vdFxuXHQgICAgICogQHJldHVybnMge3t5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXJ9fSBBIGRhdGUgaGFzaFxuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXHQgICAgX2dldERhdGVGb3JEcmF3aW5nOiBmdW5jdGlvbih5ZWFyLCBtb250aCwgaXNSZWxhdGl2ZSkge1xuXHQgICAgICAgIHZhciBuRGF0ZSA9IHRoaXMuZ2V0RGF0ZSgpLFxuXHQgICAgICAgICAgICByZWxhdGl2ZURhdGU7XG5cdFxuXHQgICAgICAgIG5EYXRlLmRhdGUgPSAxO1xuXHQgICAgICAgIGlmICghdXRpbC5pc051bWJlcih5ZWFyKSAmJiAhdXRpbC5pc051bWJlcihtb250aCkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG5EYXRlO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKGlzUmVsYXRpdmUpIHtcblx0ICAgICAgICAgICAgcmVsYXRpdmVEYXRlID0gY2FsZW5kYXJVdGlscy5nZXRSZWxhdGl2ZURhdGUoeWVhciwgbW9udGgsIDAsIG5EYXRlKTtcblx0ICAgICAgICAgICAgbkRhdGUueWVhciA9IHJlbGF0aXZlRGF0ZS55ZWFyO1xuXHQgICAgICAgICAgICBuRGF0ZS5tb250aCA9IHJlbGF0aXZlRGF0ZS5tb250aDtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBuRGF0ZS55ZWFyID0geWVhciB8fCBuRGF0ZS55ZWFyO1xuXHQgICAgICAgICAgICBuRGF0ZS5tb250aCA9IG1vbnRoIHx8IG5EYXRlLm1vbnRoO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgcmV0dXJuIG5EYXRlO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEp1ZGdlIHRvIHJlZHJhdyBjYWxlbmRhclxuXHQgICAgICogQHBhcmFtIHtudW1iZXJ9IHllYXIgQSB5ZWFyXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gbW9udGggQSBtb250aFxuXHQgICAgICogQHJldHVybnMge2Jvb2xlYW59IHJlZmxvd1xuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXHQgICAgX2lzTmVjZXNzYXJ5Rm9yRHJhd2luZzogZnVuY3Rpb24oeWVhciwgbW9udGgpIHtcblx0ICAgICAgICB2YXIgc2hvd25EYXRlID0gdGhpcy5fc2hvd25EYXRlO1xuXHRcblx0ICAgICAgICByZXR1cm4gKHNob3duRGF0ZS55ZWFyICE9PSB5ZWFyIHx8IHNob3duRGF0ZS5tb250aCAhPT0gbW9udGgpO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIERyYXcgY2FsZW5kYXIgdGV4dFxuXHQgICAgICogQHBhcmFtIHt7eWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyfX0gZGF0ZUZvckRyYXdpbmcgVGhhIGhhc2ggdGhhdCBzaG93IHVwIG9uIGNhbGVuZGFyXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfc2V0Q2FsZW5kYXJUZXh0OiBmdW5jdGlvbihkYXRlRm9yRHJhd2luZykge1xuXHQgICAgICAgIHZhciB5ZWFyID0gZGF0ZUZvckRyYXdpbmcueWVhcixcblx0ICAgICAgICAgICAgbW9udGggPSBkYXRlRm9yRHJhd2luZy5tb250aDtcblx0XG5cdCAgICAgICAgdGhpcy5fc2V0Q2FsZW5kYXJUb2RheSgpO1xuXHQgICAgICAgIHRoaXMuX3NldENhbGVuZGFyVGl0bGUoeWVhciwgbW9udGgpO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIERyYXcgZGF0ZXMgYnkgbW9udGguXG5cdCAgICAgKiBAcGFyYW0ge3t5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXJ9fSBkYXRlRm9yRHJhd2luZyBBIGRhdGUgdG8gZHJhd1xuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzUHJlZml4IEEgY2xhc3MgcHJlZml4XG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfZHJhd0RhdGVzOiBmdW5jdGlvbihkYXRlRm9yRHJhd2luZywgY2xhc3NQcmVmaXgpIHtcblx0ICAgICAgICB2YXIgeWVhciA9IGRhdGVGb3JEcmF3aW5nLnllYXIsXG5cdCAgICAgICAgICAgIG1vbnRoID0gZGF0ZUZvckRyYXdpbmcubW9udGgsXG5cdCAgICAgICAgICAgIGRheUluV2VlayA9IDAsXG5cdCAgICAgICAgICAgIGRhdGVQcmV2TW9udGggPSBjYWxlbmRhclV0aWxzLmdldFJlbGF0aXZlRGF0ZSgwLCAtMSwgMCwgZGF0ZUZvckRyYXdpbmcpLFxuXHQgICAgICAgICAgICBkYXRlTmV4dE1vbnRoID0gY2FsZW5kYXJVdGlscy5nZXRSZWxhdGl2ZURhdGUoMCwgMSwgMCwgZGF0ZUZvckRyYXdpbmcpLFxuXHQgICAgICAgICAgICBkYXRlcyA9IFtdLFxuXHQgICAgICAgICAgICBmaXJzdERheSA9IGNhbGVuZGFyVXRpbHMuZ2V0Rmlyc3REYXkoeWVhciwgbW9udGgpLFxuXHQgICAgICAgICAgICBpbmRleE9mTGFzdERhdGUgPSB0aGlzLl9maWxsRGF0ZXMoeWVhciwgbW9udGgsIGRhdGVzKTtcblx0XG5cdCAgICAgICAgdXRpbC5mb3JFYWNoKGRhdGVzLCBmdW5jdGlvbihkYXRlLCBpKSB7XG5cdCAgICAgICAgICAgIHZhciBpc1ByZXZNb250aCA9IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgaXNOZXh0TW9udGggPSBmYWxzZSxcblx0ICAgICAgICAgICAgICAgICRkYXRlQ29udGFpbmVyID0gJCh0aGlzLl8kZGF0ZUNvbnRhaW5lckVsZW1lbnRbaV0pLFxuXHQgICAgICAgICAgICAgICAgdGVtcFllYXIgPSB5ZWFyLFxuXHQgICAgICAgICAgICAgICAgdGVtcE1vbnRoID0gbW9udGgsXG5cdCAgICAgICAgICAgICAgICBldmVudERhdGE7XG5cdFxuXHQgICAgICAgICAgICBpZiAoaSA8IGZpcnN0RGF5KSB7XG5cdCAgICAgICAgICAgICAgICBpc1ByZXZNb250aCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAkZGF0ZUNvbnRhaW5lci5hZGRDbGFzcyhjbGFzc1ByZWZpeCArIENPTlNUQU5UUy5wcmV2TW9udGgpO1xuXHQgICAgICAgICAgICAgICAgdGVtcFllYXIgPSBkYXRlUHJldk1vbnRoLnllYXI7XG5cdCAgICAgICAgICAgICAgICB0ZW1wTW9udGggPSBkYXRlUHJldk1vbnRoLm1vbnRoO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPiBpbmRleE9mTGFzdERhdGUpIHtcblx0ICAgICAgICAgICAgICAgIGlzTmV4dE1vbnRoID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICRkYXRlQ29udGFpbmVyLmFkZENsYXNzKGNsYXNzUHJlZml4ICsgQ09OU1RBTlRTLm5leHRNb250aCk7XG5cdCAgICAgICAgICAgICAgICB0ZW1wWWVhciA9IGRhdGVOZXh0TW9udGgueWVhcjtcblx0ICAgICAgICAgICAgICAgIHRlbXBNb250aCA9IGRhdGVOZXh0TW9udGgubW9udGg7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIC8vIFdlZWtlbmRcblx0ICAgICAgICAgICAgdGhpcy5fc2V0V2Vla2VuZChkYXlJbldlZWssICRkYXRlQ29udGFpbmVyLCBjbGFzc1ByZWZpeCk7XG5cdFxuXHQgICAgICAgICAgICAvLyBUb2RheVxuXHQgICAgICAgICAgICBpZiAodGhpcy5faXNUb2RheSh0ZW1wWWVhciwgdGVtcE1vbnRoLCBkYXRlKSkge1xuXHQgICAgICAgICAgICAgICAgJGRhdGVDb250YWluZXIuYWRkQ2xhc3MoY2xhc3NQcmVmaXggKyAndG9kYXknKTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgZXZlbnREYXRhID0ge1xuXHQgICAgICAgICAgICAgICAgJGRhdGU6ICQodGhpcy5fJGRhdGVFbGVtZW50LmdldChpKSksXG5cdCAgICAgICAgICAgICAgICAkZGF0ZUNvbnRhaW5lcjogJGRhdGVDb250YWluZXIsXG5cdCAgICAgICAgICAgICAgICB5ZWFyOiB0ZW1wWWVhcixcblx0ICAgICAgICAgICAgICAgIG1vbnRoOiB0ZW1wTW9udGgsXG5cdCAgICAgICAgICAgICAgICBkYXRlOiBkYXRlLFxuXHQgICAgICAgICAgICAgICAgaXNQcmV2TW9udGg6IGlzUHJldk1vbnRoLFxuXHQgICAgICAgICAgICAgICAgaXNOZXh0TW9udGg6IGlzTmV4dE1vbnRoLFxuXHQgICAgICAgICAgICAgICAgaHRtbDogZGF0ZVxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAkKGV2ZW50RGF0YS4kZGF0ZSkuaHRtbChldmVudERhdGEuaHRtbC50b1N0cmluZygpKTtcblx0ICAgICAgICAgICAgZGF5SW5XZWVrID0gKGRheUluV2VlayArIDEpICUgNztcblx0XG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBGaXJlIGRyYXcgZXZlbnQgd2hlbiBjYWxlbmRhciBkcmF3IGVhY2ggZGF0ZS5cblx0ICAgICAgICAgICAgICogQGFwaVxuXHQgICAgICAgICAgICAgKiBAZXZlbnQgQ2FsZW5kYXIjZHJhd1xuXHQgICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBBIG5hbWUgb2YgY3VzdG9tIGV2ZW50XG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNQcmV2TW9udGggV2hldGhlciB0aGUgZHJhdyBkYXkgaXMgbGFzdCBtb250aCBvciBub3Rcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBpc05leHRNb250aCBXZWh0ZXIgdGhlIGRyYXcgZGF5IGlzIG5leHQgbW9udGggb3Igbm90XG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkZGF0ZSBUaGUgZWxlbWVudCBoYXZlIGRhdGUgaHRtbFxuXHQgICAgICAgICAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJGRhdGVDb250YWluZXIgQ2hpbGQgZWxlbWVudCB0aGF0IGhhcyBjbGFzc05hbWUgW3ByZWZpeF13ZWVrLlxuXHQgICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSXQgaXMgcG9zc2libGUgdGhpcyBlbGVtZW50IGVxdWVsIGVsRGF0ZS5cblx0ICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGRhdGUgQSBkcmF3IGRhdGVcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG1vbnRoIEEgZHJhdyBtb250aFxuXHQgICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0geWVhciBBIGRyYXcgeWVhclxuXHQgICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaHRtbCBBIGh0bWwgc3RyaW5nXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqIC8vIGRyYXcgY3VzdG9tIGV2ZW4gaGFuZGxlcnNcblx0ICAgICAgICAgICAgICogY2FsZW5kYXIub24oJ2RyYXcnLCBmdW5jdGlvbihkcmF3RXZlbnQpeyAuLi4gfSk7XG5cdCAgICAgICAgICAgICAqKi9cblx0ICAgICAgICAgICAgdGhpcy5maXJlKCdkcmF3JywgZXZlbnREYXRhKTtcblx0ICAgICAgICB9LCB0aGlzKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBKZWRnZSB0aGUgaW5wdXQgZGF0ZSBpcyB0b2RheS5cblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5ZWFyIEEgeWVhclxuXHQgICAgICogQHBhcmFtIHtudW1iZXJ9IG1vbnRoIEEgbW9udGhcblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkYXRlIEEgZGF0ZVxuXHQgICAgICogQHJldHVybnMge2Jvb2xlYW59XG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfaXNUb2RheTogZnVuY3Rpb24oeWVhciwgbW9udGgsIGRhdGUpIHtcblx0ICAgICAgICB2YXIgdG9kYXkgPSBjYWxlbmRhclV0aWxzLmdldERhdGVIYXNoKCk7XG5cdCAgICAgICAgdmFyIGlzWWVhciA9IHllYXIgPyAodG9kYXkueWVhciA9PT0geWVhcikgOiB0cnVlO1xuXHQgICAgICAgIHZhciBpc01vbnRoID0gbW9udGggPyAodG9kYXkubW9udGggPT09IG1vbnRoKSA6IHRydWU7XG5cdCAgICAgICAgdmFyIGlzRGF0ZSA9IGRhdGUgPyAodG9kYXkuZGF0ZSA9PT0gZGF0ZSkgOiB0cnVlO1xuXHRcblx0ICAgICAgICByZXR1cm4gaXNZZWFyICYmIGlzTW9udGggJiYgaXNEYXRlO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIE1ha2Ugb25lIHdlZWsgdGVtcGF0ZS5cblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5ZWFyICBBIHllYXJcblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtb250aCBBIG1vbnRoXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfc2V0V2Vla3M6IGZ1bmN0aW9uKHllYXIsIG1vbnRoKSB7XG5cdCAgICAgICAgdmFyICRlbFdlZWssXG5cdCAgICAgICAgICAgIHdlZWtzID0gY2FsZW5kYXJVdGlscy5nZXRXZWVrcyh5ZWFyLCBtb250aCksXG5cdCAgICAgICAgICAgIGk7XG5cdCAgICAgICAgZm9yIChpID0gMDsgaSA8IHdlZWtzOyBpICs9IDEpIHtcblx0ICAgICAgICAgICAgJGVsV2VlayA9IHRoaXMuJHdlZWtUZW1wbGF0ZS5jbG9uZSh0cnVlKTtcblx0ICAgICAgICAgICAgJGVsV2Vlay5hcHBlbmRUbyh0aGlzLiR3ZWVrQXBwZW5kVGFyZ2V0KTtcblx0ICAgICAgICAgICAgdGhpcy5fd2Vla0VsZW1lbnRzLnB1c2goJGVsV2Vlayk7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIFNhdmUgZHJhdyBkYXRlcyB0byBhcnJheVxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IHllYXIgQSBkcmF3IHllYXJcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb250aCBBIGRyYXcgbW9udGhcblx0ICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGVzIEEgZHJhdyBkYXRlXG5cdCAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBpbmRleCBvZiBsYXN0IGRhdGVcblx0ICAgICAqIEBwcml2YXRlXG5cdCAgICAgKi9cblx0ICAgIF9maWxsRGF0ZXM6IGZ1bmN0aW9uKHllYXIsIG1vbnRoLCBkYXRlcykge1xuXHQgICAgICAgIHZhciBmaXJzdERheSA9IGNhbGVuZGFyVXRpbHMuZ2V0Rmlyc3REYXkoeWVhciwgbW9udGgpLFxuXHQgICAgICAgICAgICBsYXN0RGF5ID0gY2FsZW5kYXJVdGlscy5nZXRMYXN0RGF5KHllYXIsIG1vbnRoKSxcblx0ICAgICAgICAgICAgbGFzdERhdGUgPSBjYWxlbmRhclV0aWxzLmdldExhc3REYXRlKHllYXIsIG1vbnRoKSxcblx0ICAgICAgICAgICAgZGF0ZVByZXZNb250aCA9IGNhbGVuZGFyVXRpbHMuZ2V0UmVsYXRpdmVEYXRlKDAsIC0xLCAwLCB7XG5cdCAgICAgICAgICAgICAgICB5ZWFyOiB5ZWFyLFxuXHQgICAgICAgICAgICAgICAgbW9udGg6IG1vbnRoLFxuXHQgICAgICAgICAgICAgICAgZGF0ZTogMVxuXHQgICAgICAgICAgICB9KSxcblx0ICAgICAgICAgICAgcHJldk1vbnRoTGFzdERhdGUgPSBjYWxlbmRhclV0aWxzLmdldExhc3REYXRlKGRhdGVQcmV2TW9udGgueWVhciwgZGF0ZVByZXZNb250aC5tb250aCksXG5cdCAgICAgICAgICAgIGluZGV4T2ZMYXN0RGF0ZSxcblx0ICAgICAgICAgICAgaTtcblx0XG5cdCAgICAgICAgaWYgKGZpcnN0RGF5ID4gMCkge1xuXHQgICAgICAgICAgICBmb3IgKGkgPSBwcmV2TW9udGhMYXN0RGF0ZSAtIGZpcnN0RGF5OyBpIDwgcHJldk1vbnRoTGFzdERhdGU7IGkgKz0gMSkge1xuXHQgICAgICAgICAgICAgICAgZGF0ZXMucHVzaChpICsgMSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZm9yIChpID0gMTsgaSA8IGxhc3REYXRlICsgMTsgaSArPSAxKSB7XG5cdCAgICAgICAgICAgIGRhdGVzLnB1c2goaSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGluZGV4T2ZMYXN0RGF0ZSA9IGRhdGVzLmxlbmd0aCAtIDE7XG5cdCAgICAgICAgZm9yIChpID0gMTsgaSA8IDcgLSBsYXN0RGF5OyBpICs9IDEpIHtcblx0ICAgICAgICAgICAgZGF0ZXMucHVzaChpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBpbmRleE9mTGFzdERhdGU7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogU2V0IHdlZWtlbmRcblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkYXkgQSBkYXRlXG5cdCAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJGRhdGVDb250YWluZXIgQSBjb250YWluZXIgZWxlbWVudCBmb3IgZGF0ZVxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzUHJlZml4IEEgcHJlZml4IG9mIGNsYXNzXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfc2V0V2Vla2VuZDogZnVuY3Rpb24oZGF5LCAkZGF0ZUNvbnRhaW5lciwgY2xhc3NQcmVmaXgpIHtcblx0ICAgICAgICBpZiAoZGF5ID09PSAwKSB7XG5cdCAgICAgICAgICAgICRkYXRlQ29udGFpbmVyLmFkZENsYXNzKGNsYXNzUHJlZml4ICsgJ3N1bicpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoZGF5ID09PSA2KSB7XG5cdCAgICAgICAgICAgICRkYXRlQ29udGFpbmVyLmFkZENsYXNzKGNsYXNzUHJlZml4ICsgJ3NhdCcpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBDbGVhciBjYWxlbmRhclxuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXHQgICAgX2NsZWFyOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB0aGlzLl93ZWVrRWxlbWVudHMgPSBbXTtcblx0ICAgICAgICB0aGlzLiR3ZWVrQXBwZW5kVGFyZ2V0LmVtcHR5KCk7XG5cdCAgICAgICAgdGhpcy5kYXRhT2ZNb250aExheWVyLmFwcGVuZGVkVGFyZ2V0LmVtcHR5KCk7XG5cdCAgICAgICAgdGhpcy5kYXRhT2ZZZWFyTGF5ZXIuYXBwZW5kZWRUYXJnZXQuZW1wdHkoKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBEcmF3IHRpdGxlIHdpdGggZm9ybWF0IG9wdGlvbi5cblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5ZWFyIEEgdmFsdWUgb2YgeWVhciAoZXguIDIwMDgpXG5cdCAgICAgKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKX0gbW9udGggQSBtb250aCAoMSB+IDEyKVxuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqKi9cblx0ICAgIF9zZXRDYWxlbmRhclRpdGxlOiBmdW5jdGlvbih5ZWFyLCBtb250aCkge1xuXHQgICAgICAgIHZhciBvcHRpb24gPSB0aGlzLl9vcHRpb24sXG5cdCAgICAgICAgICAgIHRpdGxlRm9ybWF0ID0gb3B0aW9uLnRpdGxlRm9ybWF0LFxuXHQgICAgICAgICAgICByZXBsYWNlTWFwLFxuXHQgICAgICAgICAgICByZWc7XG5cdFxuXHQgICAgICAgIG1vbnRoID0gY2FsZW5kYXJVdGlscy5wcmVwZW5kTGVhZGluZ1plcm8obW9udGgpO1xuXHQgICAgICAgIHJlcGxhY2VNYXAgPSB0aGlzLl9nZXRSZXBsYWNlTWFwKHllYXIsIG1vbnRoKTtcblx0XG5cdCAgICAgICAgcmVnID0gQ09OU1RBTlRTLnRpdGxlUmVnRXhwO1xuXHQgICAgICAgIHRoaXMuX3NldERhdGVUZXh0SW5DYWxlbmRhcih0aGlzLiR0aXRsZSwgdGl0bGVGb3JtYXQsIHJlcGxhY2VNYXAsIHJlZyk7XG5cdFxuXHQgICAgICAgIHJlZyA9IENPTlNUQU5UUy50aXRsZVllYXJSZWdFeHA7XG5cdCAgICAgICAgdGhpcy5fc2V0RGF0ZVRleHRJbkNhbGVuZGFyKHRoaXMuJHRpdGxlWWVhciwgb3B0aW9uLnllYXJUaXRsZUZvcm1hdCwgcmVwbGFjZU1hcCwgcmVnKTtcblx0XG5cdCAgICAgICAgcmVnID0gQ09OU1RBTlRTLnRpdGxlTW9udGhSZWdFeHA7XG5cdCAgICAgICAgdGhpcy5fc2V0RGF0ZVRleHRJbkNhbGVuZGFyKHRoaXMuJHRpdGxlTW9udGgsIG9wdGlvbi5tb250aFRpdGxlRm9ybWF0LCByZXBsYWNlTWFwLCByZWcpO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIFVwZGF0ZSB0aXRsZVxuXHQgICAgICogQHBhcmFtIHtqUXVlcnl8SFRNTEVsZW1lbnR9IGVsZW1lbnQgQSB1cGRhdGUgZWxlbWVudFxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGZvcm0gQSB1cGRhdGUgZm9ybVxuXHQgICAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBBIG9iamVjdCB0aGF0IGhhcyB2YWx1ZSBtYXRjaGVkIHJlZ0V4cFxuXHQgICAgICogQHBhcmFtIHtSZWdFeHB9IHJlZyBBIHJlZ0V4cCB0byBjaGFnbmUgZm9ybVxuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXHQgICAgX3NldERhdGVUZXh0SW5DYWxlbmRhcjogZnVuY3Rpb24oZWxlbWVudCwgZm9ybSwgbWFwLCByZWcpIHtcblx0ICAgICAgICB2YXIgdGl0bGUsXG5cdCAgICAgICAgICAgICRlbCA9ICQoZWxlbWVudCk7XG5cdFxuXHQgICAgICAgIGlmICghJGVsLmxlbmd0aCkge1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRpdGxlID0gY2FsZW5kYXJVdGlscy5nZXRDb252ZXJ0ZWRUaXRsZShmb3JtLCBtYXAsIHJlZyk7XG5cdCAgICAgICAgJGVsLnRleHQodGl0bGUpO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEdldCBtYXAgZGF0YSBmb3IgZm9ybVxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB5ZWFyIEEgeWVhclxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBtb250aCBBIG1vbnRoXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IFtkYXRlXSBBIGRheVxuXHQgICAgICogQHJldHVybnMge09iamVjdH0gUmVwbGFjZU1hcFxuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXHQgICAgX2dldFJlcGxhY2VNYXA6IGZ1bmN0aW9uKHllYXIsIG1vbnRoLCBkYXRlKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbiA9IHRoaXMuX29wdGlvbixcblx0ICAgICAgICAgICAgeWVhclN1YiA9ICh5ZWFyLnRvU3RyaW5nKCkpLnN1YnN0cigyLCAyKSxcblx0ICAgICAgICAgICAgbW9udGhMYWJlbCA9IG9wdGlvbi5tb250aFRpdGxlc1ttb250aCAtIDFdLFxuXHQgICAgICAgICAgICBsYWJlbEtleSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoIC0gMSwgZGF0ZSB8fCAxKS5nZXREYXkoKSxcblx0ICAgICAgICAgICAgZGF5TGFiZWwgPSBvcHRpb24uZGF5VGl0bGVzW2xhYmVsS2V5XTtcblx0XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgeXl5eTogeWVhcixcblx0ICAgICAgICAgICAgeXk6IHllYXJTdWIsXG5cdCAgICAgICAgICAgIG1tOiBtb250aCxcblx0ICAgICAgICAgICAgbTogTnVtYmVyKG1vbnRoKSxcblx0ICAgICAgICAgICAgTTogbW9udGhMYWJlbCxcblx0ICAgICAgICAgICAgZGQ6IGRhdGUsXG5cdCAgICAgICAgICAgIGQ6IE51bWJlcihkYXRlKSxcblx0ICAgICAgICAgICAgRDogZGF5TGFiZWxcblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIFNldCB0b2RheVxuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXHQgICAgX3NldENhbGVuZGFyVG9kYXk6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciAkdG9kYXkgPSB0aGlzLiR0b2RheSxcblx0ICAgICAgICAgICAgdG9kYXlGb3JtYXQsXG5cdCAgICAgICAgICAgIHRvZGF5LFxuXHQgICAgICAgICAgICB5ZWFyLFxuXHQgICAgICAgICAgICBtb250aCxcblx0ICAgICAgICAgICAgZGF0ZSxcblx0ICAgICAgICAgICAgcmVwbGFjZU1hcCxcblx0ICAgICAgICAgICAgcmVnO1xuXHRcblx0ICAgICAgICBpZiAoISR0b2RheS5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgdG9kYXkgPSBjYWxlbmRhclV0aWxzLmdldERhdGVIYXNoKCk7XG5cdCAgICAgICAgeWVhciA9IHRvZGF5LnllYXI7XG5cdCAgICAgICAgbW9udGggPSBjYWxlbmRhclV0aWxzLnByZXBlbmRMZWFkaW5nWmVybyh0b2RheS5tb250aCk7XG5cdCAgICAgICAgZGF0ZSA9IGNhbGVuZGFyVXRpbHMucHJlcGVuZExlYWRpbmdaZXJvKHRvZGF5LmRhdGUpO1xuXHQgICAgICAgIHRvZGF5Rm9ybWF0ID0gdGhpcy5fb3B0aW9uLnRvZGF5Rm9ybWF0O1xuXHQgICAgICAgIHJlcGxhY2VNYXAgPSB0aGlzLl9nZXRSZXBsYWNlTWFwKHllYXIsIG1vbnRoLCBkYXRlKTtcblx0ICAgICAgICByZWcgPSBDT05TVEFOVFMudG9kYXlSZWdFeHA7XG5cdCAgICAgICAgdGhpcy5fc2V0RGF0ZVRleHRJbkNhbGVuZGFyKCR0b2RheSwgdG9kYXlGb3JtYXQsIHJlcGxhY2VNYXAsIHJlZyk7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogU2V0IHRpdGxlIG9uIHllYXIncyBsYXllclxuXHQgICAgICogQHBhcmFtIHtudW1iZXJ9IHllYXIgLSBZZWFyXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfc2V0VGl0bGVPblllYXJMYXllcjogZnVuY3Rpb24oeWVhcikge1xuXHQgICAgICAgIHZhciBpdGVtQ291bnRPZlllYXIgPSB0aGlzLl9nZXRJbmZvT2ZZZWFyUmFuZ2UoeWVhcik7XG5cdCAgICAgICAgdmFyIHN0YXJ0WWVhclRleHQgPSB0aGlzLl9nZXRDb252ZXJ0ZWRZZWFyVGl0bGUoaXRlbUNvdW50T2ZZZWFyLnN0YXJ0WWVhcik7XG5cdCAgICAgICAgdmFyIGVuZFllYXJUZXh0ID0gdGhpcy5fZ2V0Q29udmVydGVkWWVhclRpdGxlKGl0ZW1Db3VudE9mWWVhci5lbmRZZWFyKTtcblx0ICAgICAgICB2YXIgdGl0bGUgPSBzdGFydFllYXJUZXh0ICsgJyAtICcgKyBlbmRZZWFyVGV4dDtcblx0XG5cdCAgICAgICAgdGhpcy4kdGl0bGUudGV4dCh0aXRsZSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogU2V0IGNsYXNzIG5hbWUgb24gdGl0bGVcblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaG93bkxheWVySWR4IC0gWWVhclxuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXHQgICAgX3NldENsYXNzTmFtZU9uVGl0bGU6IGZ1bmN0aW9uKHNob3duTGF5ZXJJZHgpIHtcblx0ICAgICAgICB2YXIgY2xhc3NOYW1lID0gdGhpcy5fb3B0aW9uLmNsYXNzUHJlZml4ICsgQ09OU1RBTlRTLmNsaWNrYWJsZTtcblx0XG5cdCAgICAgICAgaWYgKCF0aGlzLmlzQ2xpY2thYmxlVGl0bGUpIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKHNob3duTGF5ZXJJZHggIT09IDIpIHtcblx0ICAgICAgICAgICAgdGhpcy4kdGl0bGUuYWRkQ2xhc3MoY2xhc3NOYW1lKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLiR0aXRsZS5yZW1vdmVDbGFzcyhjbGFzc05hbWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBHZXQgY29udmVydGVkIHllYXIgdGV4dCBvbiB5ZWFyIGFuZCBtb250aCBsYXllclxuXHQgICAgICogQHBhcmFtIHtudW1iZXJ9IHllYXIgLSBZZWFyXG5cdCAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBDb252ZXJ0ZWQgeWVhciB0ZXh0XG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfZ2V0Q29udmVydGVkWWVhclRpdGxlOiBmdW5jdGlvbih5ZWFyKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbiA9IHRoaXMuX29wdGlvbjtcblx0ICAgICAgICB2YXIgcmVwbGFjZU1hcCwgcmVnO1xuXHRcblx0ICAgICAgICByZXBsYWNlTWFwID0gdGhpcy5fZ2V0UmVwbGFjZU1hcCh5ZWFyKTtcblx0ICAgICAgICByZWcgPSBDT05TVEFOVFMudGl0bGVZZWFyUmVnRXhwO1xuXHRcblx0ICAgICAgICByZXR1cm4gY2FsZW5kYXJVdGlscy5nZXRDb252ZXJ0ZWRUaXRsZShvcHRpb24ueWVhclRpdGxlRm9ybWF0LCByZXBsYWNlTWFwLCByZWcpO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEdldCB5ZWFycyBpbmZvIGJ5IFwiaXRlbUNvdW50T2ZZZWFyXCIgb3B0aW9uXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0geWVhciAtIFllYXJcblx0ICAgICAqIEByZXR1cm5zIHtPYmplY3R9IEluZm8gb2YgeWVhcidzIHJhbmdlXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfZ2V0SW5mb09mWWVhclJhbmdlOiBmdW5jdGlvbih5ZWFyKSB7XG5cdCAgICAgICAgdmFyIGZyYW1lSW5mbyA9IHRoaXMuZGF0YU9mWWVhckxheWVyLmZyYW1lO1xuXHQgICAgICAgIHZhciBjb2xzID0gZnJhbWVJbmZvLmNvbHM7XG5cdCAgICAgICAgdmFyIHJvd3MgPSBmcmFtZUluZm8ucm93cztcblx0ICAgICAgICB2YXIgYmFzZUlkeCA9IChjb2xzICogTWF0aC5mbG9vcihyb3dzIC8gMikpICsgTWF0aC5mbG9vcihjb2xzIC8gMik7XG5cdCAgICAgICAgdmFyIHN0YXJ0WWVhciA9IHllYXIgLSBiYXNlSWR4O1xuXHQgICAgICAgIHZhciBlbmRZZWFyID0gc3RhcnRZZWFyICsgKGNvbHMgKiByb3dzKSAtIDE7XG5cdFxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHN0YXJ0WWVhcjogc3RhcnRZZWFyLFxuXHQgICAgICAgICAgICBlbmRZZWFyOiBlbmRZZWFyXG5cdCAgICAgICAgfTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBHZXQgaW5kZXggb2YgY3VycmVudCBzaG93biBsYXllciBieSBsYXllcidzIHR5cGVcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gdHlwZSAtIFR5cGUgb2YgbGF5ZXJcblx0ICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IEluZGV4IG9mIHNob3duIGxheWVyXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfZ2V0SW5kZXhPZlNob3duTGF5ZXI6IGZ1bmN0aW9uKHR5cGUpIHtcblx0ICAgICAgICByZXR1cm4gKHR5cGUgPyB1dGlsLmluQXJyYXkodHlwZSwgQ09OU1RBTlRTLmxheWVyS2V5cykgOiB0aGlzLnNob3duTGF5ZXJJZHgpO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIERyYXcgaGVhZGVyIGVsZW1lbnRcblx0ICAgICAqIEBwYXJhbSB7e3llYXI6IG51bWJlciwgbW9udGg6IG51bWJlcn19IGRhdGVGb3JEcmF3aW5nIC0gVGhlIGhhc2ggdGhhdCBzaG93IHVwIG9uIGNhbGVuZGFyXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gc2hvd25MYXllcklkeCAtIEluZGV4IG9mIHNob3duIGxheWVyXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfZHJhd0hlYWRlcjogZnVuY3Rpb24oZGF0ZUZvckRyYXdpbmcsIHNob3duTGF5ZXJJZHgpIHtcblx0ICAgICAgICB2YXIgY2xhc3NTZWxlY3RvciA9ICcuJyArIHRoaXMuX29wdGlvbi5jbGFzc1ByZWZpeCArICdidG4tJztcblx0ICAgICAgICB2YXIgcHJldkJ0biA9IHRoaXMuJGhlYWRlci5maW5kKGNsYXNzU2VsZWN0b3IgKyBDT05TVEFOVFMucHJldik7XG5cdCAgICAgICAgdmFyIG5leHRCdG4gPSB0aGlzLiRoZWFkZXIuZmluZChjbGFzc1NlbGVjdG9yICsgQ09OU1RBTlRTLm5leHQpO1xuXHQgICAgICAgIHZhciBrZXkgPSBDT05TVEFOVFMucmVsYXRpdmVNb250aFZhbHVlS2V5O1xuXHQgICAgICAgIHZhciBpdGVtQ291bnRPZlllYXIgPSB0aGlzLl9vcHRpb24uaXRlbUNvdW50T2ZZZWFyO1xuXHQgICAgICAgIHZhciBwcmV2VmFsdWUsIG5leHRWYWx1ZTtcblx0XG5cdCAgICAgICAgdGhpcy5fc2V0Q2xhc3NOYW1lT25UaXRsZShzaG93bkxheWVySWR4KTtcblx0XG5cdCAgICAgICAgc3dpdGNoIChzaG93bkxheWVySWR4KSB7XG5cdCAgICAgICAgICAgIGNhc2UgMDpcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3NldENhbGVuZGFyVGV4dChkYXRlRm9yRHJhd2luZyk7XG5cdCAgICAgICAgICAgICAgICBwcmV2VmFsdWUgPSAtMTtcblx0ICAgICAgICAgICAgICAgIG5leHRWYWx1ZSA9IDE7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSAxOlxuXHQgICAgICAgICAgICAgICAgdGhpcy4kdGl0bGUudGV4dCh0aGlzLl9nZXRDb252ZXJ0ZWRZZWFyVGl0bGUoZGF0ZUZvckRyYXdpbmcueWVhcikpO1xuXHQgICAgICAgICAgICAgICAgcHJldlZhbHVlID0gLTEyO1xuXHQgICAgICAgICAgICAgICAgbmV4dFZhbHVlID0gMTI7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSAyOlxuXHQgICAgICAgICAgICAgICAgdGhpcy5fc2V0VGl0bGVPblllYXJMYXllcihkYXRlRm9yRHJhd2luZy55ZWFyKTtcblx0ICAgICAgICAgICAgICAgIHByZXZWYWx1ZSA9IC0xMiAqIGl0ZW1Db3VudE9mWWVhcjtcblx0ICAgICAgICAgICAgICAgIG5leHRWYWx1ZSA9IDEyICogaXRlbUNvdW50T2ZZZWFyO1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIGRlZmF1bHQ6IC8vIEB0b2RvIFdoeSBkb2VzIG5vdCB1c2UgJ3JldHVybicgYnV0ICdicmVhayc/XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHByZXZCdG4uZGF0YShrZXksIHByZXZWYWx1ZSk7XG5cdCAgICAgICAgbmV4dEJ0bi5kYXRhKGtleSwgbmV4dFZhbHVlKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBEcmF3IGJvZHkgZWxlbWVudHNcblx0ICAgICAqIEBwYXJhbSB7e3llYXI6IG51bWJlciwgbW9udGg6IG51bWJlcn19IGRhdGVGb3JEcmF3aW5nIC0gVGhlIGhhc2ggdGhhdCBzaG93IHVwIG9uIGNhbGVuZGFyXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gc2hvd25MYXllcklkeCAtIEluZGV4IG9mIHNob3duIGxheWVyXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfZHJhd0JvZHk6IGZ1bmN0aW9uKGRhdGVGb3JEcmF3aW5nLCBzaG93bkxheWVySWR4KSB7XG5cdCAgICAgICAgdmFyIHllYXIgPSBkYXRlRm9yRHJhd2luZy55ZWFyO1xuXHQgICAgICAgIHZhciBtb250aCA9IGRhdGVGb3JEcmF3aW5nLm1vbnRoO1xuXHQgICAgICAgIHZhciBjbGFzc1ByZWZpeCA9IHRoaXMuX29wdGlvbi5jbGFzc1ByZWZpeDtcblx0XG5cdCAgICAgICAgLy8gd2Vla3Ncblx0ICAgICAgICB0aGlzLl9zZXRXZWVrcyh5ZWFyLCBtb250aCk7XG5cdCAgICAgICAgdGhpcy5fJGRhdGVFbGVtZW50ID0gJCgnLicgKyBjbGFzc1ByZWZpeCArICdkYXRlJywgdGhpcy4kd2Vla0FwcGVuZFRhcmdldCk7XG5cdCAgICAgICAgdGhpcy5fJGRhdGVDb250YWluZXJFbGVtZW50ID0gJCgnLicgKyBjbGFzc1ByZWZpeCArICd3ZWVrID4gKicsIHRoaXMuJHdlZWtBcHBlbmRUYXJnZXQpO1xuXHRcblx0ICAgICAgICAvLyBkYXRlc1xuXHQgICAgICAgIHRoaXMuX2RyYXdEYXRlcyhkYXRlRm9yRHJhd2luZywgY2xhc3NQcmVmaXgpO1xuXHRcblx0ICAgICAgICAvLyBtb250aCBsYXllclxuXHQgICAgICAgIHRoaXMuX2RyYXdGcmFtZU9uTW9udGhMYXllcigpO1xuXHQgICAgICAgIHRoaXMuX2RyYXdCdXR0b25zT2ZNb250aChkYXRlRm9yRHJhd2luZywgY2xhc3NQcmVmaXgpO1xuXHRcblx0ICAgICAgICAvLyB5ZWFyIGxheWVyXG5cdCAgICAgICAgdGhpcy5fZHJhd0ZyYW1lT25ZZWFyTGF5ZXIoKTtcblx0ICAgICAgICB0aGlzLl9kcmF3QnV0dG9uc09mWWVhcihkYXRlRm9yRHJhd2luZywgY2xhc3NQcmVmaXgpO1xuXHRcblx0ICAgICAgICAvLyBzaG93IGxheWVyXG5cdCAgICAgICAgdGhpcy5fY2hhbmdlU2hvd25MYXllcihzaG93bkxheWVySWR4KTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBEcmF3IGZyYW1lIGNvbnRhaW5pbmcgYnV0dG9ucyBvbiBtb250aCdzIGxheWVyXG5cdCAgICAgKiBAcHJpdmF0ZVxuXHQgICAgICovXG5cdCAgICBfZHJhd0ZyYW1lT25Nb250aExheWVyOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgaSA9IDA7XG5cdCAgICAgICAgdmFyIHJvd3MgPSB0aGlzLmRhdGFPZk1vbnRoTGF5ZXIuZnJhbWUucm93cztcblx0ICAgICAgICB2YXIgZGF0YU9mTW9udGhMYXllciA9IHRoaXMuZGF0YU9mTW9udGhMYXllcjtcblx0ICAgICAgICB2YXIgJG1vbnRoR3JvdXBFbDtcblx0XG5cdCAgICAgICAgZm9yICg7IGkgPCByb3dzOyBpICs9IDEpIHtcblx0ICAgICAgICAgICAgJG1vbnRoR3JvdXBFbCA9IGRhdGFPZk1vbnRoTGF5ZXIudGVtcGxhdGUuY2xvbmUodHJ1ZSk7XG5cdCAgICAgICAgICAgICRtb250aEdyb3VwRWwuYXBwZW5kVG8oZGF0YU9mTW9udGhMYXllci5hcHBlbmRlZFRhcmdldCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIERyYXcgc2VsZWN0YWJsZSBidXR0b25zIG9uIG1vbnRoJ3MgbGF5ZXJcblx0ICAgICAqIEBwYXJhbSB7e3llYXI6IG51bWJlciwgbW9udGg6IG51bWJlcn19IGRhdGVGb3JEcmF3aW5nIC0gVGhlIGhhc2ggdGhhdCBzaG93IHVwIG9uIGNhbGVuZGFyXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NQcmVmaXggLSBBIGNsYXNzIHByZWZpeFxuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXHQgICAgX2RyYXdCdXR0b25zT2ZNb250aDogZnVuY3Rpb24oZGF0ZUZvckRyYXdpbmcsIGNsYXNzUHJlZml4KSB7XG5cdCAgICAgICAgdmFyIGtleSA9IENPTlNUQU5UUy5yZWxhdGl2ZU1vbnRoVmFsdWVLZXk7XG5cdCAgICAgICAgdmFyIHNlbGVjdGVkTW9udGggPSBkYXRlRm9yRHJhd2luZy5tb250aDtcblx0ICAgICAgICB2YXIgbW9udGhUaXRsZXMgPSB0aGlzLl9vcHRpb24ubW9udGhUaXRsZXM7XG5cdCAgICAgICAgdmFyICRtb250aEVscyA9IHRoaXMuZGF0YU9mTW9udGhMYXllci5hcHBlbmRlZFRhcmdldC5maW5kKCcuJyArIGNsYXNzUHJlZml4ICsgJ21vbnRoJyk7XG5cdCAgICAgICAgdmFyICRidXR0b25FbCwgbW9udGgsIHJlbGF0aXZlTW9udGg7XG5cdCAgICAgICAgdmFyIGV2ZW50RGF0YTtcblx0XG5cdCAgICAgICAgdXRpbC5mb3JFYWNoKG1vbnRoVGl0bGVzLCBmdW5jdGlvbih0aXRsZSwgaWR4KSB7XG5cdCAgICAgICAgICAgICRidXR0b25FbCA9ICRtb250aEVscy5lcShpZHgpO1xuXHQgICAgICAgICAgICBtb250aCA9IGlkeCArIDE7XG5cdFxuXHQgICAgICAgICAgICBpZiAobW9udGggPT09IHNlbGVjdGVkTW9udGgpIHtcblx0ICAgICAgICAgICAgICAgICRidXR0b25FbC5hZGRDbGFzcyhjbGFzc1ByZWZpeCArIENPTlNUQU5UUy5zZWxlY3RlZCk7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9pc1RvZGF5KHRoaXMuX3Nob3duRGF0ZS55ZWFyLCBtb250aCkpIHtcblx0ICAgICAgICAgICAgICAgICRidXR0b25FbC5hZGRDbGFzcyhjbGFzc1ByZWZpeCArIENPTlNUQU5UUy50b2RheSk7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIHJlbGF0aXZlTW9udGggPSBtb250aCAtIHNlbGVjdGVkTW9udGg7XG5cdFxuXHQgICAgICAgICAgICAkYnV0dG9uRWwuZGF0YShrZXksIHJlbGF0aXZlTW9udGgpLmh0bWwodGl0bGUpO1xuXHRcblx0ICAgICAgICAgICAgZXZlbnREYXRhID0ge1xuXHQgICAgICAgICAgICAgICAgJGRhdGU6ICRidXR0b25FbCxcblx0ICAgICAgICAgICAgICAgICRkYXRlQ29udGFpbmVyOiAkYnV0dG9uRWwsXG5cdCAgICAgICAgICAgICAgICB5ZWFyOiBkYXRlRm9yRHJhd2luZy55ZWFyLFxuXHQgICAgICAgICAgICAgICAgbW9udGg6IG1vbnRoLFxuXHQgICAgICAgICAgICAgICAgZGF0ZTogMCxcblx0ICAgICAgICAgICAgICAgIGh0bWw6IHRpdGxlXG5cdCAgICAgICAgICAgIH07XG5cdFxuXHQgICAgICAgICAgICB0aGlzLmZpcmUoJ2RyYXcnLCBldmVudERhdGEpO1xuXHQgICAgICAgIH0sIHRoaXMpO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIERyYXcgZnJhbWUgY29udGFpbmluZyBidXR0b25zIG9uIHllYXIncyBsYXllclxuXHQgICAgICogQHByaXZhdGVcblx0ICAgICAqL1xuXHQgICAgX2RyYXdGcmFtZU9uWWVhckxheWVyOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgaSA9IDA7XG5cdCAgICAgICAgdmFyIHJvd3MgPSB0aGlzLmRhdGFPZk1vbnRoTGF5ZXIuZnJhbWUucm93cztcblx0ICAgICAgICB2YXIgZGF0YU9mWWVhckxheWVyID0gdGhpcy5kYXRhT2ZZZWFyTGF5ZXI7XG5cdCAgICAgICAgdmFyICR5ZWFyR3JvdXBFbDtcblx0XG5cdCAgICAgICAgZm9yICg7IGkgPCByb3dzOyBpICs9IDEpIHtcblx0ICAgICAgICAgICAgJHllYXJHcm91cEVsID0gZGF0YU9mWWVhckxheWVyLnRlbXBsYXRlLmNsb25lKHRydWUpO1xuXHQgICAgICAgICAgICAkeWVhckdyb3VwRWwuYXBwZW5kVG8oZGF0YU9mWWVhckxheWVyLmFwcGVuZGVkVGFyZ2V0KTtcblx0ICAgICAgICB9XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogRHJhdyBzZWxlY3RhYmxlIGJ1dHRvbnMgb24geWVhcidzIGxheWVyXG5cdCAgICAgKiBAcGFyYW0ge3t5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXJ9fSBkYXRlRm9yRHJhd2luZyAtIFRoZSBoYXNoIHRoYXQgc2hvdyB1cCBvbiBjYWxlbmRhclxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzUHJlZml4IC0gQSBjbGFzcyBwcmVmaXhcblx0ICAgICAqIEBwcml2YXRlXG5cdCAgICAgKi9cblx0ICAgIF9kcmF3QnV0dG9uc09mWWVhcjogZnVuY3Rpb24oZGF0ZUZvckRyYXdpbmcsIGNsYXNzUHJlZml4KSB7XG5cdCAgICAgICAgdmFyIGtleSA9IENPTlNUQU5UUy5yZWxhdGl2ZU1vbnRoVmFsdWVLZXk7XG5cdCAgICAgICAgdmFyIHllYXIgPSBkYXRlRm9yRHJhd2luZy55ZWFyO1xuXHQgICAgICAgIHZhciBpdGVtQ291bnRPZlllYXIgPSB0aGlzLl9nZXRJbmZvT2ZZZWFyUmFuZ2UoeWVhcik7XG5cdCAgICAgICAgdmFyIHN0YXJ0WWVhciA9IGl0ZW1Db3VudE9mWWVhci5zdGFydFllYXI7XG5cdCAgICAgICAgdmFyIGVuZFllYXIgPSBpdGVtQ291bnRPZlllYXIuZW5kWWVhcjtcblx0ICAgICAgICB2YXIgY250ID0gMDtcblx0ICAgICAgICB2YXIgJHllYXJFbHMgPSB0aGlzLmRhdGFPZlllYXJMYXllci5hcHBlbmRlZFRhcmdldC5maW5kKCcuJyArIGNsYXNzUHJlZml4ICsgJ3llYXInKTtcblx0ICAgICAgICB2YXIgJGJ1dHRvbkVsLCByZWxhdGl2ZU1vbnRoO1xuXHQgICAgICAgIHZhciBldmVudERhdGE7XG5cdFxuXHQgICAgICAgIGZvciAoOyBzdGFydFllYXIgPD0gZW5kWWVhcjsgc3RhcnRZZWFyICs9IDEpIHtcblx0ICAgICAgICAgICAgJGJ1dHRvbkVsID0gJHllYXJFbHMuZXEoY250KTtcblx0XG5cdCAgICAgICAgICAgIGlmIChzdGFydFllYXIgPT09IHllYXIpIHtcblx0ICAgICAgICAgICAgICAgICRidXR0b25FbC5hZGRDbGFzcyhjbGFzc1ByZWZpeCArIENPTlNUQU5UUy5zZWxlY3RlZCk7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9pc1RvZGF5KHN0YXJ0WWVhcikpIHtcblx0ICAgICAgICAgICAgICAgICRidXR0b25FbC5hZGRDbGFzcyhjbGFzc1ByZWZpeCArIENPTlNUQU5UUy50b2RheSk7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIHJlbGF0aXZlTW9udGggPSAoc3RhcnRZZWFyIC0geWVhcikgKiAxMjtcblx0XG5cdCAgICAgICAgICAgICRidXR0b25FbC5kYXRhKGtleSwgcmVsYXRpdmVNb250aCkuaHRtbChzdGFydFllYXIpO1xuXHRcblx0ICAgICAgICAgICAgY250ICs9IDE7XG5cdFxuXHQgICAgICAgICAgICBldmVudERhdGEgPSB7XG5cdCAgICAgICAgICAgICAgICAkZGF0ZTogJGJ1dHRvbkVsLFxuXHQgICAgICAgICAgICAgICAgJGRhdGVDb250YWluZXI6ICRidXR0b25FbCxcblx0ICAgICAgICAgICAgICAgIHllYXI6IHN0YXJ0WWVhcixcblx0ICAgICAgICAgICAgICAgIG1vbnRoOiAwLFxuXHQgICAgICAgICAgICAgICAgZGF0ZTogMCxcblx0ICAgICAgICAgICAgICAgIGh0bWw6IHN0YXJ0WWVhclxuXHQgICAgICAgICAgICB9O1xuXHRcblx0ICAgICAgICAgICAgdGhpcy5maXJlKCdkcmF3JywgZXZlbnREYXRhKTtcblx0ICAgICAgICB9XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogQ2hhbmdlIGN1cnJlbnQgc2hvd24gbGF5ZXIgb24gY2FsZW5kYXJcblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaG93bkxheWVySWR4IC0gSW5kZXggb2Ygc2hvd24gbGF5ZXJcblx0ICAgICAqIEBwcml2YXRlXG5cdCAgICAgKi9cblx0ICAgIF9jaGFuZ2VTaG93bkxheWVyOiBmdW5jdGlvbihzaG93bkxheWVySWR4KSB7XG5cdCAgICAgICAgdmFyIGNsYXNzUHJlZml4ID0gdGhpcy5fb3B0aW9uLmNsYXNzUHJlZml4O1xuXHQgICAgICAgIHZhciBwcmV2c2hvd25MYXllcklkeCA9IHRoaXMuc2hvd25MYXllcklkeDtcblx0ICAgICAgICB2YXIgJGJvZHlzID0gdGhpcy4kZWxlbWVudC5maW5kKCcuJyArIGNsYXNzUHJlZml4ICsgJ2JvZHknKTtcblx0XG5cdCAgICAgICAgdGhpcy5zaG93bkxheWVySWR4ID0gc2hvd25MYXllcklkeDtcblx0XG5cdCAgICAgICAgJGJvZHlzLmVxKHByZXZzaG93bkxheWVySWR4KS5oaWRlKCk7XG5cdCAgICAgICAgJGJvZHlzLmVxKHNob3duTGF5ZXJJZHgpLnNob3coKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBEcmF3IGNhbGVuZGFyXG5cdCAgICAgKiBAYXBpXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gW3llYXJdIEEgeWVhciAoZXguIDIwMDgpXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gW21vbnRoXSBBIG1vbnRoICgxIH4gMTIpXG5cdCAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpc1JlbGF0aXZlXSBBIHllYXIgYW5kIG1vbnRoIGlzIHJlbGF0ZWRcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2hvd25UeXBlXSBTaG93biB0eXBlIG9mIGxheWVyIChleC4gW2RheSwgbW9udGgsIHllYXJdIHwgWzBdIH4gMl0pXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICogY2FsZW5kYXIuZHJhdygpOyAvLyBEcmF3IHdpdGggbm93IGRhdGUuXG5cdCAgICAgKiBjYWxlbmRhci5kcmF3KDIwMDgsIDEyKTsgLy8gRHJhdyAyMDA4LzEyXG5cdCAgICAgKiBjYWxlbmRhci5kcmF3KG51bGwsIDEyKTsgLy8gRHJhdyBjdXJyZW50IHllYXIvMTJcblx0ICAgICAqIGNhbGVuZGFyLmRyYXcoMjAxMCwgbnVsbCk7IC8vIERyYXcgMjAxMC9jdXJyZW50IG1vbnRoXG5cdCAgICAgKiBjYWxlbmRhci5kcmF3KDAsIDEsIHRydWUpOyAvLyBEcmF3IG5leHQgbW9udGhcblx0ICAgICAqIGNhbGVuZGFyLmRyYXcoLTEsIG51bGwsIHRydWUpOyAvLyBEcmF3IHByZXYgeWVhclxuXHQgICAgICogY2FsZW5kYXIuZHJhdygwLCAwLCBmYWxzZSwgJ2RhdGUnKTsgLy8gRHJhdyB0b2RheSB3aXRoIGRhdGUncyBsYXllclxuXHQgICAgICogY2FsZW5kYXIuZHJhdygyMDEwLCAxMCwgZmFsc2UsICdtb250aCcpOyAvLyBEcmF3IDIwMTAvMTAgd2l0aCBtb250aCdzIGxheWVyXG5cdCAgICAgKiBjYWxlbmRhci5kcmF3KDIwMTYsIG51bGwsIGZhbHNlLCAneWVhcicpOyAvLyBEcmF3IDIwMTYvbW9udGggd2l0aCB5ZWFyJ3MgbGF5ZXJcblx0ICAgICAqKi9cblx0ICAgIGRyYXc6IGZ1bmN0aW9uKHllYXIsIG1vbnRoLCBpc1JlbGF0aXZlLCBzaG93blR5cGUpIHtcblx0ICAgICAgICB2YXIgZGF0ZUZvckRyYXdpbmcgPSB0aGlzLl9nZXREYXRlRm9yRHJhd2luZyh5ZWFyLCBtb250aCwgaXNSZWxhdGl2ZSk7XG5cdCAgICAgICAgdmFyIHNob3duTGF5ZXJJZHg7XG5cdFxuXHQgICAgICAgIC8qID09PT09PT09PT09PT09PVxuXHQgICAgICAgICAqIGJlZm9yZURyYXdcblx0ICAgICAgICAgKiA9PT09PT09PT09PT09PT09PSovXG5cdCAgICAgICAgaWYgKCF0aGlzLmludm9rZSgnYmVmb3JlRHJhdycsIGRhdGVGb3JEcmF3aW5nKSkge1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvKiA9PT09PT09PT09PT09PT1cblx0ICAgICAgICAgKiBkcmF3XG5cdCAgICAgICAgICogPT09PT09PT09PT09PT09PT0qL1xuXHQgICAgICAgIHNob3duTGF5ZXJJZHggPSB1dGlsLmlzTnVtYmVyKHNob3duVHlwZSkgPyBzaG93blR5cGUgOiB0aGlzLl9nZXRJbmRleE9mU2hvd25MYXllcihzaG93blR5cGUpO1xuXHRcblx0ICAgICAgICB5ZWFyID0gZGF0ZUZvckRyYXdpbmcueWVhcjtcblx0ICAgICAgICBtb250aCA9IGRhdGVGb3JEcmF3aW5nLm1vbnRoO1xuXHRcblx0ICAgICAgICB0aGlzLnNldERhdGUoeWVhciwgbW9udGgpO1xuXHRcblx0ICAgICAgICB0aGlzLl9jbGVhcigpO1xuXHQgICAgICAgIHRoaXMuX2RyYXdIZWFkZXIoZGF0ZUZvckRyYXdpbmcsIHNob3duTGF5ZXJJZHgpO1xuXHQgICAgICAgIHRoaXMuX2RyYXdCb2R5KGRhdGVGb3JEcmF3aW5nLCBzaG93bkxheWVySWR4KTtcblx0XG5cdCAgICAgICAgLyogPT09PT09PT09PT09PT09XG5cdCAgICAgICAgICogYWZ0ZXJEcmF3XG5cdCAgICAgICAgICogPT09PT09PT09PT09PT09PSovXG5cdCAgICAgICAgdGhpcy5maXJlKCdhZnRlckRyYXcnLCBkYXRlRm9yRHJhd2luZyk7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogUmV0dXJuIGN1cnJlbnQgeWVhciBhbmQgbW9udGgoanVzdCBzaG93bikuXG5cdCAgICAgKiBAYXBpXG5cdCAgICAgKiBAcmV0dXJucyB7e3llYXI6IG51bWJlciwgbW9udGg6IG51bWJlcn19XG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICogIGdldERhdGUoKTsgPT4geyB5ZWFyOiB4eHh4LCBtb250aDogeHggfTtcblx0ICAgICAqL1xuXHQgICAgZ2V0RGF0ZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgeWVhcjogdGhpcy5fc2hvd25EYXRlLnllYXIsXG5cdCAgICAgICAgICAgIG1vbnRoOiB0aGlzLl9zaG93bkRhdGUubW9udGhcblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIFNldCBkYXRlXG5cdCAgICAgKiBAYXBpXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gW3llYXJdIEEgeWVhciAoZXguIDIwMDgpXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gW21vbnRoXSBBIG1vbnRoICgxIH4gMTIpXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICogIHNldERhdGUoMTk4NCwgMDQpO1xuXHQgICAgICoqL1xuXHQgICAgc2V0RGF0ZTogZnVuY3Rpb24oeWVhciwgbW9udGgpIHtcblx0ICAgICAgICB2YXIgZGF0ZSA9IHRoaXMuX3Nob3duRGF0ZTtcblx0ICAgICAgICBkYXRlLnllYXIgPSB1dGlsLmlzTnVtYmVyKHllYXIpID8geWVhciA6IGRhdGUueWVhcjtcblx0ICAgICAgICBkYXRlLm1vbnRoID0gdXRpbC5pc051bWJlcihtb250aCkgPyBtb250aCA6IGRhdGUubW9udGg7XG5cdCAgICB9XG5cdH0pO1xuXHRcblx0dXRpbC5DdXN0b21FdmVudHMubWl4aW4oQ2FsZW5kYXIpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IENhbGVuZGFyO1xuXG5cbi8qKiovIH0sXG4vKiAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgQ09OU1RBTlRTID0ge1xuXHQgICAgcmVsYXRpdmVNb250aFZhbHVlS2V5OiAncmVsYXRpdmVNb250aFZhbHVlJyxcblx0ICAgIHByZXY6ICdwcmV2Jyxcblx0ICAgIHByZXZZZWFyOiAncHJldi15ZWFyJyxcblx0ICAgIHByZXZNb250aDogJ3ByZXYtbW9udGgnLFxuXHQgICAgbmV4dDogJ25leHQnLFxuXHQgICAgbmV4dFllYXI6ICduZXh0LXllYXInLFxuXHQgICAgbmV4dE1vbnRoOiAnbmV4dC1tb250aCcsXG5cdCAgICBzZWxlY3RlZDogJ3NlbGVjdGVkJyxcblx0ICAgIHRvZGF5OiAndG9kYXknLFxuXHQgICAgY2xpY2thYmxlOiAnY2xpY2thYmxlLXRpdGxlJyxcblx0ICAgIGNhbGVuZGFySGVhZGVyOiBudWxsLFxuXHQgICAgY2FsZW5kYXJCb2R5OiBudWxsLFxuXHQgICAgY2FsZW5kYXJGb290ZXI6IG51bGwsXG5cdCAgICBkZWZhdWx0Q2xhc3NQcmVmaXhSZWdFeHA6IC9jYWxlbmRhci0vZyxcblx0ICAgIHRpdGxlUmVnRXhwOiAveXl5eXx5eXxtbXxtfE0vZyxcblx0ICAgIHRpdGxlWWVhclJlZ0V4cDogL3l5eXl8eXkvZyxcblx0ICAgIHRpdGxlTW9udGhSZWdFeHA6IC9tbXxtfE0vZyxcblx0ICAgIHRvZGF5UmVnRXhwOiAveXl5eXx5eXxtbXxtfE18ZGR8ZHxEL2csXG5cdCAgICBpdGVtQ291bnRPZlllYXI6IDEyLFxuXHQgICAgbGF5ZXJLZXlzOiBbJ2RhdGUnLCAnbW9udGgnLCAneWVhciddXG5cdH07XG5cdFxuXHQvKiBlc2xpbnQtZGlzYWJsZSAqL1xuXHRDT05TVEFOVFMuY2FsZW5kYXJIZWFkZXIgPSBbXG5cdCAgICAnPGRpdiBjbGFzcz1cImNhbGVuZGFyLWhlYWRlclwiPicsXG5cdCAgICAgICAgJzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJjYWxlbmRhci1yb2xsb3ZlciBjYWxlbmRhci1idG4tJyArIENPTlNUQU5UUy5wcmV2ICsgJ1wiPlByZXY8L2E+Jyxcblx0ICAgICAgICAnPHN0cm9uZyBjbGFzcz1cImNhbGVuZGFyLXRpdGxlIGNhbGVuZGFyLWNsaWNrYWJsZS10aXRsZVwiPjwvc3Ryb25nPicsXG5cdCAgICAgICAgJzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJjYWxlbmRhci1yb2xsb3ZlciBjYWxlbmRhci1idG4tJyArIENPTlNUQU5UUy5uZXh0ICsgJ1wiPk5leHQ8L2E+Jyxcblx0ICAgICc8L2Rpdj4nXS5qb2luKCcnKTtcblx0XG5cdENPTlNUQU5UUy5jYWxlbmRhckJvZHkgPSBbXG5cdCAgICAnPGRpdiBjbGFzcz1cImNhbGVuZGFyLWJvZHlcIj4nLFxuXHQgICAgICAgICc8dGFibGU+Jyxcblx0ICAgICAgICAgICAgJzx0aGVhZD4nLFxuXHQgICAgICAgICAgICAgICAgJzx0cj4nLFxuXHQgICAgICAgICAgICAgICAgICAgJzx0aCBjbGFzcz1cImNhbGVuZGFyLXN1blwiPlN1PC90aD48dGg+TW88L3RoPjx0aD5UdTwvdGg+PHRoPldlPC90aD48dGg+VGg8L3RoPjx0aD5GYTwvdGg+PHRoIGNsYXNzPVwiY2FsZW5kYXItc2F0XCI+U2E8L3RoPicsXG5cdCAgICAgICAgICAgICAgICAnPC90cj4nLFxuXHQgICAgICAgICAgICAnPC90aGVhZD4nLFxuXHQgICAgICAgICAgICAnPHRib2R5PicsXG5cdCAgICAgICAgICAgICAgICAnPHRyIGNsYXNzPVwiY2FsZW5kYXItd2Vla1wiPicsXG5cdCAgICAgICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cImNhbGVuZGFyLWRhdGVcIj48L3RkPicsXG5cdCAgICAgICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cImNhbGVuZGFyLWRhdGVcIj48L3RkPicsXG5cdCAgICAgICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cImNhbGVuZGFyLWRhdGVcIj48L3RkPicsXG5cdCAgICAgICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cImNhbGVuZGFyLWRhdGVcIj48L3RkPicsXG5cdCAgICAgICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cImNhbGVuZGFyLWRhdGVcIj48L3RkPicsXG5cdCAgICAgICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cImNhbGVuZGFyLWRhdGVcIj48L3RkPicsXG5cdCAgICAgICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cImNhbGVuZGFyLWRhdGVcIj48L3RkPicsXG5cdCAgICAgICAgICAgICAgICAnPC90cj4nLFxuXHQgICAgICAgICAgICAnPC90Ym9keT4nLFxuXHQgICAgICAgICc8L3RhYmxlPicsXG5cdCAgICAnPC9kaXY+Jyxcblx0ICAgICc8ZGl2IGNsYXNzPVwiY2FsZW5kYXItYm9keVwiPicsXG5cdCAgICAgICAgJzx0YWJsZT4nLFxuXHQgICAgICAgICAgICAnPHRib2R5PicsXG5cdCAgICAgICAgICAgICAgICAnPHRyIGNsYXNzPVwiY2FsZW5kYXItbW9udGgtZ3JvdXBcIj4nLFxuXHQgICAgICAgICAgICAgICAgICAgICc8dGQgY2xhc3M9XCJjYWxlbmRhci1tb250aFwiPjwvdGQ+Jyxcblx0ICAgICAgICAgICAgICAgICAgICAnPHRkIGNsYXNzPVwiY2FsZW5kYXItbW9udGhcIj48L3RkPicsXG5cdCAgICAgICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cImNhbGVuZGFyLW1vbnRoXCI+PC90ZD4nLFxuXHQgICAgICAgICAgICAgICAgJzwvdHI+Jyxcblx0ICAgICAgICAgICAgJzwvdGJvZHk+Jyxcblx0ICAgICAgICAnPC90YWJsZT4nLFxuXHQgICAgJzwvZGl2PicsXG5cdCAgICAnPGRpdiBjbGFzcz1cImNhbGVuZGFyLWJvZHlcIj4nLFxuXHQgICAgICAgICc8dGFibGU+Jyxcblx0ICAgICAgICAgICAgJzx0Ym9keT4nLFxuXHQgICAgICAgICAgICAgICAgJzx0ciBjbGFzcz1cImNhbGVuZGFyLXllYXItZ3JvdXBcIj4nLFxuXHQgICAgICAgICAgICAgICAgICAgICc8dGQgY2xhc3M9XCJjYWxlbmRhci15ZWFyXCI+PC90ZD4nLFxuXHQgICAgICAgICAgICAgICAgICAgICc8dGQgY2xhc3M9XCJjYWxlbmRhci15ZWFyXCI+PC90ZD4nLFxuXHQgICAgICAgICAgICAgICAgICAgICc8dGQgY2xhc3M9XCJjYWxlbmRhci15ZWFyXCI+PC90ZD4nLFxuXHQgICAgICAgICAgICAgICAgJzwvdHI+Jyxcblx0ICAgICAgICAgICAgJzwvdGJvZHk+Jyxcblx0ICAgICAgICAnPC90YWJsZT4nLFxuXHQgICAgJzwvZGl2PiddLmpvaW4oJycpO1xuXHRcblx0Q09OU1RBTlRTLmNhbGVuZGFyRm9vdGVyID0gW1xuXHQgICAgJzxkaXYgY2xhc3M9XCJjYWxlbmRhci1mb290ZXJcIj4nLFxuXHQgICAgICAgICc8cD7smKTripggPGVtIGNsYXNzPVwiY2FsZW5kYXItdG9kYXlcIj48L2VtPjwvcD4nLFxuXHQgICAgJzwvZGl2PiddLmpvaW4oJycpO1xuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IENPTlNUQU5UUztcblxuXG4vKioqLyB9LFxuLyogMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyoqXG5cdCAqIEBmaWxlb3ZlcnZpZXcgVXRpbHMgZm9yIGNhbGVuZGFyIGNvbXBvbmVudFxuXHQgKiBAYXV0aG9yIE5ITiBOZXQuIEZFIGRldiBMYWIgPGRsX2phdmFzY3JpcHRAbmhuZW50LmNvbT5cblx0ICogQGRlcGVuZGVuY3kgdHVpLWNvZGUtc25pcHBldCBeMS4wLjJcblx0ICovXG5cdFxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHQvKipcblx0ICogVXRpbHMgb2YgY2FsZW5kYXJcblx0ICogQG5hbWVzcGFjZSBjYWxlbmRhclV0aWxzXG5cdCAqIEBpZ25vcmVcblx0ICovXG5cdHZhciB1dGlscyA9IHtcblx0ICAgIC8qKlxuXHQgICAgICogUmV0dXJuIGRhdGUgaGFzaCBieSBwYXJhbWV0ZXIuXG5cdCAgICAgKiAgaWYgdGhlcmUgYXJlIDMgcGFyYW1ldGVyLCB0aGUgcGFyYW1ldGVyIGlzIGNvcmduaXplZCBEYXRlIG9iamVjdFxuXHQgICAgICogIGlmIHRoZXJlIGFyZSBubyBwYXJhbWV0ZXIsIHJldHVybiB0b2RheSdzIGhhc2ggZGF0ZVxuXHQgICAgICogQHBhcmFtIHtEYXRlfG51bWJlcn0gW3llYXJdIEEgZGF0ZSBpbnN0YW5jZSBvciB5ZWFyXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gW21vbnRoXSBBIG1vbnRoXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RhdGVdIEEgZGF0ZVxuXHQgICAgICogQHJldHVybnMge3t5ZWFyOiAqLCBtb250aDogKiwgZGF0ZTogKn19XG5cdCAgICAgKi9cblx0ICAgIGdldERhdGVIYXNoOiBmdW5jdGlvbih5ZWFyLCBtb250aCwgZGF0ZSkge1xuXHQgICAgICAgIHZhciBuRGF0ZTtcblx0XG5cdCAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSB7XG5cdCAgICAgICAgICAgIG5EYXRlID0gYXJndW1lbnRzWzBdIHx8IG5ldyBEYXRlKCk7XG5cdFxuXHQgICAgICAgICAgICB5ZWFyID0gbkRhdGUuZ2V0RnVsbFllYXIoKTtcblx0ICAgICAgICAgICAgbW9udGggPSBuRGF0ZS5nZXRNb250aCgpICsgMTtcblx0ICAgICAgICAgICAgZGF0ZSA9IG5EYXRlLmdldERhdGUoKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHllYXI6IHllYXIsXG5cdCAgICAgICAgICAgIG1vbnRoOiBtb250aCxcblx0ICAgICAgICAgICAgZGF0ZTogZGF0ZVxuXHQgICAgICAgIH07XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogUmV0dXJuIHRvZGF5IHRoYXQgc2F2ZWQgb24gY29tcG9uZW50IG9yIGNyZWF0ZSBuZXcgZGF0ZS5cblx0ICAgICAqIEBmdW5jdGlvbiBnZXRUb2RheVxuXHQgICAgICogQHJldHVybnMge3t5ZWFyOiAqLCBtb250aDogKiwgZGF0ZTogKn19XG5cdCAgICAgKi9cblx0ICAgIGdldFRvZGF5OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4gdXRpbHMuZ2V0RGF0ZUhhc2goKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBHZXQgd2Vla3MgY291bnQgYnkgcGFyYW1lbnRlclxuXHQgICAgICogQHBhcmFtIHtudW1iZXJ9IHllYXIgQSB5ZWFyXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gbW9udGggQSBtb250aFxuXHQgICAgICogQHJldHVybnMge251bWJlcn0g7KO8ICg0fjYpXG5cdCAgICAgKiovXG5cdCAgICBnZXRXZWVrczogZnVuY3Rpb24oeWVhciwgbW9udGgpIHtcblx0ICAgICAgICB2YXIgZmlyc3REYXkgPSB0aGlzLmdldEZpcnN0RGF5KHllYXIsIG1vbnRoKSxcblx0ICAgICAgICAgICAgbGFzdERhdGUgPSB0aGlzLmdldExhc3REYXRlKHllYXIsIG1vbnRoKTtcblx0XG5cdCAgICAgICAgcmV0dXJuIE1hdGguY2VpbCgoZmlyc3REYXkgKyBsYXN0RGF0ZSkgLyA3KTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBHZXQgdW5peCB0aW1lIGZyb20gZGF0ZSBoYXNoXG5cdCAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0ZSBBIGRhdGUgaGFzaFxuXHQgICAgICogQHBhcmFtIHtudW1iZXJ9IGRhdGUueWVhciBBIHllYXJcblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkYXRlLm1vbnRoIEEgbW9udGhcblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkYXRlLmRhdGUgQSBkYXRlXG5cdCAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqIHV0aWxzLmdldFRpbWUoe3llYXI6MjAxMCwgbW9udGg6NSwgZGF0ZToxMn0pOyAvLyAxMjczNTkwMDAwMDAwXG5cdCAgICAgKiovXG5cdCAgICBnZXRUaW1lOiBmdW5jdGlvbihkYXRlKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0ZU9iamVjdChkYXRlKS5nZXRUaW1lKCk7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogR2V0IHdoaWNoIGRheSBpcyBmaXJzdCBieSBwYXJhbWV0ZXJzIHRoYXQgaW5jbHVkZSB5ZWFyIGFuZCBtb250aCBpbmZvcm1hdGlvbi5cblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5ZWFyIEEgeWVhclxuXHQgICAgICogQHBhcmFtIHtudW1iZXJ9IG1vbnRoIEEgbW9udGhcblx0ICAgICAqIEByZXR1cm5zIHtudW1iZXJ9ICgwfjYpXG5cdCAgICAgKiovXG5cdCAgICBnZXRGaXJzdERheTogZnVuY3Rpb24oeWVhciwgbW9udGgpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCAxKS5nZXREYXkoKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBHZXQgd2hpY2ggZGF5IGlzIGxhc3QgYnkgcGFyYW1ldGVycyB0aGF0IGluY2x1ZGUgeWVhciBhbmQgbW9udGggaW5mb3JtYXRpb24uXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0geWVhciBBIHllYXJcblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtb250aCBBIG1vbnRoXG5cdCAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSAoMH42KVxuXHQgICAgICoqL1xuXHQgICAgZ2V0TGFzdERheTogZnVuY3Rpb24oeWVhciwgbW9udGgpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGgsIDApLmdldERheSgpO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEdldCBsYXN0IGRhdGUgYnkgcGFyYW1ldGVycyB0aGF0IGluY2x1ZGUgeWVhciBhbmQgbW9udGggaW5mb3JtYXRpb24uXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0geWVhciBBIHllYXJcblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtb250aCBBIG1vbnRoXG5cdCAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSAoMX4zMSlcblx0ICAgICAqKi9cblx0ICAgIGdldExhc3REYXRlOiBmdW5jdGlvbih5ZWFyLCBtb250aCkge1xuXHQgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMCkuZ2V0RGF0ZSgpO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEdldCBkYXRlIGluc3RhbmNlLlxuXHQgICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGUgQSBkYXRlIGhhc2hcblx0ICAgICAqIEByZXR1cm5zIHtEYXRlfSBEYXRlXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICogIGNhbGVuZGFyVXRpbHMuZ2V0RGF0ZU9iamVjdCh7eWVhcjoyMDEwLCBtb250aDo1LCBkYXRlOjEyfSk7XG5cdCAgICAgKiAgY2FsZW5kYXJVdGlscy5nZXREYXRlT2JqZWN0KDIwMTAsIDUsIDEyKTsgLy95ZWFyLG1vbnRoLGRhdGVcblx0ICAgICAqKi9cblx0ICAgIGdldERhdGVPYmplY3Q6IGZ1bmN0aW9uKGRhdGUpIHtcblx0ICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0gLSAxLCBhcmd1bWVudHNbMl0pO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUueWVhciwgZGF0ZS5tb250aCAtIDEsIGRhdGUuZGF0ZSk7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogR2V0IHJlbGF0ZWQgZGF0ZSBoYXNoIHdpdGggcGFyYW1ldGVycyB0aGF0IGluY2x1ZGUgZGF0ZSBpbmZvcm1hdGlvbi5cblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5ZWFyIEEgcmVsYXRlZCB2YWx1ZSBmb3IgeWVhcih5b3UgY2FuIHVzZSArLy0pXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gbW9udGggQSByZWxhdGVkIHZhbHVlIGZvciBtb250aCAoeW91IGNhbiB1c2UgKy8tKVxuXHQgICAgICogQHBhcmFtIHtudW1iZXJ9IGRhdGUgQSByZWxhdGVkIHZhbHVlIGZvciBkYXkgKHlvdSBjYW4gdXNlICsvLSlcblx0ICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRlT2JqIHN0YW5kYXJkIGRhdGUgaGFzaFxuXHQgICAgICogQHJldHVybnMge09iamVjdH0gZGF0ZU9ialxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqICBjYWxlbmRhclV0aWxzLmdldFJlbGF0aXZlRGF0ZSgxLCAwLCAwLCB7eWVhcjoyMDAwLCBtb250aDoxLCBkYXRlOjF9KTsgLy8ge3llYXI6MjAwMSwgbW9udGg6MSwgZGF0ZToxfVxuXHQgICAgICogIGNhbGVuZGFyVXRpbHMuZ2V0UmVsYXRpdmVEYXRlKDAsIDAsIC0xLCB7eWVhcjoyMDEwLCBtb250aDoxLCBkYXRlOjF9KTsgLy8ge3llYXI6MjAwOSwgbW9udGg6MTIsIGRhdGU6MzF9XG5cdCAgICAgKiovXG5cdCAgICBnZXRSZWxhdGl2ZURhdGU6IGZ1bmN0aW9uKHllYXIsIG1vbnRoLCBkYXRlLCBkYXRlT2JqKSB7XG5cdCAgICAgICAgdmFyIG5ZZWFyID0gKGRhdGVPYmoueWVhciArIHllYXIpLFxuXHQgICAgICAgICAgICBuTW9udGggPSAoZGF0ZU9iai5tb250aCArIG1vbnRoIC0gMSksXG5cdCAgICAgICAgICAgIG5EYXRlID0gKGRhdGVPYmouZGF0ZSArIGRhdGUpLFxuXHQgICAgICAgICAgICBuRGF0ZU9iaiA9IG5ldyBEYXRlKG5ZZWFyLCBuTW9udGgsIG5EYXRlKTtcblx0XG5cdCAgICAgICAgcmV0dXJuIHV0aWxzLmdldERhdGVIYXNoKG5EYXRlT2JqKTtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBDaGFnbmUgbnVtYmVyIDB+OSB0byAnMDB+MDknXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIG51bWJlclxuXHQgICAgICogQHJldHVybnMge3N0cmluZ31cblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKiAgY2FsZW5kYXJVdGlscy5wcmVwZW5kTGVhZGluZ1plcm8oMCk7IC8vICAnMDAnXG5cdCAgICAgKiAgY2FsZW5kYXJVdGlscy5wcmVwZW5kTGVhZGluZ1plcm8oOSk7IC8vICAnMDknXG5cdCAgICAgKiAgY2FsZW5kYXJVdGlscy5wcmVwZW5kTGVhZGluZ1plcm8oMTIpOyAvLyAgJzEyJ1xuXHQgICAgICovXG5cdCAgICBwcmVwZW5kTGVhZGluZ1plcm86IGZ1bmN0aW9uKG51bWJlcikge1xuXHQgICAgICAgIHZhciBwcmVmaXggPSAnJztcblx0XG5cdCAgICAgICAgaWYgKG51bWJlciA8IDEwKSB7XG5cdCAgICAgICAgICAgIHByZWZpeCA9ICcwJztcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBwcmVmaXggKyBudW1iZXI7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogQ2hhZ2UgdGV4dCBhbmQgcmV0dXJuLlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBBIHRleHQgdG8gY2hhZ25lXG5cdCAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIEEgY2hhZ25lIGtleSwgdmFsdWUgc2V0XG5cdCAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnIEEgcmVnRXhwIHRvIGNoYWduZVxuXHQgICAgICogQHJldHVybnMge3N0cmluZ31cblx0ICAgICAqL1xuXHQgICAgZ2V0Q29udmVydGVkVGl0bGU6IGZ1bmN0aW9uKHN0ciwgbWFwLCByZWcpIHtcblx0ICAgICAgICBzdHIgPSBzdHIucmVwbGFjZShyZWcsIGZ1bmN0aW9uKG1hdGNoZWRTdHJpbmcpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG1hcFttYXRjaGVkU3RyaW5nXSB8fCAnJztcblx0ICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgcmV0dXJuIHN0cjtcblx0ICAgIH1cblx0fTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gdXRpbHM7XG5cblxuLyoqKi8gfVxuLyoqKioqKi8gXSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHR1aS1jb21wb25lbnQtY2FsZW5kYXIubWluLmpzIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiZGlzdFwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDI5MTkyNjgzZTI1ZDU2MGU2MDBhIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FsZW5kYXIgPSByZXF1aXJlKCcuL2NhbGVuZGFyJyk7XG5cbnR1aS51dGlsLmRlZmluZU5hbWVzcGFjZSgndHVpLmNvbXBvbmVudCcsIHtcbiAgICBDYWxlbmRhcjogQ2FsZW5kYXJcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IENhbGVuZGFyIGNvbXBvbmVudChmcm9tIFB1ZyBjb21wb25lbnQpXG4gKiBAYXV0aG9yIE5ITiBFbnQuIEZFIGRldiBMYWIgPGRsX2phdmFzY3JpcHRAbmhuZW50LmNvbT5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FsZW5kYXJVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBDT05TVEFOVFMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG52YXIgdXRpbCA9IHR1aS51dGlsO1xudmFyIGJpbmQgPSB1dGlsLmJpbmQ7XG52YXIgZXh0ZW5kID0gdXRpbC5leHRlbmQ7XG5cbi8qKlxuICogQ2FsZW5kYXIgY29tcG9uZW50IGNsYXNzXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uXSBBIG9wdGlvbnMgZm9yIGluaXRpYWxpemVcbiAqICAgICBAcGFyYW0ge0hUTUxFbGVtZW50fSBvcHRpb24uZWxlbWVudCBBIHJvb3QgZWxlbWVudFxuICogICAgIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9uLmNsYXNzUHJlZml4PVwiY2FsZW5kYXItXCJdIEEgcHJlZml4IGNsYXNzIGZvciBtYXJrdXAgc3RydWN0dXJlXG4gKiAgICAgQHBhcmFtIHtudW1iZXJ9IFtvcHRpb24ueWVhcj10aGlzIHllYXJdIEEgeWVhciBmb3IgaW5pdGlhbGl6ZVxuICogICAgIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9uLm1vbnRoPXRoaXMgbW9udGhdIEEgbW9udGggZm9yIGluaXRpYWxpemVcbiAqICAgICBAcGFyYW0ge3N0cmluZ30gW29wdGlvbi50aXRsZUZvcm1hdD1cInl5eXktbW1cIl0gQSB0aXRsZSBmb3JtYXQuXG4gKiAgICAgICAgICAgICAgICAgICAgIFRoaXMgY29tcG9uZW50IGZpbmQgdGl0bGUgZWxlbWVudCBieSBjbGFzc05hbWUgJ1twcmVmaXhddGl0bGUnXG4gKiAgICAgQHBhcmFtIHtzdHJpbmd9IFtvcHRpb24udG9kYXlGb3JtYXQgPSBcInl5eXkgWWVhciBtbSBNb250aCBkZCBEYXkgKEQpXCJdIEEgdG9kYXkgZm9ybWF0LlxuICogICAgICAgICAgICAgICAgICAgICBUaGlzIGNvbXBvbmVudCBmaW5kIHRvZGF5IGVsZW1lbnQgYnkgY2xhc3NOYW1lICdbcHJlZml4XXRvZGF5J1xuICogICAgIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9uLnllYXJUaXRsZUZvcm1hdCA9IFwieXl5eVwiXSBBIHllYXIgdGl0bGUgZm9ybWFudC5cbiAqICAgICAgICAgICAgICAgICAgICAgIFRoaXMgY29tcG9uZW50IGZpbmQgeWVhciB0aXRsZSBlbGVtZW50IGJ5IGNsYXNzTmFtZSAnW3ByZWZpeF15ZWFyJ1xuICogICAgIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9uLm1vbnRoVGl0bGVGb3JtYXQgPSBcIm1cIl0gQSBtb250aCB0aXRsZSBmb3JtYXQuXG4gKiAgICAgICAgICAgICAgICAgICAgIFRoaXMgY29tcG9uZW50IGZpbmQgbW9udGggdGl0bGUgZWxlbWVudCBieSBjbGFzc05hbWXsnbQgJ1twcmVmaXhdbW9udGgnXG4gKiAgICAgQHBhcmFtIHtBcnJheX0gW29wdGlvbi5tb250aFRpdGxlcyA9IFtcIkpBTlwiLFwiRkVCXCIsXCJNQVJcIixcIkFQUlwiLFwiTUFZXCIsXCJKVU5cIixcIkpVTFwiLFwiQVVHXCIsXCJTRVBcIixcIk9DVFwiLFwiTk9WXCIsXCJERUNcIl1dXG4gKiAgICAgICAgICAgICAgICAgICAgQSBsYWJlbCBvZiBlYWNoIG1vbnRoLlxuICogICAgIEBwYXJhbSB7QXJyYXl9IFtvcHRpb24uZGF5VGl0bGVzID0gW1wiU3VuXCIsXCJNb25cIixcIlR1ZVwiLFwiV2VkXCIsXCJUaHVcIixcIkZyaVwiLFwiU2F0XCJdXSBBIGxhYmVsIGZvciBkYXkuXG4gKiAgICAgICAgICAgICAgICAgICAgSWYgeW91IHNldCB0aGUgb3RoZXIgb3B0aW9uIHRvZGF5Rm9ybWF0ICdEJywgeW91IGNhbiB1c2UgdGhpcyBuYW1lLlxuICogQHR1dG9yaWFsIHNhbXBsZTFcbiAqIEB0dXRvcmlhbCBzYW1wbGUyXG4gKiBAdHV0b3JpYWwgc2FtcGxlM1xuICogQGV4YW1wbGVcbiAqIHZhciBjYWxlbmRhciA9IG5ldyB0dWkuY29tcG9uZW50LkNhbGVuZGFyKHtcbiAqICAgICBlbGVtZW50OiAnI2xheWVyJyxcbiAqICAgICBjbGFzc1ByZWZpeDogXCJjYWxlbmRhci1cIixcbiAqICAgICB5ZWFyOiAxOTgzLFxuICogICAgIG1vbnRoOiA1LFxuICogICAgIHRpdGxlRm9ybWF0OiBcInl5eXktbW1cIiwgLy8gdGl0bGVcbiAqICAgICB0b2RheUZvcm1hdDogXCJ5eXl5IC8gbW0gLyBkZCAoRClcIiAvLyB0b2RheVxuICogICAgIHllYXJUaXRsZUZvcm1hdDogXCJ5eXl5XCIsIC8vIHllYXIgdGl0bGVcbiAqICAgICBtb250aFRpdGxlRm9ybWF0OiBcIm1cIiwgLy8gbW9udGggdGl0bGVcbiAqICAgICBtb250aFRpdGxlczogW1wiSkFOXCIsIFwiRkVCXCIsIFwiTUFSXCIsIFwiQVBSXCIsIFwiTUFZXCIsIFwiSlVOXCIsIFwiSlVMXCIsIFwiQVVHXCIsIFwiU0VQXCIsIFwiT0NUXCIsIFwiTk9WXCIsIFwiREVDXCJdLFxuICogICAgIGRheVRpdGxlczogWydzdW4nLCAnbW9uJywgJ3R1ZScsICd3ZWQnLCAndGh1JywgJ2ZyaScsICdzYXQnXSAvLyBkYXlzXG4gKiAgICAgaXRlbUNvdW50T2ZZZWFyOiAxMlxuICogfSk7XG4gKi9cbnZhciBDYWxlbmRhciA9IHV0aWwuZGVmaW5lQ2xhc3MoLyoqIEBsZW5kcyBDYWxlbmRhci5wcm90b3R5cGUgKi8ge1xuICAgIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IG9wdGlvbnNcbiAgICAgICAgICogb3B0aW9uOiB7XG4gICAgICAgICAqICAgICBjbGFzc1ByZWZpeDogc3RyaW5nLFxuICAgICAgICAgKiAgICAgeWVhcjogbnVtYmVyXG4gICAgICAgICAqICAgICBtb250aDogbnVtYmVyXG4gICAgICAgICAqICAgICB0aXRsZUZvcm1hdDogc3RyaW5nLFxuICAgICAgICAgKiAgICAgdG9kYXlGb3JtYXQ6IHN0cmluZyxcbiAgICAgICAgICogICAgIHllYXJUaXRsZUZvcm1hdDogc3RyaW5nLFxuICAgICAgICAgKiAgICAgbW9udGhUaXRsZUZvcm1hdDogc3RyaW5nLFxuICAgICAgICAgKiAgICAgbW9udGhUaXRsZXM6IEFycmF5LFxuICAgICAgICAgKiAgICAgZGF5VGl0bGVzOiBBcnJheSxcbiAgICAgICAgICogICAgIGl0ZW1Db3VudE9mWWVhcjogbnVtYmVyXG4gICAgICAgICAqIH1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX29wdGlvbiA9IHt9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGRheSB0aGF0IGlzIHNob3duXG4gICAgICAgICAqIEB0eXBlIHt7eWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyfX1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3Nob3duRGF0ZSA9IHtcbiAgICAgICAgICAgIHllYXI6IDAsXG4gICAgICAgICAgICBtb250aDogMSxcbiAgICAgICAgICAgIGRhdGU6IDFcbiAgICAgICAgfTtcblxuICAgICAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgKiBqUXVlcnkgLSBIVE1MRWxlbWVudFxuICAgICAgICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqID09PT09PT09PVJvb3QgRWxlbWVudD09PT09PT09PVxuICAgICAgICAgKiBJZiBvcHRpb25zIGRvIG5vdCBpbmNsdWRlIGVsZW1lbnQsIHRoaXMgY29tcG9uZW50IGplZGdlIGluaXRpYWxpemUgZWxlbWVudCB3aXRob3V0IG9wdGlvbnNcbiAgICAgICAgICogQHR5cGUge2pRdWVyeX1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuJGVsZW1lbnQgPSAkKG9wdGlvbi5lbGVtZW50IHx8IGFyZ3VtZW50c1swXSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqID09PT09PT09PUhlYWRlcj09PT09PT09PVxuICAgICAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy4kaGVhZGVyID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSB0aWx0ZVxuICAgICAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy4kdGl0bGUgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHllYXIgdGl0bGVcbiAgICAgICAgICogQHR5cGUge2pRdWVyeX1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuJHRpdGxlWWVhciA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbW9udGggdGl0bGVcbiAgICAgICAgICogQHR5cGUge2pRdWVyeX1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuJHRpdGxlTW9udGggPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiA9PT09PT09PT1Cb2R5PT09PT09PT09XG4gICAgICAgICAqIEB0eXBlIHtqUXVlcnl9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLiRib2R5ID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSB0ZW1wbGF0ZSBvZiB3ZWVrXG4gICAgICAgICAqIEB0eXBlIHtqUXVlcnl9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLiR3ZWVrVGVtcGxhdGUgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHdlZWsgcGFyZW50IGVsZW1lbnRcbiAgICAgICAgICogQHR5cGUge2pRdWVyeX1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuJHdlZWtBcHBlbmRUYXJnZXQgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGRhdGUgZWxlbWVudFxuICAgICAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fJGRhdGVFbGVtZW50ID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSBkYXRlIHdyYXBwZXIgZWxlbWVudFxuICAgICAgICAgKiBAdHlwZSB7alF1ZXJ5fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fJGRhdGVDb250YWluZXJFbGVtZW50ID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogPT09PT09PT09Rm9vdGVyPT09PT09PT09XG4gICAgICAgICAqIEB0eXBlIHtqUXVlcnl9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLiRmb290ZXIgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUb2RheSBlbGVtZW50XG4gICAgICAgICAqIEB0eXBlIHtqUXVlcnl9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLiR0b2RheSA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluZGV4IG9mIHNob3duIGxheWVyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNob3duTGF5ZXJJZHggPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEYXRhIG9mIG1vbnRoJ3MgbGF5ZXJcbiAgICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGF0YU9mTW9udGhMYXllciA9IHt9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEYXRhIG9mIHllYXIncyBsYXllclxuICAgICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kYXRhT2ZZZWFyTGF5ZXIgPSB7fTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciB0aXRsZSBpcyBjbGlja2FibGUgb3Igbm90XG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pc0NsaWNrYWJsZVRpdGxlID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZXJzIGJpbmRpbmcgY29udGV4dFxuICAgICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5oYW5kbGVycyA9IHt9O1xuXG4gICAgICAgIC8qKiBTZXQgZGVmYXVsdCBvcHRpb25zICovXG4gICAgICAgIHRoaXMuX3NldERlZmF1bHQob3B0aW9uKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0IGRlZnVsYXQgb3BpdG9uc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uXSBBIG9wdGlvbnMgdG8gaW5pdGlhbHppZSBjb21wb25lbnRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9zZXREZWZhdWx0OiBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgdGhpcy5fc2V0T3B0aW9uKG9wdGlvbik7XG4gICAgICAgIHRoaXMuX2Fzc2lnbkhUTUxFbGVtZW50cygpO1xuICAgICAgICB0aGlzLl9hdHRhY2hFdmVudCgpO1xuICAgICAgICB0aGlzLmRyYXcodGhpcy5fb3B0aW9uLnllYXIsIHRoaXMuX29wdGlvbi5tb250aCwgZmFsc2UsIDApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTYXZlIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbl0gQSBvcHRpb25zIHRvIGluaXRpYWxpemUgY29tcG9uZW50XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2V0T3B0aW9uOiBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgdmFyIGluc3RhbmNlT3B0aW9uID0gdGhpcy5fb3B0aW9uLFxuICAgICAgICAgICAgdG9kYXkgPSBjYWxlbmRhclV0aWxzLmdldERhdGVIYXNoKCk7XG5cbiAgICAgICAgdmFyIGRlZmF1bHRPcHRpb24gPSB7XG4gICAgICAgICAgICBjbGFzc1ByZWZpeDogJ2NhbGVuZGFyLScsXG4gICAgICAgICAgICB5ZWFyOiB0b2RheS55ZWFyLFxuICAgICAgICAgICAgbW9udGg6IHRvZGF5Lm1vbnRoLFxuICAgICAgICAgICAgdGl0bGVGb3JtYXQ6ICd5eXl5LW1tJyxcbiAgICAgICAgICAgIHRvZGF5Rm9ybWF0OiAneXl5eS9tbS9kZCAoRCknLFxuICAgICAgICAgICAgeWVhclRpdGxlRm9ybWF0OiAneXl5eScsXG4gICAgICAgICAgICBtb250aFRpdGxlRm9ybWF0OiAnbScsXG4gICAgICAgICAgICBtb250aFRpdGxlczogWydKQU4nLCAnRkVCJywgJ01BUicsICdBUFInLCAnTUFZJywgJ0pVTicsICdKVUwnLCAnQVVHJywgJ1NFUCcsICdPQ1QnLCAnTk9WJywgJ0RFQyddLFxuICAgICAgICAgICAgZGF5VGl0bGVzOiBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddLFxuICAgICAgICAgICAgaXRlbUNvdW50T2ZZZWFyOiBDT05TVEFOVFMuaXRlbUNvdW50T2ZZZWFyXG4gICAgICAgIH07XG4gICAgICAgIGV4dGVuZChpbnN0YW5jZU9wdGlvbiwgZGVmYXVsdE9wdGlvbiwgb3B0aW9uKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0IGVsZW1lbnQgdG8gZmlsZWRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9hc3NpZ25IVE1MRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2xhc3NQcmVmaXggPSB0aGlzLl9vcHRpb24uY2xhc3NQcmVmaXgsXG4gICAgICAgICAgICAkZWxlbWVudCA9IHRoaXMuJGVsZW1lbnQsXG4gICAgICAgICAgICBjbGFzc1NlbGVjdG9yID0gJy4nICsgY2xhc3NQcmVmaXg7XG5cbiAgICAgICAgdGhpcy5fYXNzaWduSGVhZGVyKCRlbGVtZW50LCBjbGFzc1NlbGVjdG9yLCBjbGFzc1ByZWZpeCk7XG4gICAgICAgIHRoaXMuX2Fzc2lnbkJvZHkoJGVsZW1lbnQsIGNsYXNzU2VsZWN0b3IsIGNsYXNzUHJlZml4KTtcbiAgICAgICAgdGhpcy5fYXNzaWduRm9vdGVyKCRlbGVtZW50LCBjbGFzc1NlbGVjdG9yLCBjbGFzc1ByZWZpeCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGhlYWRlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbWVudCBUaGUgcm9vdCBlbGVtZW50IG9mIGNvbXBvbmVudFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1NlbGVjdG9yIEEgY2xhc3Mgc2VsZWN0b3JcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NQcmVmaXggQSBwcmVmaXggZm9yIGNsYXNzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfYXNzaWduSGVhZGVyOiBmdW5jdGlvbigkZWxlbWVudCwgY2xhc3NTZWxlY3RvciwgY2xhc3NQcmVmaXgpIHtcbiAgICAgICAgdmFyICRoZWFkZXIgPSAkZWxlbWVudC5maW5kKGNsYXNzU2VsZWN0b3IgKyAnaGVhZGVyJyksXG4gICAgICAgICAgICBoZWFkZXJUZW1wbGF0ZSxcbiAgICAgICAgICAgIGRlZmF1bHRDbGFzc1ByZWZpeFJlZ0V4cCxcbiAgICAgICAgICAgIGtleSA9IENPTlNUQU5UUy5yZWxhdGl2ZU1vbnRoVmFsdWVLZXksXG4gICAgICAgICAgICBidG5DbGFzc05hbWUgPSAnYnRuLSc7XG5cbiAgICAgICAgaWYgKCEkaGVhZGVyLmxlbmd0aCkge1xuICAgICAgICAgICAgaGVhZGVyVGVtcGxhdGUgPSBDT05TVEFOVFMuY2FsZW5kYXJIZWFkZXI7XG4gICAgICAgICAgICBkZWZhdWx0Q2xhc3NQcmVmaXhSZWdFeHAgPSBDT05TVEFOVFMuZGVmYXVsdENsYXNzUHJlZml4UmVnRXhwO1xuXG4gICAgICAgICAgICAkaGVhZGVyID0gJChoZWFkZXJUZW1wbGF0ZS5yZXBsYWNlKGRlZmF1bHRDbGFzc1ByZWZpeFJlZ0V4cCwgY2xhc3NQcmVmaXgpKTtcbiAgICAgICAgICAgICRlbGVtZW50LmFwcGVuZCgkaGVhZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJ1dHRvblxuICAgICAgICAkaGVhZGVyLmZpbmQoY2xhc3NTZWxlY3RvciArIGJ0bkNsYXNzTmFtZSArIENPTlNUQU5UUy5wcmV2WWVhcikuZGF0YShrZXksIC0xMik7XG4gICAgICAgICRoZWFkZXIuZmluZChjbGFzc1NlbGVjdG9yICsgYnRuQ2xhc3NOYW1lICsgQ09OU1RBTlRTLnByZXZNb250aCkuZGF0YShrZXksIC0xKTtcbiAgICAgICAgJGhlYWRlci5maW5kKGNsYXNzU2VsZWN0b3IgKyBidG5DbGFzc05hbWUgKyBDT05TVEFOVFMubmV4dFllYXIpLmRhdGEoa2V5LCAxMik7XG4gICAgICAgICRoZWFkZXIuZmluZChjbGFzc1NlbGVjdG9yICsgYnRuQ2xhc3NOYW1lICsgQ09OU1RBTlRTLm5leHRNb250aCkuZGF0YShrZXksIDEpO1xuXG4gICAgICAgIC8vIHRpdGxlIHRleHRcbiAgICAgICAgdGhpcy4kdGl0bGUgPSAkaGVhZGVyLmZpbmQoY2xhc3NTZWxlY3RvciArICd0aXRsZScpO1xuICAgICAgICB0aGlzLiR0aXRsZVllYXIgPSAkaGVhZGVyLmZpbmQoY2xhc3NTZWxlY3RvciArICd0aXRsZS15ZWFyJyk7XG4gICAgICAgIHRoaXMuJHRpdGxlTW9udGggPSAkaGVhZGVyLmZpbmQoY2xhc3NTZWxlY3RvciArICd0aXRsZS1tb250aCcpO1xuXG4gICAgICAgIHRoaXMuJGhlYWRlciA9ICRoZWFkZXI7XG5cbiAgICAgICAgaWYgKHRoaXMuJHRpdGxlLmhhc0NsYXNzKHRoaXMuX29wdGlvbi5jbGFzc1ByZWZpeCArIENPTlNUQU5UUy5jbGlja2FibGUpKSB7XG4gICAgICAgICAgICB0aGlzLmlzQ2xpY2thYmxlVGl0bGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGJvZHkgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbWVudCBUaGUgcm9vdCBlbG1lbnQgb2YgY29tcG9uZW50XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzU2VsZWN0b3IgQSBzZWxlY3RvclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1ByZWZpeCBBIHByZWZpeCBmb3IgY2xhc3NcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9hc3NpZ25Cb2R5OiBmdW5jdGlvbigkZWxlbWVudCwgY2xhc3NTZWxlY3RvciwgY2xhc3NQcmVmaXgpIHtcbiAgICAgICAgdmFyICRib2R5ID0gJGVsZW1lbnQuZmluZChjbGFzc1NlbGVjdG9yICsgJ2JvZHknKSxcbiAgICAgICAgICAgIGJvZHlUZW1wbGF0ZSxcbiAgICAgICAgICAgIGRlZmF1bHRDbGFzc1ByZWZpeFJlZ0V4cDtcblxuICAgICAgICBpZiAoISRib2R5Lmxlbmd0aCkge1xuICAgICAgICAgICAgYm9keVRlbXBsYXRlID0gQ09OU1RBTlRTLmNhbGVuZGFyQm9keTtcbiAgICAgICAgICAgIGRlZmF1bHRDbGFzc1ByZWZpeFJlZ0V4cCA9IENPTlNUQU5UUy5kZWZhdWx0Q2xhc3NQcmVmaXhSZWdFeHA7XG5cbiAgICAgICAgICAgICRib2R5ID0gJChib2R5VGVtcGxhdGUucmVwbGFjZShkZWZhdWx0Q2xhc3NQcmVmaXhSZWdFeHAsIGNsYXNzUHJlZml4KSk7XG4gICAgICAgICAgICAkZWxlbWVudC5hcHBlbmQoJGJvZHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fYXNzaWduV2VlayhjbGFzc1NlbGVjdG9yKTtcbiAgICAgICAgdGhpcy5fYXNzaWduTW9udGhMYXllcihjbGFzc1NlbGVjdG9yKTtcbiAgICAgICAgdGhpcy5fYXNzaWduWWVhckxheWVyKGNsYXNzU2VsZWN0b3IpO1xuXG4gICAgICAgIHRoaXMuJGJvZHkgPSAkYm9keS5oaWRlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIHdlZWsgZWxlbW50IG9uIGJvZHlcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NTZWxlY3RvciBBIHNlbGVjdG9yXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfYXNzaWduV2VlazogZnVuY3Rpb24oY2xhc3NTZWxlY3Rvcikge1xuICAgICAgICB2YXIgJGJvZHkgPSB0aGlzLiRlbGVtZW50LmZpbmQoY2xhc3NTZWxlY3RvciArICdib2R5Jyk7XG4gICAgICAgIHZhciAkd2Vla1RlbXBsYXRlID0gJGJvZHkuZmluZChjbGFzc1NlbGVjdG9yICsgJ3dlZWsnKTtcblxuICAgICAgICB0aGlzLiR3ZWVrVGVtcGxhdGUgPSAkd2Vla1RlbXBsYXRlLmNsb25lKHRydWUpO1xuICAgICAgICB0aGlzLiR3ZWVrQXBwZW5kVGFyZ2V0ID0gJHdlZWtUZW1wbGF0ZS5wYXJlbnQoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgZWxlbWVudCBvZiBtb250aCdzIGxheWVyIGFuZCBzYXZlIGRyYXdpbmcgaW5mb1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1NlbGVjdG9yIEEgc2VsZWN0b3JcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9hc3NpZ25Nb250aExheWVyOiBmdW5jdGlvbihjbGFzc1NlbGVjdG9yKSB7XG4gICAgICAgIHZhciAkYm9keSA9IHRoaXMuJGVsZW1lbnQuZmluZChjbGFzc1NlbGVjdG9yICsgJ2JvZHknKTtcbiAgICAgICAgdmFyICRtb250aHNUZW1wbGF0ZSA9ICRib2R5LmZpbmQoY2xhc3NTZWxlY3RvciArICdtb250aC1ncm91cCcpO1xuICAgICAgICB2YXIgY29scyA9ICRtb250aHNUZW1wbGF0ZS5maW5kKGNsYXNzU2VsZWN0b3IgKyAnbW9udGgnKS5sZW5ndGg7XG4gICAgICAgIHZhciByb3dzID0gTWF0aC5jZWlsKHRoaXMuX29wdGlvbi5tb250aFRpdGxlcy5sZW5ndGggLyBjb2xzKTtcblxuICAgICAgICB0aGlzLmRhdGFPZk1vbnRoTGF5ZXIgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZTogJG1vbnRoc1RlbXBsYXRlLmNsb25lKHRydWUpLFxuICAgICAgICAgICAgYXBwZW5kZWRUYXJnZXQ6ICRtb250aHNUZW1wbGF0ZS5wYXJlbnQoKSxcbiAgICAgICAgICAgIGZyYW1lOiB7XG4gICAgICAgICAgICAgICAgY29sczogY29scyxcbiAgICAgICAgICAgICAgICByb3dzOiByb3dzXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGVsZW1lbnQgb2YgeWVhcidzIGxheWVyIGFuZCBzYXZlIGRyYXdpbmcgaW5mb1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1NlbGVjdG9yIEEgc2VsZWN0b3JcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9hc3NpZ25ZZWFyTGF5ZXI6IGZ1bmN0aW9uKGNsYXNzU2VsZWN0b3IpIHtcbiAgICAgICAgdmFyICRib2R5ID0gdGhpcy4kZWxlbWVudC5maW5kKGNsYXNzU2VsZWN0b3IgKyAnYm9keScpO1xuICAgICAgICB2YXIgJHllYXJzVGVtcGxhdGUgPSAkYm9keS5maW5kKGNsYXNzU2VsZWN0b3IgKyAneWVhci1ncm91cCcpO1xuICAgICAgICB2YXIgY29scyA9ICR5ZWFyc1RlbXBsYXRlLmZpbmQoY2xhc3NTZWxlY3RvciArICd5ZWFyJykubGVuZ3RoO1xuICAgICAgICB2YXIgcm93cyA9IE1hdGguY2VpbCh0aGlzLl9vcHRpb24uaXRlbUNvdW50T2ZZZWFyIC8gY29scyk7XG5cbiAgICAgICAgdGhpcy5kYXRhT2ZZZWFyTGF5ZXIgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZTogJHllYXJzVGVtcGxhdGUuY2xvbmUodHJ1ZSksXG4gICAgICAgICAgICBhcHBlbmRlZFRhcmdldDogJHllYXJzVGVtcGxhdGUucGFyZW50KCksXG4gICAgICAgICAgICBmcmFtZToge1xuICAgICAgICAgICAgICAgIGNvbHM6IGNvbHMsXG4gICAgICAgICAgICAgICAgcm93czogcm93c1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBmb290ZXIgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbWVudCBUaGUgcm9vdCBlbGVtZW50IG9mIGNvbXBvbmVudFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1NlbGVjdG9yIEEgc2VsZWN0b3JcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NQcmVmaXggQSBwcmVmaXggZm9yIGNsYXNzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfYXNzaWduRm9vdGVyOiBmdW5jdGlvbigkZWxlbWVudCwgY2xhc3NTZWxlY3RvciwgY2xhc3NQcmVmaXgpIHtcbiAgICAgICAgdmFyICRmb290ZXIgPSAkZWxlbWVudC5maW5kKGNsYXNzU2VsZWN0b3IgKyAnZm9vdGVyJyksXG4gICAgICAgICAgICBmb290ZXJUZW1wbGF0ZSxcbiAgICAgICAgICAgIGRlZmF1bHRDbGFzc1ByZWZpeFJlZ0V4cDtcblxuICAgICAgICBpZiAoISRmb290ZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb290ZXJUZW1wbGF0ZSA9IENPTlNUQU5UUy5jYWxlbmRhckZvb3RlcjtcbiAgICAgICAgICAgIGRlZmF1bHRDbGFzc1ByZWZpeFJlZ0V4cCA9IENPTlNUQU5UUy5kZWZhdWx0Q2xhc3NQcmVmaXhSZWdFeHA7XG5cbiAgICAgICAgICAgICRmb290ZXIgPSAkKGZvb3RlclRlbXBsYXRlLnJlcGxhY2UoZGVmYXVsdENsYXNzUHJlZml4UmVnRXhwLCBjbGFzc1ByZWZpeCkpO1xuICAgICAgICAgICAgJGVsZW1lbnQuYXBwZW5kKCRmb290ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuJHRvZGF5ID0gJGZvb3Rlci5maW5kKGNsYXNzU2VsZWN0b3IgKyAndG9kYXknKTtcbiAgICAgICAgdGhpcy4kZm9vdGVyID0gJGZvb3RlcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0IGV2ZW50IGhhbmRsZXJzIGFuZCBhdHRhY2ggZXZlbnQgb24gZWxlbWVudFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2F0dGFjaEV2ZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVycy5jbGlja1JvbGxvdmVyQnRuID0gYmluZCh0aGlzLl9vbkNsaWNrUm9sbG92ZXJCdXR0b24sIHRoaXMpO1xuXG4gICAgICAgIHRoaXMuYXR0YWNoRXZlbnRUb1JvbGxvdmVyQnRuKCk7XG5cbiAgICAgICAgZXh0ZW5kKHRoaXMuaGFuZGxlcnMsIHtcbiAgICAgICAgICAgIGNsaWNrVGl0bGU6IGJpbmQodGhpcy5fb25DbGlja1RpdGxlLCB0aGlzKSxcbiAgICAgICAgICAgIGNsaWNrWWVhckxheWVyOiBiaW5kKHRoaXMuX29uQ2xpY2tZZWFyTGF5ZXIsIHRoaXMpLFxuICAgICAgICAgICAgY2xpY2tNb250aExheWVyOiBiaW5kKHRoaXMuX29uQ2xpY2tNb250aExheWVyLCB0aGlzKVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5pc0NsaWNrYWJsZVRpdGxlKSB7XG4gICAgICAgICAgICB0aGlzLmF0dGFjaEV2ZW50VG9UaXRsZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXR0YWNoRXZlbnRUb0JvZHkoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQXR0YWNoIGV2ZW50IG9uIHJvbGxvdmVyIGJ1dHRvbnMgaW4gXCJoZWFkZXJcIiBlbGVtZW50XG4gICAgICovXG4gICAgYXR0YWNoRXZlbnRUb1JvbGxvdmVyQnRuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gJy4nICsgdGhpcy5fb3B0aW9uLmNsYXNzUHJlZml4ICsgJ3JvbGxvdmVyJztcbiAgICAgICAgdmFyIGJ0bnMgPSB0aGlzLiRoZWFkZXIuZmluZChzZWxlY3Rvcik7XG5cbiAgICAgICAgYnRucy5vbignY2xpY2snLCB0aGlzLmhhbmRsZXJzLmNsaWNrUm9sbG92ZXJCdG4pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZXRhY2ggZXZlbnQgb24gcm9sbG92ZXIgYnV0dG9ucyBpbiBcImhlYWRlclwiIGVsZW1lbnRcbiAgICAgKi9cbiAgICBkZXRhY2hFdmVudFRvUm9sbG92ZXJCdG46IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSAnLicgKyB0aGlzLl9vcHRpb24uY2xhc3NQcmVmaXggKyAncm9sbG92ZXInO1xuICAgICAgICB2YXIgYnRucyA9IHRoaXMuJGhlYWRlci5maW5kKHNlbGVjdG9yKTtcblxuICAgICAgICBidG5zLm9mZignY2xpY2snLCB0aGlzLmhhbmRsZXJzLmNsaWNrUm9sbG92ZXJCdG4pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2ggZXZlbnQgb24gdGl0bGUgaW4gXCJoZWFkZXJcIiBlbGVtZW50XG4gICAgICovXG4gICAgYXR0YWNoRXZlbnRUb1RpdGxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy4kdGl0bGUub24oJ2NsaWNrJywgdGhpcy5oYW5kbGVycy5jbGlja1RpdGxlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGV0YWNoIGV2ZW50IG9uIHRpdGxlIGluIFwiaGVhZGVyXCIgZWxlbWVudFxuICAgICAqL1xuICAgIGRldGFjaEV2ZW50VG9UaXRsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuJHRpdGxlLm9mZignY2xpY2snLCB0aGlzLmhhbmRsZXJzLmNsaWNrVGl0bGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2ggZXZlbnQgb24gdGl0bGUgaW4gXCJib2R5XCIgZWxlbWVudCAobW9udGggJiB5ZWFyIGxheWVyKVxuICAgICAqL1xuICAgIGF0dGFjaEV2ZW50VG9Cb2R5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNsYXNzUHJlZml4ID0gJy4nICsgdGhpcy5fb3B0aW9uLmNsYXNzUHJlZml4O1xuICAgICAgICB2YXIgeWVhckxheWVyID0gdGhpcy5kYXRhT2ZZZWFyTGF5ZXIuYXBwZW5kZWRUYXJnZXQ7XG4gICAgICAgIHZhciBtb250aExheWVyID0gdGhpcy5kYXRhT2ZNb250aExheWVyLmFwcGVuZGVkVGFyZ2V0O1xuXG4gICAgICAgIHllYXJMYXllci5vbignY2xpY2snLCBjbGFzc1ByZWZpeCArICd5ZWFyJywgdGhpcy5oYW5kbGVycy5jbGlja1llYXJMYXllcik7XG4gICAgICAgIG1vbnRoTGF5ZXIub24oJ2NsaWNrJywgY2xhc3NQcmVmaXggKyAnbW9udGgnLCB0aGlzLmhhbmRsZXJzLmNsaWNrTW9udGhMYXllcik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERldGFjaCBldmVudCBvbiB0aXRsZSBpbiBcImJvZHlcIiBlbGVtZW50IChtb250aCAmIHllYXIgbGF5ZXIpXG4gICAgICovXG4gICAgZGV0YWNoRXZlbnRUb0JvZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2xhc3NQcmVmaXggPSAnLicgKyB0aGlzLl9vcHRpb24uY2xhc3NQcmVmaXg7XG4gICAgICAgIHZhciB5ZWFyTGF5ZXIgPSB0aGlzLmRhdGFPZlllYXJMYXllci5hcHBlbmRlZFRhcmdldDtcbiAgICAgICAgdmFyIG1vbnRoTGF5ZXIgPSB0aGlzLmRhdGFPZk1vbnRoTGF5ZXIuYXBwZW5kZWRUYXJnZXQ7XG5cbiAgICAgICAgeWVhckxheWVyLm9mZignY2xpY2snLCBjbGFzc1ByZWZpeCArICd5ZWFyJywgdGhpcy5oYW5kbGVycy5jbGlja1llYXJMYXllcik7XG4gICAgICAgIG1vbnRoTGF5ZXIub2ZmKCdjbGljaycsIGNsYXNzUHJlZml4ICsgJ21vbnRoJywgdGhpcy5oYW5kbGVycy5jbGlja01vbnRoTGF5ZXIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIC0gY2xpY2sgb24gcm9sbG92ZXIgYnV0dG9uc1xuICAgICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnQgLSBNb3VzZSBldmVudFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX29uQ2xpY2tSb2xsb3ZlckJ1dHRvbjogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdmFyIHJlbGF0aXZlTW9udGhWYWx1ZSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShDT05TVEFOVFMucmVsYXRpdmVNb250aFZhbHVlS2V5KTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5kcmF3KDAsIHJlbGF0aXZlTW9udGhWYWx1ZSwgdHJ1ZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXIgLSBjbGljayBvbiB0aXRsZVxuICAgICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnQgLSBNb3VzZSBldmVudFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX29uQ2xpY2tUaXRsZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdmFyIHNob3duTGF5ZXJJZHggPSB0aGlzLnNob3duTGF5ZXJJZHg7XG4gICAgICAgIHZhciBkYXRlO1xuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgaWYgKHNob3duTGF5ZXJJZHggPT09IDIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNob3duTGF5ZXJJZHggPSAoc2hvd25MYXllcklkeCAhPT0gMikgPyAoc2hvd25MYXllcklkeCArIDEpIDogMDtcbiAgICAgICAgZGF0ZSA9IHRoaXMuZ2V0RGF0ZSgpO1xuXG4gICAgICAgIHRoaXMuZHJhdyhkYXRlLnllYXIsIGRhdGUubW9udGgsIGZhbHNlLCBzaG93bkxheWVySWR4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlciAtIGNsaWNrIG9uIG1vbnRoJ3MgbGF5ZXJcbiAgICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGV2ZW50IC0gTW91c2UgZXZlbnRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9vbkNsaWNrWWVhckxheWVyOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgcmVsYXRpdmVNb250aFZhbHVlID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKENPTlNUQU5UUy5yZWxhdGl2ZU1vbnRoVmFsdWVLZXkpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmRyYXcoMCwgcmVsYXRpdmVNb250aFZhbHVlLCB0cnVlLCAxKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlciAtIGNsaWNrIG9uIHllYXIncyBsYXllclxuICAgICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnQgLSBNb3VzZSBldmVudFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX29uQ2xpY2tNb250aExheWVyOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgcmVsYXRpdmVNb250aFZhbHVlID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKENPTlNUQU5UUy5yZWxhdGl2ZU1vbnRoVmFsdWVLZXkpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmRyYXcoMCwgcmVsYXRpdmVNb250aFZhbHVlLCB0cnVlLCAwKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IEhhc2ggZGF0YSB0byBkcm93IGNhbGVuZGFyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHllYXIgQSB5ZWFyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1vbnRoIEEgbW9udGhcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1JlbGF0aXZlXSAgV2hldGhlciBpcyByZWxhdGVkIG90aGVyIHZhbHVlIG9yIG5vdFxuICAgICAqIEByZXR1cm5zIHt7eWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyfX0gQSBkYXRlIGhhc2hcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXREYXRlRm9yRHJhd2luZzogZnVuY3Rpb24oeWVhciwgbW9udGgsIGlzUmVsYXRpdmUpIHtcbiAgICAgICAgdmFyIG5EYXRlID0gdGhpcy5nZXREYXRlKCksXG4gICAgICAgICAgICByZWxhdGl2ZURhdGU7XG5cbiAgICAgICAgbkRhdGUuZGF0ZSA9IDE7XG4gICAgICAgIGlmICghdXRpbC5pc051bWJlcih5ZWFyKSAmJiAhdXRpbC5pc051bWJlcihtb250aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBuRGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1JlbGF0aXZlKSB7XG4gICAgICAgICAgICByZWxhdGl2ZURhdGUgPSBjYWxlbmRhclV0aWxzLmdldFJlbGF0aXZlRGF0ZSh5ZWFyLCBtb250aCwgMCwgbkRhdGUpO1xuICAgICAgICAgICAgbkRhdGUueWVhciA9IHJlbGF0aXZlRGF0ZS55ZWFyO1xuICAgICAgICAgICAgbkRhdGUubW9udGggPSByZWxhdGl2ZURhdGUubW9udGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuRGF0ZS55ZWFyID0geWVhciB8fCBuRGF0ZS55ZWFyO1xuICAgICAgICAgICAgbkRhdGUubW9udGggPSBtb250aCB8fCBuRGF0ZS5tb250aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuRGF0ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSnVkZ2UgdG8gcmVkcmF3IGNhbGVuZGFyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHllYXIgQSB5ZWFyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1vbnRoIEEgbW9udGhcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gcmVmbG93XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaXNOZWNlc3NhcnlGb3JEcmF3aW5nOiBmdW5jdGlvbih5ZWFyLCBtb250aCkge1xuICAgICAgICB2YXIgc2hvd25EYXRlID0gdGhpcy5fc2hvd25EYXRlO1xuXG4gICAgICAgIHJldHVybiAoc2hvd25EYXRlLnllYXIgIT09IHllYXIgfHwgc2hvd25EYXRlLm1vbnRoICE9PSBtb250aCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERyYXcgY2FsZW5kYXIgdGV4dFxuICAgICAqIEBwYXJhbSB7e3llYXI6IG51bWJlciwgbW9udGg6IG51bWJlcn19IGRhdGVGb3JEcmF3aW5nIFRoYSBoYXNoIHRoYXQgc2hvdyB1cCBvbiBjYWxlbmRhclxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NldENhbGVuZGFyVGV4dDogZnVuY3Rpb24oZGF0ZUZvckRyYXdpbmcpIHtcbiAgICAgICAgdmFyIHllYXIgPSBkYXRlRm9yRHJhd2luZy55ZWFyLFxuICAgICAgICAgICAgbW9udGggPSBkYXRlRm9yRHJhd2luZy5tb250aDtcblxuICAgICAgICB0aGlzLl9zZXRDYWxlbmRhclRvZGF5KCk7XG4gICAgICAgIHRoaXMuX3NldENhbGVuZGFyVGl0bGUoeWVhciwgbW9udGgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEcmF3IGRhdGVzIGJ5IG1vbnRoLlxuICAgICAqIEBwYXJhbSB7e3llYXI6IG51bWJlciwgbW9udGg6IG51bWJlcn19IGRhdGVGb3JEcmF3aW5nIEEgZGF0ZSB0byBkcmF3XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzUHJlZml4IEEgY2xhc3MgcHJlZml4XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZHJhd0RhdGVzOiBmdW5jdGlvbihkYXRlRm9yRHJhd2luZywgY2xhc3NQcmVmaXgpIHtcbiAgICAgICAgdmFyIHllYXIgPSBkYXRlRm9yRHJhd2luZy55ZWFyLFxuICAgICAgICAgICAgbW9udGggPSBkYXRlRm9yRHJhd2luZy5tb250aCxcbiAgICAgICAgICAgIGRheUluV2VlayA9IDAsXG4gICAgICAgICAgICBkYXRlUHJldk1vbnRoID0gY2FsZW5kYXJVdGlscy5nZXRSZWxhdGl2ZURhdGUoMCwgLTEsIDAsIGRhdGVGb3JEcmF3aW5nKSxcbiAgICAgICAgICAgIGRhdGVOZXh0TW9udGggPSBjYWxlbmRhclV0aWxzLmdldFJlbGF0aXZlRGF0ZSgwLCAxLCAwLCBkYXRlRm9yRHJhd2luZyksXG4gICAgICAgICAgICBkYXRlcyA9IFtdLFxuICAgICAgICAgICAgZmlyc3REYXkgPSBjYWxlbmRhclV0aWxzLmdldEZpcnN0RGF5KHllYXIsIG1vbnRoKSxcbiAgICAgICAgICAgIGluZGV4T2ZMYXN0RGF0ZSA9IHRoaXMuX2ZpbGxEYXRlcyh5ZWFyLCBtb250aCwgZGF0ZXMpO1xuXG4gICAgICAgIHV0aWwuZm9yRWFjaChkYXRlcywgZnVuY3Rpb24oZGF0ZSwgaSkge1xuICAgICAgICAgICAgdmFyIGlzUHJldk1vbnRoID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNOZXh0TW9udGggPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAkZGF0ZUNvbnRhaW5lciA9ICQodGhpcy5fJGRhdGVDb250YWluZXJFbGVtZW50W2ldKSxcbiAgICAgICAgICAgICAgICB0ZW1wWWVhciA9IHllYXIsXG4gICAgICAgICAgICAgICAgdGVtcE1vbnRoID0gbW9udGgsXG4gICAgICAgICAgICAgICAgZXZlbnREYXRhO1xuXG4gICAgICAgICAgICBpZiAoaSA8IGZpcnN0RGF5KSB7XG4gICAgICAgICAgICAgICAgaXNQcmV2TW9udGggPSB0cnVlO1xuICAgICAgICAgICAgICAgICRkYXRlQ29udGFpbmVyLmFkZENsYXNzKGNsYXNzUHJlZml4ICsgQ09OU1RBTlRTLnByZXZNb250aCk7XG4gICAgICAgICAgICAgICAgdGVtcFllYXIgPSBkYXRlUHJldk1vbnRoLnllYXI7XG4gICAgICAgICAgICAgICAgdGVtcE1vbnRoID0gZGF0ZVByZXZNb250aC5tb250aDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA+IGluZGV4T2ZMYXN0RGF0ZSkge1xuICAgICAgICAgICAgICAgIGlzTmV4dE1vbnRoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAkZGF0ZUNvbnRhaW5lci5hZGRDbGFzcyhjbGFzc1ByZWZpeCArIENPTlNUQU5UUy5uZXh0TW9udGgpO1xuICAgICAgICAgICAgICAgIHRlbXBZZWFyID0gZGF0ZU5leHRNb250aC55ZWFyO1xuICAgICAgICAgICAgICAgIHRlbXBNb250aCA9IGRhdGVOZXh0TW9udGgubW9udGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFdlZWtlbmRcbiAgICAgICAgICAgIHRoaXMuX3NldFdlZWtlbmQoZGF5SW5XZWVrLCAkZGF0ZUNvbnRhaW5lciwgY2xhc3NQcmVmaXgpO1xuXG4gICAgICAgICAgICAvLyBUb2RheVxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzVG9kYXkodGVtcFllYXIsIHRlbXBNb250aCwgZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAkZGF0ZUNvbnRhaW5lci5hZGRDbGFzcyhjbGFzc1ByZWZpeCArICd0b2RheScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBldmVudERhdGEgPSB7XG4gICAgICAgICAgICAgICAgJGRhdGU6ICQodGhpcy5fJGRhdGVFbGVtZW50LmdldChpKSksXG4gICAgICAgICAgICAgICAgJGRhdGVDb250YWluZXI6ICRkYXRlQ29udGFpbmVyLFxuICAgICAgICAgICAgICAgIHllYXI6IHRlbXBZZWFyLFxuICAgICAgICAgICAgICAgIG1vbnRoOiB0ZW1wTW9udGgsXG4gICAgICAgICAgICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgICAgICAgICAgICBpc1ByZXZNb250aDogaXNQcmV2TW9udGgsXG4gICAgICAgICAgICAgICAgaXNOZXh0TW9udGg6IGlzTmV4dE1vbnRoLFxuICAgICAgICAgICAgICAgIGh0bWw6IGRhdGVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAkKGV2ZW50RGF0YS4kZGF0ZSkuaHRtbChldmVudERhdGEuaHRtbC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIGRheUluV2VlayA9IChkYXlJbldlZWsgKyAxKSAlIDc7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmlyZSBkcmF3IGV2ZW50IHdoZW4gY2FsZW5kYXIgZHJhdyBlYWNoIGRhdGUuXG4gICAgICAgICAgICAgKiBAYXBpXG4gICAgICAgICAgICAgKiBAZXZlbnQgQ2FsZW5kYXIjZHJhd1xuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgQSBuYW1lIG9mIGN1c3RvbSBldmVudFxuICAgICAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBpc1ByZXZNb250aCBXaGV0aGVyIHRoZSBkcmF3IGRheSBpcyBsYXN0IG1vbnRoIG9yIG5vdFxuICAgICAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBpc05leHRNb250aCBXZWh0ZXIgdGhlIGRyYXcgZGF5IGlzIG5leHQgbW9udGggb3Igbm90XG4gICAgICAgICAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJGRhdGUgVGhlIGVsZW1lbnQgaGF2ZSBkYXRlIGh0bWxcbiAgICAgICAgICAgICAqIEBwYXJhbSB7alF1ZXJ5fSAkZGF0ZUNvbnRhaW5lciBDaGlsZCBlbGVtZW50IHRoYXQgaGFzIGNsYXNzTmFtZSBbcHJlZml4XXdlZWsuXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSXQgaXMgcG9zc2libGUgdGhpcyBlbGVtZW50IGVxdWVsIGVsRGF0ZS5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkYXRlIEEgZHJhdyBkYXRlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbW9udGggQSBkcmF3IG1vbnRoXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0geWVhciBBIGRyYXcgeWVhclxuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGh0bWwgQSBodG1sIHN0cmluZ1xuICAgICAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICAgICAqIC8vIGRyYXcgY3VzdG9tIGV2ZW4gaGFuZGxlcnNcbiAgICAgICAgICAgICAqIGNhbGVuZGFyLm9uKCdkcmF3JywgZnVuY3Rpb24oZHJhd0V2ZW50KXsgLi4uIH0pO1xuICAgICAgICAgICAgICoqL1xuICAgICAgICAgICAgdGhpcy5maXJlKCdkcmF3JywgZXZlbnREYXRhKTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEplZGdlIHRoZSBpbnB1dCBkYXRlIGlzIHRvZGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5ZWFyIEEgeWVhclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtb250aCBBIG1vbnRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRhdGUgQSBkYXRlXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaXNUb2RheTogZnVuY3Rpb24oeWVhciwgbW9udGgsIGRhdGUpIHtcbiAgICAgICAgdmFyIHRvZGF5ID0gY2FsZW5kYXJVdGlscy5nZXREYXRlSGFzaCgpO1xuICAgICAgICB2YXIgaXNZZWFyID0geWVhciA/ICh0b2RheS55ZWFyID09PSB5ZWFyKSA6IHRydWU7XG4gICAgICAgIHZhciBpc01vbnRoID0gbW9udGggPyAodG9kYXkubW9udGggPT09IG1vbnRoKSA6IHRydWU7XG4gICAgICAgIHZhciBpc0RhdGUgPSBkYXRlID8gKHRvZGF5LmRhdGUgPT09IGRhdGUpIDogdHJ1ZTtcblxuICAgICAgICByZXR1cm4gaXNZZWFyICYmIGlzTW9udGggJiYgaXNEYXRlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNYWtlIG9uZSB3ZWVrIHRlbXBhdGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHllYXIgIEEgeWVhclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtb250aCBBIG1vbnRoXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2V0V2Vla3M6IGZ1bmN0aW9uKHllYXIsIG1vbnRoKSB7XG4gICAgICAgIHZhciAkZWxXZWVrLFxuICAgICAgICAgICAgd2Vla3MgPSBjYWxlbmRhclV0aWxzLmdldFdlZWtzKHllYXIsIG1vbnRoKSxcbiAgICAgICAgICAgIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB3ZWVrczsgaSArPSAxKSB7XG4gICAgICAgICAgICAkZWxXZWVrID0gdGhpcy4kd2Vla1RlbXBsYXRlLmNsb25lKHRydWUpO1xuICAgICAgICAgICAgJGVsV2Vlay5hcHBlbmRUbyh0aGlzLiR3ZWVrQXBwZW5kVGFyZ2V0KTtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtFbGVtZW50cy5wdXNoKCRlbFdlZWspO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNhdmUgZHJhdyBkYXRlcyB0byBhcnJheVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB5ZWFyIEEgZHJhdyB5ZWFyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vbnRoIEEgZHJhdyBtb250aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGVzIEEgZHJhdyBkYXRlXG4gICAgICogQHJldHVybnMge251bWJlcn0gaW5kZXggb2YgbGFzdCBkYXRlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZmlsbERhdGVzOiBmdW5jdGlvbih5ZWFyLCBtb250aCwgZGF0ZXMpIHtcbiAgICAgICAgdmFyIGZpcnN0RGF5ID0gY2FsZW5kYXJVdGlscy5nZXRGaXJzdERheSh5ZWFyLCBtb250aCksXG4gICAgICAgICAgICBsYXN0RGF5ID0gY2FsZW5kYXJVdGlscy5nZXRMYXN0RGF5KHllYXIsIG1vbnRoKSxcbiAgICAgICAgICAgIGxhc3REYXRlID0gY2FsZW5kYXJVdGlscy5nZXRMYXN0RGF0ZSh5ZWFyLCBtb250aCksXG4gICAgICAgICAgICBkYXRlUHJldk1vbnRoID0gY2FsZW5kYXJVdGlscy5nZXRSZWxhdGl2ZURhdGUoMCwgLTEsIDAsIHtcbiAgICAgICAgICAgICAgICB5ZWFyOiB5ZWFyLFxuICAgICAgICAgICAgICAgIG1vbnRoOiBtb250aCxcbiAgICAgICAgICAgICAgICBkYXRlOiAxXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHByZXZNb250aExhc3REYXRlID0gY2FsZW5kYXJVdGlscy5nZXRMYXN0RGF0ZShkYXRlUHJldk1vbnRoLnllYXIsIGRhdGVQcmV2TW9udGgubW9udGgpLFxuICAgICAgICAgICAgaW5kZXhPZkxhc3REYXRlLFxuICAgICAgICAgICAgaTtcblxuICAgICAgICBpZiAoZmlyc3REYXkgPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSBwcmV2TW9udGhMYXN0RGF0ZSAtIGZpcnN0RGF5OyBpIDwgcHJldk1vbnRoTGFzdERhdGU7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGRhdGVzLnB1c2goaSArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBsYXN0RGF0ZSArIDE7IGkgKz0gMSkge1xuICAgICAgICAgICAgZGF0ZXMucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleE9mTGFzdERhdGUgPSBkYXRlcy5sZW5ndGggLSAxO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgNyAtIGxhc3REYXk7IGkgKz0gMSkge1xuICAgICAgICAgICAgZGF0ZXMucHVzaChpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRleE9mTGFzdERhdGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldCB3ZWVrZW5kXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRheSBBIGRhdGVcbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gJGRhdGVDb250YWluZXIgQSBjb250YWluZXIgZWxlbWVudCBmb3IgZGF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1ByZWZpeCBBIHByZWZpeCBvZiBjbGFzc1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NldFdlZWtlbmQ6IGZ1bmN0aW9uKGRheSwgJGRhdGVDb250YWluZXIsIGNsYXNzUHJlZml4KSB7XG4gICAgICAgIGlmIChkYXkgPT09IDApIHtcbiAgICAgICAgICAgICRkYXRlQ29udGFpbmVyLmFkZENsYXNzKGNsYXNzUHJlZml4ICsgJ3N1bicpO1xuICAgICAgICB9IGVsc2UgaWYgKGRheSA9PT0gNikge1xuICAgICAgICAgICAgJGRhdGVDb250YWluZXIuYWRkQ2xhc3MoY2xhc3NQcmVmaXggKyAnc2F0Jyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgY2FsZW5kYXJcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX3dlZWtFbGVtZW50cyA9IFtdO1xuICAgICAgICB0aGlzLiR3ZWVrQXBwZW5kVGFyZ2V0LmVtcHR5KCk7XG4gICAgICAgIHRoaXMuZGF0YU9mTW9udGhMYXllci5hcHBlbmRlZFRhcmdldC5lbXB0eSgpO1xuICAgICAgICB0aGlzLmRhdGFPZlllYXJMYXllci5hcHBlbmRlZFRhcmdldC5lbXB0eSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEcmF3IHRpdGxlIHdpdGggZm9ybWF0IG9wdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0geWVhciBBIHZhbHVlIG9mIHllYXIgKGV4LiAyMDA4KVxuICAgICAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpfSBtb250aCBBIG1vbnRoICgxIH4gMTIpXG4gICAgICogQHByaXZhdGVcbiAgICAgKiovXG4gICAgX3NldENhbGVuZGFyVGl0bGU6IGZ1bmN0aW9uKHllYXIsIG1vbnRoKSB7XG4gICAgICAgIHZhciBvcHRpb24gPSB0aGlzLl9vcHRpb24sXG4gICAgICAgICAgICB0aXRsZUZvcm1hdCA9IG9wdGlvbi50aXRsZUZvcm1hdCxcbiAgICAgICAgICAgIHJlcGxhY2VNYXAsXG4gICAgICAgICAgICByZWc7XG5cbiAgICAgICAgbW9udGggPSBjYWxlbmRhclV0aWxzLnByZXBlbmRMZWFkaW5nWmVybyhtb250aCk7XG4gICAgICAgIHJlcGxhY2VNYXAgPSB0aGlzLl9nZXRSZXBsYWNlTWFwKHllYXIsIG1vbnRoKTtcblxuICAgICAgICByZWcgPSBDT05TVEFOVFMudGl0bGVSZWdFeHA7XG4gICAgICAgIHRoaXMuX3NldERhdGVUZXh0SW5DYWxlbmRhcih0aGlzLiR0aXRsZSwgdGl0bGVGb3JtYXQsIHJlcGxhY2VNYXAsIHJlZyk7XG5cbiAgICAgICAgcmVnID0gQ09OU1RBTlRTLnRpdGxlWWVhclJlZ0V4cDtcbiAgICAgICAgdGhpcy5fc2V0RGF0ZVRleHRJbkNhbGVuZGFyKHRoaXMuJHRpdGxlWWVhciwgb3B0aW9uLnllYXJUaXRsZUZvcm1hdCwgcmVwbGFjZU1hcCwgcmVnKTtcblxuICAgICAgICByZWcgPSBDT05TVEFOVFMudGl0bGVNb250aFJlZ0V4cDtcbiAgICAgICAgdGhpcy5fc2V0RGF0ZVRleHRJbkNhbGVuZGFyKHRoaXMuJHRpdGxlTW9udGgsIG9wdGlvbi5tb250aFRpdGxlRm9ybWF0LCByZXBsYWNlTWFwLCByZWcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGl0bGVcbiAgICAgKiBAcGFyYW0ge2pRdWVyeXxIVE1MRWxlbWVudH0gZWxlbWVudCBBIHVwZGF0ZSBlbGVtZW50XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZvcm0gQSB1cGRhdGUgZm9ybVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgQSBvYmplY3QgdGhhdCBoYXMgdmFsdWUgbWF0Y2hlZCByZWdFeHBcbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnIEEgcmVnRXhwIHRvIGNoYWduZSBmb3JtXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2V0RGF0ZVRleHRJbkNhbGVuZGFyOiBmdW5jdGlvbihlbGVtZW50LCBmb3JtLCBtYXAsIHJlZykge1xuICAgICAgICB2YXIgdGl0bGUsXG4gICAgICAgICAgICAkZWwgPSAkKGVsZW1lbnQpO1xuXG4gICAgICAgIGlmICghJGVsLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRpdGxlID0gY2FsZW5kYXJVdGlscy5nZXRDb252ZXJ0ZWRUaXRsZShmb3JtLCBtYXAsIHJlZyk7XG4gICAgICAgICRlbC50ZXh0KHRpdGxlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IG1hcCBkYXRhIGZvciBmb3JtXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB5ZWFyIEEgeWVhclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbW9udGggQSBtb250aFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gW2RhdGVdIEEgZGF5XG4gICAgICogQHJldHVybnMge09iamVjdH0gUmVwbGFjZU1hcFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2dldFJlcGxhY2VNYXA6IGZ1bmN0aW9uKHllYXIsIG1vbnRoLCBkYXRlKSB7XG4gICAgICAgIHZhciBvcHRpb24gPSB0aGlzLl9vcHRpb24sXG4gICAgICAgICAgICB5ZWFyU3ViID0gKHllYXIudG9TdHJpbmcoKSkuc3Vic3RyKDIsIDIpLFxuICAgICAgICAgICAgbW9udGhMYWJlbCA9IG9wdGlvbi5tb250aFRpdGxlc1ttb250aCAtIDFdLFxuICAgICAgICAgICAgbGFiZWxLZXkgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRhdGUgfHwgMSkuZ2V0RGF5KCksXG4gICAgICAgICAgICBkYXlMYWJlbCA9IG9wdGlvbi5kYXlUaXRsZXNbbGFiZWxLZXldO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5eXl5OiB5ZWFyLFxuICAgICAgICAgICAgeXk6IHllYXJTdWIsXG4gICAgICAgICAgICBtbTogbW9udGgsXG4gICAgICAgICAgICBtOiBOdW1iZXIobW9udGgpLFxuICAgICAgICAgICAgTTogbW9udGhMYWJlbCxcbiAgICAgICAgICAgIGRkOiBkYXRlLFxuICAgICAgICAgICAgZDogTnVtYmVyKGRhdGUpLFxuICAgICAgICAgICAgRDogZGF5TGFiZWxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0IHRvZGF5XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2V0Q2FsZW5kYXJUb2RheTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciAkdG9kYXkgPSB0aGlzLiR0b2RheSxcbiAgICAgICAgICAgIHRvZGF5Rm9ybWF0LFxuICAgICAgICAgICAgdG9kYXksXG4gICAgICAgICAgICB5ZWFyLFxuICAgICAgICAgICAgbW9udGgsXG4gICAgICAgICAgICBkYXRlLFxuICAgICAgICAgICAgcmVwbGFjZU1hcCxcbiAgICAgICAgICAgIHJlZztcblxuICAgICAgICBpZiAoISR0b2RheS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvZGF5ID0gY2FsZW5kYXJVdGlscy5nZXREYXRlSGFzaCgpO1xuICAgICAgICB5ZWFyID0gdG9kYXkueWVhcjtcbiAgICAgICAgbW9udGggPSBjYWxlbmRhclV0aWxzLnByZXBlbmRMZWFkaW5nWmVybyh0b2RheS5tb250aCk7XG4gICAgICAgIGRhdGUgPSBjYWxlbmRhclV0aWxzLnByZXBlbmRMZWFkaW5nWmVybyh0b2RheS5kYXRlKTtcbiAgICAgICAgdG9kYXlGb3JtYXQgPSB0aGlzLl9vcHRpb24udG9kYXlGb3JtYXQ7XG4gICAgICAgIHJlcGxhY2VNYXAgPSB0aGlzLl9nZXRSZXBsYWNlTWFwKHllYXIsIG1vbnRoLCBkYXRlKTtcbiAgICAgICAgcmVnID0gQ09OU1RBTlRTLnRvZGF5UmVnRXhwO1xuICAgICAgICB0aGlzLl9zZXREYXRlVGV4dEluQ2FsZW5kYXIoJHRvZGF5LCB0b2RheUZvcm1hdCwgcmVwbGFjZU1hcCwgcmVnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0IHRpdGxlIG9uIHllYXIncyBsYXllclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5ZWFyIC0gWWVhclxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NldFRpdGxlT25ZZWFyTGF5ZXI6IGZ1bmN0aW9uKHllYXIpIHtcbiAgICAgICAgdmFyIGl0ZW1Db3VudE9mWWVhciA9IHRoaXMuX2dldEluZm9PZlllYXJSYW5nZSh5ZWFyKTtcbiAgICAgICAgdmFyIHN0YXJ0WWVhclRleHQgPSB0aGlzLl9nZXRDb252ZXJ0ZWRZZWFyVGl0bGUoaXRlbUNvdW50T2ZZZWFyLnN0YXJ0WWVhcik7XG4gICAgICAgIHZhciBlbmRZZWFyVGV4dCA9IHRoaXMuX2dldENvbnZlcnRlZFllYXJUaXRsZShpdGVtQ291bnRPZlllYXIuZW5kWWVhcik7XG4gICAgICAgIHZhciB0aXRsZSA9IHN0YXJ0WWVhclRleHQgKyAnIC0gJyArIGVuZFllYXJUZXh0O1xuXG4gICAgICAgIHRoaXMuJHRpdGxlLnRleHQodGl0bGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXQgY2xhc3MgbmFtZSBvbiB0aXRsZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaG93bkxheWVySWR4IC0gWWVhclxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NldENsYXNzTmFtZU9uVGl0bGU6IGZ1bmN0aW9uKHNob3duTGF5ZXJJZHgpIHtcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMuX29wdGlvbi5jbGFzc1ByZWZpeCArIENPTlNUQU5UUy5jbGlja2FibGU7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzQ2xpY2thYmxlVGl0bGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaG93bkxheWVySWR4ICE9PSAyKSB7XG4gICAgICAgICAgICB0aGlzLiR0aXRsZS5hZGRDbGFzcyhjbGFzc05hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4kdGl0bGUucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgY29udmVydGVkIHllYXIgdGV4dCBvbiB5ZWFyIGFuZCBtb250aCBsYXllclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5ZWFyIC0gWWVhclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IENvbnZlcnRlZCB5ZWFyIHRleHRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXRDb252ZXJ0ZWRZZWFyVGl0bGU6IGZ1bmN0aW9uKHllYXIpIHtcbiAgICAgICAgdmFyIG9wdGlvbiA9IHRoaXMuX29wdGlvbjtcbiAgICAgICAgdmFyIHJlcGxhY2VNYXAsIHJlZztcblxuICAgICAgICByZXBsYWNlTWFwID0gdGhpcy5fZ2V0UmVwbGFjZU1hcCh5ZWFyKTtcbiAgICAgICAgcmVnID0gQ09OU1RBTlRTLnRpdGxlWWVhclJlZ0V4cDtcblxuICAgICAgICByZXR1cm4gY2FsZW5kYXJVdGlscy5nZXRDb252ZXJ0ZWRUaXRsZShvcHRpb24ueWVhclRpdGxlRm9ybWF0LCByZXBsYWNlTWFwLCByZWcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgeWVhcnMgaW5mbyBieSBcIml0ZW1Db3VudE9mWWVhclwiIG9wdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5ZWFyIC0gWWVhclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IEluZm8gb2YgeWVhcidzIHJhbmdlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZ2V0SW5mb09mWWVhclJhbmdlOiBmdW5jdGlvbih5ZWFyKSB7XG4gICAgICAgIHZhciBmcmFtZUluZm8gPSB0aGlzLmRhdGFPZlllYXJMYXllci5mcmFtZTtcbiAgICAgICAgdmFyIGNvbHMgPSBmcmFtZUluZm8uY29scztcbiAgICAgICAgdmFyIHJvd3MgPSBmcmFtZUluZm8ucm93cztcbiAgICAgICAgdmFyIGJhc2VJZHggPSAoY29scyAqIE1hdGguZmxvb3Iocm93cyAvIDIpKSArIE1hdGguZmxvb3IoY29scyAvIDIpO1xuICAgICAgICB2YXIgc3RhcnRZZWFyID0geWVhciAtIGJhc2VJZHg7XG4gICAgICAgIHZhciBlbmRZZWFyID0gc3RhcnRZZWFyICsgKGNvbHMgKiByb3dzKSAtIDE7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0WWVhcjogc3RhcnRZZWFyLFxuICAgICAgICAgICAgZW5kWWVhcjogZW5kWWVhclxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgaW5kZXggb2YgY3VycmVudCBzaG93biBsYXllciBieSBsYXllcidzIHR5cGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHR5cGUgLSBUeXBlIG9mIGxheWVyXG4gICAgICogQHJldHVybnMge251bWJlcn0gSW5kZXggb2Ygc2hvd24gbGF5ZXJcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXRJbmRleE9mU2hvd25MYXllcjogZnVuY3Rpb24odHlwZSkge1xuICAgICAgICByZXR1cm4gKHR5cGUgPyB1dGlsLmluQXJyYXkodHlwZSwgQ09OU1RBTlRTLmxheWVyS2V5cykgOiB0aGlzLnNob3duTGF5ZXJJZHgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEcmF3IGhlYWRlciBlbGVtZW50XG4gICAgICogQHBhcmFtIHt7eWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyfX0gZGF0ZUZvckRyYXdpbmcgLSBUaGUgaGFzaCB0aGF0IHNob3cgdXAgb24gY2FsZW5kYXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2hvd25MYXllcklkeCAtIEluZGV4IG9mIHNob3duIGxheWVyXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZHJhd0hlYWRlcjogZnVuY3Rpb24oZGF0ZUZvckRyYXdpbmcsIHNob3duTGF5ZXJJZHgpIHtcbiAgICAgICAgdmFyIGNsYXNzU2VsZWN0b3IgPSAnLicgKyB0aGlzLl9vcHRpb24uY2xhc3NQcmVmaXggKyAnYnRuLSc7XG4gICAgICAgIHZhciBwcmV2QnRuID0gdGhpcy4kaGVhZGVyLmZpbmQoY2xhc3NTZWxlY3RvciArIENPTlNUQU5UUy5wcmV2KTtcbiAgICAgICAgdmFyIG5leHRCdG4gPSB0aGlzLiRoZWFkZXIuZmluZChjbGFzc1NlbGVjdG9yICsgQ09OU1RBTlRTLm5leHQpO1xuICAgICAgICB2YXIga2V5ID0gQ09OU1RBTlRTLnJlbGF0aXZlTW9udGhWYWx1ZUtleTtcbiAgICAgICAgdmFyIGl0ZW1Db3VudE9mWWVhciA9IHRoaXMuX29wdGlvbi5pdGVtQ291bnRPZlllYXI7XG4gICAgICAgIHZhciBwcmV2VmFsdWUsIG5leHRWYWx1ZTtcblxuICAgICAgICB0aGlzLl9zZXRDbGFzc05hbWVPblRpdGxlKHNob3duTGF5ZXJJZHgpO1xuXG4gICAgICAgIHN3aXRjaCAoc2hvd25MYXllcklkeCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHRoaXMuX3NldENhbGVuZGFyVGV4dChkYXRlRm9yRHJhd2luZyk7XG4gICAgICAgICAgICAgICAgcHJldlZhbHVlID0gLTE7XG4gICAgICAgICAgICAgICAgbmV4dFZhbHVlID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICB0aGlzLiR0aXRsZS50ZXh0KHRoaXMuX2dldENvbnZlcnRlZFllYXJUaXRsZShkYXRlRm9yRHJhd2luZy55ZWFyKSk7XG4gICAgICAgICAgICAgICAgcHJldlZhbHVlID0gLTEyO1xuICAgICAgICAgICAgICAgIG5leHRWYWx1ZSA9IDEyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHRoaXMuX3NldFRpdGxlT25ZZWFyTGF5ZXIoZGF0ZUZvckRyYXdpbmcueWVhcik7XG4gICAgICAgICAgICAgICAgcHJldlZhbHVlID0gLTEyICogaXRlbUNvdW50T2ZZZWFyO1xuICAgICAgICAgICAgICAgIG5leHRWYWx1ZSA9IDEyICogaXRlbUNvdW50T2ZZZWFyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDogLy8gQHRvZG8gV2h5IGRvZXMgbm90IHVzZSAncmV0dXJuJyBidXQgJ2JyZWFrJz9cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZCdG4uZGF0YShrZXksIHByZXZWYWx1ZSk7XG4gICAgICAgIG5leHRCdG4uZGF0YShrZXksIG5leHRWYWx1ZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERyYXcgYm9keSBlbGVtZW50c1xuICAgICAqIEBwYXJhbSB7e3llYXI6IG51bWJlciwgbW9udGg6IG51bWJlcn19IGRhdGVGb3JEcmF3aW5nIC0gVGhlIGhhc2ggdGhhdCBzaG93IHVwIG9uIGNhbGVuZGFyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNob3duTGF5ZXJJZHggLSBJbmRleCBvZiBzaG93biBsYXllclxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2RyYXdCb2R5OiBmdW5jdGlvbihkYXRlRm9yRHJhd2luZywgc2hvd25MYXllcklkeCkge1xuICAgICAgICB2YXIgeWVhciA9IGRhdGVGb3JEcmF3aW5nLnllYXI7XG4gICAgICAgIHZhciBtb250aCA9IGRhdGVGb3JEcmF3aW5nLm1vbnRoO1xuICAgICAgICB2YXIgY2xhc3NQcmVmaXggPSB0aGlzLl9vcHRpb24uY2xhc3NQcmVmaXg7XG5cbiAgICAgICAgLy8gd2Vla3NcbiAgICAgICAgdGhpcy5fc2V0V2Vla3MoeWVhciwgbW9udGgpO1xuICAgICAgICB0aGlzLl8kZGF0ZUVsZW1lbnQgPSAkKCcuJyArIGNsYXNzUHJlZml4ICsgJ2RhdGUnLCB0aGlzLiR3ZWVrQXBwZW5kVGFyZ2V0KTtcbiAgICAgICAgdGhpcy5fJGRhdGVDb250YWluZXJFbGVtZW50ID0gJCgnLicgKyBjbGFzc1ByZWZpeCArICd3ZWVrID4gKicsIHRoaXMuJHdlZWtBcHBlbmRUYXJnZXQpO1xuXG4gICAgICAgIC8vIGRhdGVzXG4gICAgICAgIHRoaXMuX2RyYXdEYXRlcyhkYXRlRm9yRHJhd2luZywgY2xhc3NQcmVmaXgpO1xuXG4gICAgICAgIC8vIG1vbnRoIGxheWVyXG4gICAgICAgIHRoaXMuX2RyYXdGcmFtZU9uTW9udGhMYXllcigpO1xuICAgICAgICB0aGlzLl9kcmF3QnV0dG9uc09mTW9udGgoZGF0ZUZvckRyYXdpbmcsIGNsYXNzUHJlZml4KTtcblxuICAgICAgICAvLyB5ZWFyIGxheWVyXG4gICAgICAgIHRoaXMuX2RyYXdGcmFtZU9uWWVhckxheWVyKCk7XG4gICAgICAgIHRoaXMuX2RyYXdCdXR0b25zT2ZZZWFyKGRhdGVGb3JEcmF3aW5nLCBjbGFzc1ByZWZpeCk7XG5cbiAgICAgICAgLy8gc2hvdyBsYXllclxuICAgICAgICB0aGlzLl9jaGFuZ2VTaG93bkxheWVyKHNob3duTGF5ZXJJZHgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEcmF3IGZyYW1lIGNvbnRhaW5pbmcgYnV0dG9ucyBvbiBtb250aCdzIGxheWVyXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZHJhd0ZyYW1lT25Nb250aExheWVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgcm93cyA9IHRoaXMuZGF0YU9mTW9udGhMYXllci5mcmFtZS5yb3dzO1xuICAgICAgICB2YXIgZGF0YU9mTW9udGhMYXllciA9IHRoaXMuZGF0YU9mTW9udGhMYXllcjtcbiAgICAgICAgdmFyICRtb250aEdyb3VwRWw7XG5cbiAgICAgICAgZm9yICg7IGkgPCByb3dzOyBpICs9IDEpIHtcbiAgICAgICAgICAgICRtb250aEdyb3VwRWwgPSBkYXRhT2ZNb250aExheWVyLnRlbXBsYXRlLmNsb25lKHRydWUpO1xuICAgICAgICAgICAgJG1vbnRoR3JvdXBFbC5hcHBlbmRUbyhkYXRhT2ZNb250aExheWVyLmFwcGVuZGVkVGFyZ2V0KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEcmF3IHNlbGVjdGFibGUgYnV0dG9ucyBvbiBtb250aCdzIGxheWVyXG4gICAgICogQHBhcmFtIHt7eWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyfX0gZGF0ZUZvckRyYXdpbmcgLSBUaGUgaGFzaCB0aGF0IHNob3cgdXAgb24gY2FsZW5kYXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NQcmVmaXggLSBBIGNsYXNzIHByZWZpeFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2RyYXdCdXR0b25zT2ZNb250aDogZnVuY3Rpb24oZGF0ZUZvckRyYXdpbmcsIGNsYXNzUHJlZml4KSB7XG4gICAgICAgIHZhciBrZXkgPSBDT05TVEFOVFMucmVsYXRpdmVNb250aFZhbHVlS2V5O1xuICAgICAgICB2YXIgc2VsZWN0ZWRNb250aCA9IGRhdGVGb3JEcmF3aW5nLm1vbnRoO1xuICAgICAgICB2YXIgbW9udGhUaXRsZXMgPSB0aGlzLl9vcHRpb24ubW9udGhUaXRsZXM7XG4gICAgICAgIHZhciAkbW9udGhFbHMgPSB0aGlzLmRhdGFPZk1vbnRoTGF5ZXIuYXBwZW5kZWRUYXJnZXQuZmluZCgnLicgKyBjbGFzc1ByZWZpeCArICdtb250aCcpO1xuICAgICAgICB2YXIgJGJ1dHRvbkVsLCBtb250aCwgcmVsYXRpdmVNb250aDtcbiAgICAgICAgdmFyIGV2ZW50RGF0YTtcblxuICAgICAgICB1dGlsLmZvckVhY2gobW9udGhUaXRsZXMsIGZ1bmN0aW9uKHRpdGxlLCBpZHgpIHtcbiAgICAgICAgICAgICRidXR0b25FbCA9ICRtb250aEVscy5lcShpZHgpO1xuICAgICAgICAgICAgbW9udGggPSBpZHggKyAxO1xuXG4gICAgICAgICAgICBpZiAobW9udGggPT09IHNlbGVjdGVkTW9udGgpIHtcbiAgICAgICAgICAgICAgICAkYnV0dG9uRWwuYWRkQ2xhc3MoY2xhc3NQcmVmaXggKyBDT05TVEFOVFMuc2VsZWN0ZWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5faXNUb2RheSh0aGlzLl9zaG93bkRhdGUueWVhciwgbW9udGgpKSB7XG4gICAgICAgICAgICAgICAgJGJ1dHRvbkVsLmFkZENsYXNzKGNsYXNzUHJlZml4ICsgQ09OU1RBTlRTLnRvZGF5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVsYXRpdmVNb250aCA9IG1vbnRoIC0gc2VsZWN0ZWRNb250aDtcblxuICAgICAgICAgICAgJGJ1dHRvbkVsLmRhdGEoa2V5LCByZWxhdGl2ZU1vbnRoKS5odG1sKHRpdGxlKTtcblxuICAgICAgICAgICAgZXZlbnREYXRhID0ge1xuICAgICAgICAgICAgICAgICRkYXRlOiAkYnV0dG9uRWwsXG4gICAgICAgICAgICAgICAgJGRhdGVDb250YWluZXI6ICRidXR0b25FbCxcbiAgICAgICAgICAgICAgICB5ZWFyOiBkYXRlRm9yRHJhd2luZy55ZWFyLFxuICAgICAgICAgICAgICAgIG1vbnRoOiBtb250aCxcbiAgICAgICAgICAgICAgICBkYXRlOiAwLFxuICAgICAgICAgICAgICAgIGh0bWw6IHRpdGxlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLmZpcmUoJ2RyYXcnLCBldmVudERhdGEpO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRHJhdyBmcmFtZSBjb250YWluaW5nIGJ1dHRvbnMgb24geWVhcidzIGxheWVyXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZHJhd0ZyYW1lT25ZZWFyTGF5ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciByb3dzID0gdGhpcy5kYXRhT2ZNb250aExheWVyLmZyYW1lLnJvd3M7XG4gICAgICAgIHZhciBkYXRhT2ZZZWFyTGF5ZXIgPSB0aGlzLmRhdGFPZlllYXJMYXllcjtcbiAgICAgICAgdmFyICR5ZWFyR3JvdXBFbDtcblxuICAgICAgICBmb3IgKDsgaSA8IHJvd3M7IGkgKz0gMSkge1xuICAgICAgICAgICAgJHllYXJHcm91cEVsID0gZGF0YU9mWWVhckxheWVyLnRlbXBsYXRlLmNsb25lKHRydWUpO1xuICAgICAgICAgICAgJHllYXJHcm91cEVsLmFwcGVuZFRvKGRhdGFPZlllYXJMYXllci5hcHBlbmRlZFRhcmdldCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRHJhdyBzZWxlY3RhYmxlIGJ1dHRvbnMgb24geWVhcidzIGxheWVyXG4gICAgICogQHBhcmFtIHt7eWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyfX0gZGF0ZUZvckRyYXdpbmcgLSBUaGUgaGFzaCB0aGF0IHNob3cgdXAgb24gY2FsZW5kYXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NQcmVmaXggLSBBIGNsYXNzIHByZWZpeFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2RyYXdCdXR0b25zT2ZZZWFyOiBmdW5jdGlvbihkYXRlRm9yRHJhd2luZywgY2xhc3NQcmVmaXgpIHtcbiAgICAgICAgdmFyIGtleSA9IENPTlNUQU5UUy5yZWxhdGl2ZU1vbnRoVmFsdWVLZXk7XG4gICAgICAgIHZhciB5ZWFyID0gZGF0ZUZvckRyYXdpbmcueWVhcjtcbiAgICAgICAgdmFyIGl0ZW1Db3VudE9mWWVhciA9IHRoaXMuX2dldEluZm9PZlllYXJSYW5nZSh5ZWFyKTtcbiAgICAgICAgdmFyIHN0YXJ0WWVhciA9IGl0ZW1Db3VudE9mWWVhci5zdGFydFllYXI7XG4gICAgICAgIHZhciBlbmRZZWFyID0gaXRlbUNvdW50T2ZZZWFyLmVuZFllYXI7XG4gICAgICAgIHZhciBjbnQgPSAwO1xuICAgICAgICB2YXIgJHllYXJFbHMgPSB0aGlzLmRhdGFPZlllYXJMYXllci5hcHBlbmRlZFRhcmdldC5maW5kKCcuJyArIGNsYXNzUHJlZml4ICsgJ3llYXInKTtcbiAgICAgICAgdmFyICRidXR0b25FbCwgcmVsYXRpdmVNb250aDtcbiAgICAgICAgdmFyIGV2ZW50RGF0YTtcblxuICAgICAgICBmb3IgKDsgc3RhcnRZZWFyIDw9IGVuZFllYXI7IHN0YXJ0WWVhciArPSAxKSB7XG4gICAgICAgICAgICAkYnV0dG9uRWwgPSAkeWVhckVscy5lcShjbnQpO1xuXG4gICAgICAgICAgICBpZiAoc3RhcnRZZWFyID09PSB5ZWFyKSB7XG4gICAgICAgICAgICAgICAgJGJ1dHRvbkVsLmFkZENsYXNzKGNsYXNzUHJlZml4ICsgQ09OU1RBTlRTLnNlbGVjdGVkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzVG9kYXkoc3RhcnRZZWFyKSkge1xuICAgICAgICAgICAgICAgICRidXR0b25FbC5hZGRDbGFzcyhjbGFzc1ByZWZpeCArIENPTlNUQU5UUy50b2RheSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlbGF0aXZlTW9udGggPSAoc3RhcnRZZWFyIC0geWVhcikgKiAxMjtcblxuICAgICAgICAgICAgJGJ1dHRvbkVsLmRhdGEoa2V5LCByZWxhdGl2ZU1vbnRoKS5odG1sKHN0YXJ0WWVhcik7XG5cbiAgICAgICAgICAgIGNudCArPSAxO1xuXG4gICAgICAgICAgICBldmVudERhdGEgPSB7XG4gICAgICAgICAgICAgICAgJGRhdGU6ICRidXR0b25FbCxcbiAgICAgICAgICAgICAgICAkZGF0ZUNvbnRhaW5lcjogJGJ1dHRvbkVsLFxuICAgICAgICAgICAgICAgIHllYXI6IHN0YXJ0WWVhcixcbiAgICAgICAgICAgICAgICBtb250aDogMCxcbiAgICAgICAgICAgICAgICBkYXRlOiAwLFxuICAgICAgICAgICAgICAgIGh0bWw6IHN0YXJ0WWVhclxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5maXJlKCdkcmF3JywgZXZlbnREYXRhKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2UgY3VycmVudCBzaG93biBsYXllciBvbiBjYWxlbmRhclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaG93bkxheWVySWR4IC0gSW5kZXggb2Ygc2hvd24gbGF5ZXJcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jaGFuZ2VTaG93bkxheWVyOiBmdW5jdGlvbihzaG93bkxheWVySWR4KSB7XG4gICAgICAgIHZhciBjbGFzc1ByZWZpeCA9IHRoaXMuX29wdGlvbi5jbGFzc1ByZWZpeDtcbiAgICAgICAgdmFyIHByZXZzaG93bkxheWVySWR4ID0gdGhpcy5zaG93bkxheWVySWR4O1xuICAgICAgICB2YXIgJGJvZHlzID0gdGhpcy4kZWxlbWVudC5maW5kKCcuJyArIGNsYXNzUHJlZml4ICsgJ2JvZHknKTtcblxuICAgICAgICB0aGlzLnNob3duTGF5ZXJJZHggPSBzaG93bkxheWVySWR4O1xuXG4gICAgICAgICRib2R5cy5lcShwcmV2c2hvd25MYXllcklkeCkuaGlkZSgpO1xuICAgICAgICAkYm9keXMuZXEoc2hvd25MYXllcklkeCkuc2hvdygpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEcmF3IGNhbGVuZGFyXG4gICAgICogQGFwaVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbeWVhcl0gQSB5ZWFyIChleC4gMjAwOClcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21vbnRoXSBBIG1vbnRoICgxIH4gMTIpXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbaXNSZWxhdGl2ZV0gQSB5ZWFyIGFuZCBtb250aCBpcyByZWxhdGVkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzaG93blR5cGVdIFNob3duIHR5cGUgb2YgbGF5ZXIgKGV4LiBbZGF5LCBtb250aCwgeWVhcl0gfCBbMF0gfiAyXSlcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNhbGVuZGFyLmRyYXcoKTsgLy8gRHJhdyB3aXRoIG5vdyBkYXRlLlxuICAgICAqIGNhbGVuZGFyLmRyYXcoMjAwOCwgMTIpOyAvLyBEcmF3IDIwMDgvMTJcbiAgICAgKiBjYWxlbmRhci5kcmF3KG51bGwsIDEyKTsgLy8gRHJhdyBjdXJyZW50IHllYXIvMTJcbiAgICAgKiBjYWxlbmRhci5kcmF3KDIwMTAsIG51bGwpOyAvLyBEcmF3IDIwMTAvY3VycmVudCBtb250aFxuICAgICAqIGNhbGVuZGFyLmRyYXcoMCwgMSwgdHJ1ZSk7IC8vIERyYXcgbmV4dCBtb250aFxuICAgICAqIGNhbGVuZGFyLmRyYXcoLTEsIG51bGwsIHRydWUpOyAvLyBEcmF3IHByZXYgeWVhclxuICAgICAqIGNhbGVuZGFyLmRyYXcoMCwgMCwgZmFsc2UsICdkYXRlJyk7IC8vIERyYXcgdG9kYXkgd2l0aCBkYXRlJ3MgbGF5ZXJcbiAgICAgKiBjYWxlbmRhci5kcmF3KDIwMTAsIDEwLCBmYWxzZSwgJ21vbnRoJyk7IC8vIERyYXcgMjAxMC8xMCB3aXRoIG1vbnRoJ3MgbGF5ZXJcbiAgICAgKiBjYWxlbmRhci5kcmF3KDIwMTYsIG51bGwsIGZhbHNlLCAneWVhcicpOyAvLyBEcmF3IDIwMTYvbW9udGggd2l0aCB5ZWFyJ3MgbGF5ZXJcbiAgICAgKiovXG4gICAgZHJhdzogZnVuY3Rpb24oeWVhciwgbW9udGgsIGlzUmVsYXRpdmUsIHNob3duVHlwZSkge1xuICAgICAgICB2YXIgZGF0ZUZvckRyYXdpbmcgPSB0aGlzLl9nZXREYXRlRm9yRHJhd2luZyh5ZWFyLCBtb250aCwgaXNSZWxhdGl2ZSk7XG4gICAgICAgIHZhciBzaG93bkxheWVySWR4O1xuXG4gICAgICAgIC8qID09PT09PT09PT09PT09PVxuICAgICAgICAgKiBiZWZvcmVEcmF3XG4gICAgICAgICAqID09PT09PT09PT09PT09PT09Ki9cbiAgICAgICAgaWYgKCF0aGlzLmludm9rZSgnYmVmb3JlRHJhdycsIGRhdGVGb3JEcmF3aW5nKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogPT09PT09PT09PT09PT09XG4gICAgICAgICAqIGRyYXdcbiAgICAgICAgICogPT09PT09PT09PT09PT09PT0qL1xuICAgICAgICBzaG93bkxheWVySWR4ID0gdXRpbC5pc051bWJlcihzaG93blR5cGUpID8gc2hvd25UeXBlIDogdGhpcy5fZ2V0SW5kZXhPZlNob3duTGF5ZXIoc2hvd25UeXBlKTtcblxuICAgICAgICB5ZWFyID0gZGF0ZUZvckRyYXdpbmcueWVhcjtcbiAgICAgICAgbW9udGggPSBkYXRlRm9yRHJhd2luZy5tb250aDtcblxuICAgICAgICB0aGlzLnNldERhdGUoeWVhciwgbW9udGgpO1xuXG4gICAgICAgIHRoaXMuX2NsZWFyKCk7XG4gICAgICAgIHRoaXMuX2RyYXdIZWFkZXIoZGF0ZUZvckRyYXdpbmcsIHNob3duTGF5ZXJJZHgpO1xuICAgICAgICB0aGlzLl9kcmF3Qm9keShkYXRlRm9yRHJhd2luZywgc2hvd25MYXllcklkeCk7XG5cbiAgICAgICAgLyogPT09PT09PT09PT09PT09XG4gICAgICAgICAqIGFmdGVyRHJhd1xuICAgICAgICAgKiA9PT09PT09PT09PT09PT09Ki9cbiAgICAgICAgdGhpcy5maXJlKCdhZnRlckRyYXcnLCBkYXRlRm9yRHJhd2luZyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBjdXJyZW50IHllYXIgYW5kIG1vbnRoKGp1c3Qgc2hvd24pLlxuICAgICAqIEBhcGlcbiAgICAgKiBAcmV0dXJucyB7e3llYXI6IG51bWJlciwgbW9udGg6IG51bWJlcn19XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgZ2V0RGF0ZSgpOyA9PiB7IHllYXI6IHh4eHgsIG1vbnRoOiB4eCB9O1xuICAgICAqL1xuICAgIGdldERhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcjogdGhpcy5fc2hvd25EYXRlLnllYXIsXG4gICAgICAgICAgICBtb250aDogdGhpcy5fc2hvd25EYXRlLm1vbnRoXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldCBkYXRlXG4gICAgICogQGFwaVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbeWVhcl0gQSB5ZWFyIChleC4gMjAwOClcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21vbnRoXSBBIG1vbnRoICgxIH4gMTIpXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgc2V0RGF0ZSgxOTg0LCAwNCk7XG4gICAgICoqL1xuICAgIHNldERhdGU6IGZ1bmN0aW9uKHllYXIsIG1vbnRoKSB7XG4gICAgICAgIHZhciBkYXRlID0gdGhpcy5fc2hvd25EYXRlO1xuICAgICAgICBkYXRlLnllYXIgPSB1dGlsLmlzTnVtYmVyKHllYXIpID8geWVhciA6IGRhdGUueWVhcjtcbiAgICAgICAgZGF0ZS5tb250aCA9IHV0aWwuaXNOdW1iZXIobW9udGgpID8gbW9udGggOiBkYXRlLm1vbnRoO1xuICAgIH1cbn0pO1xuXG51dGlsLkN1c3RvbUV2ZW50cy5taXhpbihDYWxlbmRhcik7XG5tb2R1bGUuZXhwb3J0cyA9IENhbGVuZGFyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY2FsZW5kYXIuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ09OU1RBTlRTID0ge1xuICAgIHJlbGF0aXZlTW9udGhWYWx1ZUtleTogJ3JlbGF0aXZlTW9udGhWYWx1ZScsXG4gICAgcHJldjogJ3ByZXYnLFxuICAgIHByZXZZZWFyOiAncHJldi15ZWFyJyxcbiAgICBwcmV2TW9udGg6ICdwcmV2LW1vbnRoJyxcbiAgICBuZXh0OiAnbmV4dCcsXG4gICAgbmV4dFllYXI6ICduZXh0LXllYXInLFxuICAgIG5leHRNb250aDogJ25leHQtbW9udGgnLFxuICAgIHNlbGVjdGVkOiAnc2VsZWN0ZWQnLFxuICAgIHRvZGF5OiAndG9kYXknLFxuICAgIGNsaWNrYWJsZTogJ2NsaWNrYWJsZS10aXRsZScsXG4gICAgY2FsZW5kYXJIZWFkZXI6IG51bGwsXG4gICAgY2FsZW5kYXJCb2R5OiBudWxsLFxuICAgIGNhbGVuZGFyRm9vdGVyOiBudWxsLFxuICAgIGRlZmF1bHRDbGFzc1ByZWZpeFJlZ0V4cDogL2NhbGVuZGFyLS9nLFxuICAgIHRpdGxlUmVnRXhwOiAveXl5eXx5eXxtbXxtfE0vZyxcbiAgICB0aXRsZVllYXJSZWdFeHA6IC95eXl5fHl5L2csXG4gICAgdGl0bGVNb250aFJlZ0V4cDogL21tfG18TS9nLFxuICAgIHRvZGF5UmVnRXhwOiAveXl5eXx5eXxtbXxtfE18ZGR8ZHxEL2csXG4gICAgaXRlbUNvdW50T2ZZZWFyOiAxMixcbiAgICBsYXllcktleXM6IFsnZGF0ZScsICdtb250aCcsICd5ZWFyJ11cbn07XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5DT05TVEFOVFMuY2FsZW5kYXJIZWFkZXIgPSBbXG4gICAgJzxkaXYgY2xhc3M9XCJjYWxlbmRhci1oZWFkZXJcIj4nLFxuICAgICAgICAnPGEgaHJlZj1cIiNcIiBjbGFzcz1cImNhbGVuZGFyLXJvbGxvdmVyIGNhbGVuZGFyLWJ0bi0nICsgQ09OU1RBTlRTLnByZXYgKyAnXCI+UHJldjwvYT4nLFxuICAgICAgICAnPHN0cm9uZyBjbGFzcz1cImNhbGVuZGFyLXRpdGxlIGNhbGVuZGFyLWNsaWNrYWJsZS10aXRsZVwiPjwvc3Ryb25nPicsXG4gICAgICAgICc8YSBocmVmPVwiI1wiIGNsYXNzPVwiY2FsZW5kYXItcm9sbG92ZXIgY2FsZW5kYXItYnRuLScgKyBDT05TVEFOVFMubmV4dCArICdcIj5OZXh0PC9hPicsXG4gICAgJzwvZGl2PiddLmpvaW4oJycpO1xuXG5DT05TVEFOVFMuY2FsZW5kYXJCb2R5ID0gW1xuICAgICc8ZGl2IGNsYXNzPVwiY2FsZW5kYXItYm9keVwiPicsXG4gICAgICAgICc8dGFibGU+JyxcbiAgICAgICAgICAgICc8dGhlYWQ+JyxcbiAgICAgICAgICAgICAgICAnPHRyPicsXG4gICAgICAgICAgICAgICAgICAgJzx0aCBjbGFzcz1cImNhbGVuZGFyLXN1blwiPlN1PC90aD48dGg+TW88L3RoPjx0aD5UdTwvdGg+PHRoPldlPC90aD48dGg+VGg8L3RoPjx0aD5GYTwvdGg+PHRoIGNsYXNzPVwiY2FsZW5kYXItc2F0XCI+U2E8L3RoPicsXG4gICAgICAgICAgICAgICAgJzwvdHI+JyxcbiAgICAgICAgICAgICc8L3RoZWFkPicsXG4gICAgICAgICAgICAnPHRib2R5PicsXG4gICAgICAgICAgICAgICAgJzx0ciBjbGFzcz1cImNhbGVuZGFyLXdlZWtcIj4nLFxuICAgICAgICAgICAgICAgICAgICAnPHRkIGNsYXNzPVwiY2FsZW5kYXItZGF0ZVwiPjwvdGQ+JyxcbiAgICAgICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cImNhbGVuZGFyLWRhdGVcIj48L3RkPicsXG4gICAgICAgICAgICAgICAgICAgICc8dGQgY2xhc3M9XCJjYWxlbmRhci1kYXRlXCI+PC90ZD4nLFxuICAgICAgICAgICAgICAgICAgICAnPHRkIGNsYXNzPVwiY2FsZW5kYXItZGF0ZVwiPjwvdGQ+JyxcbiAgICAgICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cImNhbGVuZGFyLWRhdGVcIj48L3RkPicsXG4gICAgICAgICAgICAgICAgICAgICc8dGQgY2xhc3M9XCJjYWxlbmRhci1kYXRlXCI+PC90ZD4nLFxuICAgICAgICAgICAgICAgICAgICAnPHRkIGNsYXNzPVwiY2FsZW5kYXItZGF0ZVwiPjwvdGQ+JyxcbiAgICAgICAgICAgICAgICAnPC90cj4nLFxuICAgICAgICAgICAgJzwvdGJvZHk+JyxcbiAgICAgICAgJzwvdGFibGU+JyxcbiAgICAnPC9kaXY+JyxcbiAgICAnPGRpdiBjbGFzcz1cImNhbGVuZGFyLWJvZHlcIj4nLFxuICAgICAgICAnPHRhYmxlPicsXG4gICAgICAgICAgICAnPHRib2R5PicsXG4gICAgICAgICAgICAgICAgJzx0ciBjbGFzcz1cImNhbGVuZGFyLW1vbnRoLWdyb3VwXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cImNhbGVuZGFyLW1vbnRoXCI+PC90ZD4nLFxuICAgICAgICAgICAgICAgICAgICAnPHRkIGNsYXNzPVwiY2FsZW5kYXItbW9udGhcIj48L3RkPicsXG4gICAgICAgICAgICAgICAgICAgICc8dGQgY2xhc3M9XCJjYWxlbmRhci1tb250aFwiPjwvdGQ+JyxcbiAgICAgICAgICAgICAgICAnPC90cj4nLFxuICAgICAgICAgICAgJzwvdGJvZHk+JyxcbiAgICAgICAgJzwvdGFibGU+JyxcbiAgICAnPC9kaXY+JyxcbiAgICAnPGRpdiBjbGFzcz1cImNhbGVuZGFyLWJvZHlcIj4nLFxuICAgICAgICAnPHRhYmxlPicsXG4gICAgICAgICAgICAnPHRib2R5PicsXG4gICAgICAgICAgICAgICAgJzx0ciBjbGFzcz1cImNhbGVuZGFyLXllYXItZ3JvdXBcIj4nLFxuICAgICAgICAgICAgICAgICAgICAnPHRkIGNsYXNzPVwiY2FsZW5kYXIteWVhclwiPjwvdGQ+JyxcbiAgICAgICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cImNhbGVuZGFyLXllYXJcIj48L3RkPicsXG4gICAgICAgICAgICAgICAgICAgICc8dGQgY2xhc3M9XCJjYWxlbmRhci15ZWFyXCI+PC90ZD4nLFxuICAgICAgICAgICAgICAgICc8L3RyPicsXG4gICAgICAgICAgICAnPC90Ym9keT4nLFxuICAgICAgICAnPC90YWJsZT4nLFxuICAgICc8L2Rpdj4nXS5qb2luKCcnKTtcblxuQ09OU1RBTlRTLmNhbGVuZGFyRm9vdGVyID0gW1xuICAgICc8ZGl2IGNsYXNzPVwiY2FsZW5kYXItZm9vdGVyXCI+JyxcbiAgICAgICAgJzxwPuyYpOuKmCA8ZW0gY2xhc3M9XCJjYWxlbmRhci10b2RheVwiPjwvZW0+PC9wPicsXG4gICAgJzwvZGl2PiddLmpvaW4oJycpO1xuLyogZXNsaW50LWVuYWJsZSAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IENPTlNUQU5UUztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbnN0YW50cy5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgVXRpbHMgZm9yIGNhbGVuZGFyIGNvbXBvbmVudFxuICogQGF1dGhvciBOSE4gTmV0LiBGRSBkZXYgTGFiIDxkbF9qYXZhc2NyaXB0QG5obmVudC5jb20+XG4gKiBAZGVwZW5kZW5jeSB0dWktY29kZS1zbmlwcGV0IF4xLjAuMlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVdGlscyBvZiBjYWxlbmRhclxuICogQG5hbWVzcGFjZSBjYWxlbmRhclV0aWxzXG4gKiBAaWdub3JlXG4gKi9cbnZhciB1dGlscyA9IHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm4gZGF0ZSBoYXNoIGJ5IHBhcmFtZXRlci5cbiAgICAgKiAgaWYgdGhlcmUgYXJlIDMgcGFyYW1ldGVyLCB0aGUgcGFyYW1ldGVyIGlzIGNvcmduaXplZCBEYXRlIG9iamVjdFxuICAgICAqICBpZiB0aGVyZSBhcmUgbm8gcGFyYW1ldGVyLCByZXR1cm4gdG9kYXkncyBoYXNoIGRhdGVcbiAgICAgKiBAcGFyYW0ge0RhdGV8bnVtYmVyfSBbeWVhcl0gQSBkYXRlIGluc3RhbmNlIG9yIHllYXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21vbnRoXSBBIG1vbnRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkYXRlXSBBIGRhdGVcbiAgICAgKiBAcmV0dXJucyB7e3llYXI6ICosIG1vbnRoOiAqLCBkYXRlOiAqfX1cbiAgICAgKi9cbiAgICBnZXREYXRlSGFzaDogZnVuY3Rpb24oeWVhciwgbW9udGgsIGRhdGUpIHtcbiAgICAgICAgdmFyIG5EYXRlO1xuXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykge1xuICAgICAgICAgICAgbkRhdGUgPSBhcmd1bWVudHNbMF0gfHwgbmV3IERhdGUoKTtcblxuICAgICAgICAgICAgeWVhciA9IG5EYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICBtb250aCA9IG5EYXRlLmdldE1vbnRoKCkgKyAxO1xuICAgICAgICAgICAgZGF0ZSA9IG5EYXRlLmdldERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyOiB5ZWFyLFxuICAgICAgICAgICAgbW9udGg6IG1vbnRoLFxuICAgICAgICAgICAgZGF0ZTogZGF0ZVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdG9kYXkgdGhhdCBzYXZlZCBvbiBjb21wb25lbnQgb3IgY3JlYXRlIG5ldyBkYXRlLlxuICAgICAqIEBmdW5jdGlvbiBnZXRUb2RheVxuICAgICAqIEByZXR1cm5zIHt7eWVhcjogKiwgbW9udGg6ICosIGRhdGU6ICp9fVxuICAgICAqL1xuICAgIGdldFRvZGF5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHV0aWxzLmdldERhdGVIYXNoKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCB3ZWVrcyBjb3VudCBieSBwYXJhbWVudGVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHllYXIgQSB5ZWFyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1vbnRoIEEgbW9udGhcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSDso7wgKDR+NilcbiAgICAgKiovXG4gICAgZ2V0V2Vla3M6IGZ1bmN0aW9uKHllYXIsIG1vbnRoKSB7XG4gICAgICAgIHZhciBmaXJzdERheSA9IHRoaXMuZ2V0Rmlyc3REYXkoeWVhciwgbW9udGgpLFxuICAgICAgICAgICAgbGFzdERhdGUgPSB0aGlzLmdldExhc3REYXRlKHllYXIsIG1vbnRoKTtcblxuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKChmaXJzdERheSArIGxhc3REYXRlKSAvIDcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdW5peCB0aW1lIGZyb20gZGF0ZSBoYXNoXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGUgQSBkYXRlIGhhc2hcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGF0ZS55ZWFyIEEgeWVhclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkYXRlLm1vbnRoIEEgbW9udGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGF0ZS5kYXRlIEEgZGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB1dGlscy5nZXRUaW1lKHt5ZWFyOjIwMTAsIG1vbnRoOjUsIGRhdGU6MTJ9KTsgLy8gMTI3MzU5MDAwMDAwMFxuICAgICAqKi9cbiAgICBnZXRUaW1lOiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERhdGVPYmplY3QoZGF0ZSkuZ2V0VGltZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgd2hpY2ggZGF5IGlzIGZpcnN0IGJ5IHBhcmFtZXRlcnMgdGhhdCBpbmNsdWRlIHllYXIgYW5kIG1vbnRoIGluZm9ybWF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5ZWFyIEEgeWVhclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtb250aCBBIG1vbnRoXG4gICAgICogQHJldHVybnMge251bWJlcn0gKDB+NilcbiAgICAgKiovXG4gICAgZ2V0Rmlyc3REYXk6IGZ1bmN0aW9uKHllYXIsIG1vbnRoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIDEpLmdldERheSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgd2hpY2ggZGF5IGlzIGxhc3QgYnkgcGFyYW1ldGVycyB0aGF0IGluY2x1ZGUgeWVhciBhbmQgbW9udGggaW5mb3JtYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHllYXIgQSB5ZWFyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1vbnRoIEEgbW9udGhcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSAoMH42KVxuICAgICAqKi9cbiAgICBnZXRMYXN0RGF5OiBmdW5jdGlvbih5ZWFyLCBtb250aCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGgsIDApLmdldERheSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgbGFzdCBkYXRlIGJ5IHBhcmFtZXRlcnMgdGhhdCBpbmNsdWRlIHllYXIgYW5kIG1vbnRoIGluZm9ybWF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5ZWFyIEEgeWVhclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtb250aCBBIG1vbnRoXG4gICAgICogQHJldHVybnMge251bWJlcn0gKDF+MzEpXG4gICAgICoqL1xuICAgIGdldExhc3REYXRlOiBmdW5jdGlvbih5ZWFyLCBtb250aCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGgsIDApLmdldERhdGUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IGRhdGUgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGUgQSBkYXRlIGhhc2hcbiAgICAgKiBAcmV0dXJucyB7RGF0ZX0gRGF0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICogIGNhbGVuZGFyVXRpbHMuZ2V0RGF0ZU9iamVjdCh7eWVhcjoyMDEwLCBtb250aDo1LCBkYXRlOjEyfSk7XG4gICAgICogIGNhbGVuZGFyVXRpbHMuZ2V0RGF0ZU9iamVjdCgyMDEwLCA1LCAxMik7IC8veWVhcixtb250aCxkYXRlXG4gICAgICoqL1xuICAgIGdldERhdGVPYmplY3Q6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSAtIDEsIGFyZ3VtZW50c1syXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZS55ZWFyLCBkYXRlLm1vbnRoIC0gMSwgZGF0ZS5kYXRlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IHJlbGF0ZWQgZGF0ZSBoYXNoIHdpdGggcGFyYW1ldGVycyB0aGF0IGluY2x1ZGUgZGF0ZSBpbmZvcm1hdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0geWVhciBBIHJlbGF0ZWQgdmFsdWUgZm9yIHllYXIoeW91IGNhbiB1c2UgKy8tKVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtb250aCBBIHJlbGF0ZWQgdmFsdWUgZm9yIG1vbnRoICh5b3UgY2FuIHVzZSArLy0pXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRhdGUgQSByZWxhdGVkIHZhbHVlIGZvciBkYXkgKHlvdSBjYW4gdXNlICsvLSlcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0ZU9iaiBzdGFuZGFyZCBkYXRlIGhhc2hcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBkYXRlT2JqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgY2FsZW5kYXJVdGlscy5nZXRSZWxhdGl2ZURhdGUoMSwgMCwgMCwge3llYXI6MjAwMCwgbW9udGg6MSwgZGF0ZToxfSk7IC8vIHt5ZWFyOjIwMDEsIG1vbnRoOjEsIGRhdGU6MX1cbiAgICAgKiAgY2FsZW5kYXJVdGlscy5nZXRSZWxhdGl2ZURhdGUoMCwgMCwgLTEsIHt5ZWFyOjIwMTAsIG1vbnRoOjEsIGRhdGU6MX0pOyAvLyB7eWVhcjoyMDA5LCBtb250aDoxMiwgZGF0ZTozMX1cbiAgICAgKiovXG4gICAgZ2V0UmVsYXRpdmVEYXRlOiBmdW5jdGlvbih5ZWFyLCBtb250aCwgZGF0ZSwgZGF0ZU9iaikge1xuICAgICAgICB2YXIgblllYXIgPSAoZGF0ZU9iai55ZWFyICsgeWVhciksXG4gICAgICAgICAgICBuTW9udGggPSAoZGF0ZU9iai5tb250aCArIG1vbnRoIC0gMSksXG4gICAgICAgICAgICBuRGF0ZSA9IChkYXRlT2JqLmRhdGUgKyBkYXRlKSxcbiAgICAgICAgICAgIG5EYXRlT2JqID0gbmV3IERhdGUoblllYXIsIG5Nb250aCwgbkRhdGUpO1xuXG4gICAgICAgIHJldHVybiB1dGlscy5nZXREYXRlSGFzaChuRGF0ZU9iaik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoYWduZSBudW1iZXIgMH45IHRvICcwMH4wOSdcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIG51bWJlclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgY2FsZW5kYXJVdGlscy5wcmVwZW5kTGVhZGluZ1plcm8oMCk7IC8vICAnMDAnXG4gICAgICogIGNhbGVuZGFyVXRpbHMucHJlcGVuZExlYWRpbmdaZXJvKDkpOyAvLyAgJzA5J1xuICAgICAqICBjYWxlbmRhclV0aWxzLnByZXBlbmRMZWFkaW5nWmVybygxMik7IC8vICAnMTInXG4gICAgICovXG4gICAgcHJlcGVuZExlYWRpbmdaZXJvOiBmdW5jdGlvbihudW1iZXIpIHtcbiAgICAgICAgdmFyIHByZWZpeCA9ICcnO1xuXG4gICAgICAgIGlmIChudW1iZXIgPCAxMCkge1xuICAgICAgICAgICAgcHJlZml4ID0gJzAnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByZWZpeCArIG51bWJlcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hhZ2UgdGV4dCBhbmQgcmV0dXJuLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgQSB0ZXh0IHRvIGNoYWduZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgQSBjaGFnbmUga2V5LCB2YWx1ZSBzZXRcbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnIEEgcmVnRXhwIHRvIGNoYWduZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0Q29udmVydGVkVGl0bGU6IGZ1bmN0aW9uKHN0ciwgbWFwLCByZWcpIHtcbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UocmVnLCBmdW5jdGlvbihtYXRjaGVkU3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFwW21hdGNoZWRTdHJpbmddIHx8ICcnO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdXRpbHM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy91dGlscy5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9
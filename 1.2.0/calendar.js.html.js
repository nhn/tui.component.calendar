tui.util.defineNamespace("fedoc.content", {});
fedoc.content["calendar.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Calendar component(from Pug component)\n * @author NHN Ent. FE dev team. &lt;dl_javascript@nhnent.com>\n */\n'use strict';\n\nvar utils = require('./utils');\nvar CONSTANTS = require('./constants');\n\nvar util = tui.util;\nvar bind = util.bind;\nvar extend = util.extend;\n\n/**\n * Calendar component class\n * @constructor\n * @param {Object} [option] A options for initialize\n *     @param {HTMLElement} option.element A root element\n *     @param {string} [option.classPrefix=\"calendar-\"] A prefix class for markup structure\n *     @param {number} [option.year=this year] A year for initialize\n *     @param {number} [option.month=this month] A month for initialize\n *     @param {string} [option.titleFormat=\"yyyy-mm\"] A title format.\n *                     This component find title element by className '[prefix]title'\n *     @param {string} [option.todayFormat = \"yyyy Year mm Month dd Day (D)\"] A today format.\n *                     This component find today element by className '[prefix]today'\n *     @param {string} [option.yearTitleFormat = \"yyyy\"] A year title formant.\n *                      This component find year title element by className '[prefix]year'\n *     @param {string} [option.monthTitleFormat = \"m\"] A month title format.\n *                     This component find month title element by classNameÏù¥ '[prefix]month'\n *     @param {Array} [option.monthTitles = [\"JAN\",\"FEB\",\"MAR\",\"APR\",\"MAY\",\"JUN\",\"JUL\",\"AUG\",\"SEP\",\"OCT\",\"NOV\",\"DEC\"]]\n *                    A label of each month.\n *     @param {Array} [option.dayTitles = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]] A label for day.\n *                    If you set the other option todayFormat 'D', you can use this name.\n * @example\n * var calendar = new tui.component.Calendar({\n *                    element: '#layer',\n *                    classPrefix: \"calendar-\",\n *                    year: 1983,\n *                    month: 5,\n *                    titleFormat: \"yyyy-mm\", // title\n *                    todayFormat: \"yyyy / mm / dd (D)\" // today\n *                    yearTitleFormat: \"yyyy\", // year title\n *                    monthTitleFormat: \"m\", // month title\n *                    monthTitles: [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"],\n *                    dayTitles: ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'] // days\n *                    itemCountOfYear: 12\n *             });\n */\nvar Calendar = util.defineClass(/** @lends Calendar.prototype */ {\n    init: function(option) {\n        /**\n         * Set options\n         * option: {\n         *     classPrefix: string,\n         *     year: number\n         *     month: number\n         *     titleFormat: string,\n         *     todayFormat: string,\n         *     yearTitleFormat: string,\n         *     monthTitleFormat: string,\n         *     monthTitles: Array,\n         *     dayTitles: Array,\n         *     itemCountOfYear: number\n         * }\n         * @private\n         */\n        this._option = {};\n\n        /**\n         * A day that is shown\n         * @type {{year: number, month: number}}\n         */\n        this._shownDate = {year: 0, month: 1, date: 1};\n\n        /**======================================\n         * jQuery - HTMLElement\n         *======================================*/\n        /**\n         * =========Root Element=========\n         * If options do not include element, this component jedge initialize element without options\n         * @type {jQuery}\n         * @private\n         */\n        this.$element = $(option.element || arguments[0]);\n\n        /**\n         * =========Header=========\n         * @type {jQuery}\n         */\n        this.$header = null;\n\n        /**\n         * A tilte\n         * @type {jQuery}\n         */\n        this.$title = null;\n\n        /**\n         * A year title\n         * @type {jQuery}\n         */\n        this.$titleYear = null;\n\n        /**\n         * A month title\n         * @type {jQuery}\n         */\n        this.$titleMonth = null;\n\n        /**\n         * =========Body=========\n         * @type {jQuery}\n         */\n        this.$body = null;\n\n        /**\n         * A template of week\n         * @type {jQuery}\n         */\n        this.$weekTemplate = null;\n\n        /**\n         * A week parent element\n         * @type {jQuery}\n         */\n        this.$weekAppendTarget = null;\n\n        /**-------- footer --------*/\n        this.$footer = null;\n\n        /** Today */\n        this.$today = null;\n\n        /**\n         * A date element\n         * @type {jQuery}\n         * @private\n         */\n        this._$dateElement = null;\n\n        /**\n         * A date wrapper element\n         * @type {jQuery}\n         * @private\n         */\n        this._$dateContainerElement = null;\n\n        /**\n         * =========Footer=========\n         * @type {jQuery}\n         */\n        this.$footer = null;\n\n        /**\n         * Today element\n         * @type {jQuery}\n         */\n        this.$today = null;\n\n        /**\n         * Index of shown layer\n         * @type {number}\n         */\n        this.shownLayerIdx = 0;\n\n        /**\n         * Data of month's layer\n         * @type {Object}\n         */\n        this.dataOfMonthLayer = {};\n\n        /**\n         * Data of year's layer\n         * @type {Object}\n         */\n        this.dataOfYearLayer = {};\n\n        /**\n         * Whether title is clicable or not\n         * @type {Boolean}\n         */\n        this.isClickableTitle = false;\n\n        /**\n         * Handlers binding context\n         * @type {Object}\n         */\n        this.handlers = {};\n\n        /** Set default options */\n        this._setDefault(option);\n    },\n\n    /**\n     * Set defulat opitons\n     * @param {Object} [option] A options to initialzie component\n     * @private\n     */\n    _setDefault: function(option) {\n        this._setOption(option);\n        this._assignHTMLElements();\n        this._attachEvent();\n        this.draw(this._option.year, this._option.month, false, 0);\n    },\n\n    /**\n     * Save options\n     * @param {Object} [option] A options to initialize component\n     * @private\n     */\n    _setOption: function(option) {\n        var instanceOption = this._option,\n            today = utils.getDateHashTable();\n\n        var defaultOption = {\n            classPrefix: 'calendar-',\n            year: today.year,\n            month: today.month,\n            titleFormat: 'yyyy-mm',\n            todayFormat: 'yyyy/mm/dd (D)',\n            yearTitleFormat: 'yyyy',\n            monthTitleFormat: 'm',\n            monthTitles: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'],\n            dayTitles: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            itemCountOfYear: CONSTANTS.itemCountOfYear\n        };\n        extend(instanceOption, defaultOption, option);\n    },\n\n    /**\n     * Set element to filed\n     * @private\n     */\n    _assignHTMLElements: function() {\n        var classPrefix = this._option.classPrefix,\n            $element = this.$element,\n            classSelector = '.' + classPrefix;\n\n        this._assignHeader($element, classSelector, classPrefix);\n        this._assignBody($element, classSelector, classPrefix);\n        this._assignFooter($element, classSelector, classPrefix);\n    },\n\n    /**\n     * Register header element.\n     * @param {jQuery} $element The root element of component\n     * @param {string} classSelector A class selector\n     * @param {string} classPrefix A prefix for class\n     * @private\n     */\n    _assignHeader: function($element, classSelector, classPrefix) {\n        var $header = $element.find(classSelector + 'header'),\n            headerTemplate,\n            defaultClassPrefixRegExp,\n            key = CONSTANTS.relativeMonthValueKey,\n            btnClassName = 'btn-';\n\n        if (!$header.length) {\n            headerTemplate = CONSTANTS.calendarHeader;\n            defaultClassPrefixRegExp = CONSTANTS.defaultClassPrefixRegExp;\n\n            $header = $(headerTemplate.replace(defaultClassPrefixRegExp, classPrefix));\n            $element.append($header);\n        }\n\n        // button\n        $header.find(classSelector + btnClassName + CONSTANTS.prevYear).data(key, -12);\n        $header.find(classSelector + btnClassName + CONSTANTS.prevMonth).data(key, -1);\n        $header.find(classSelector + btnClassName + CONSTANTS.nextYear).data(key, 12);\n        $header.find(classSelector + btnClassName + CONSTANTS.nextMonth).data(key, 1);\n\n        // title text\n        this.$title = $header.find(classSelector + 'title');\n        this.$titleYear = $header.find(classSelector + 'title-year');\n        this.$titleMonth = $header.find(classSelector + 'title-month');\n\n        this.$header = $header;\n\n        if (this.$title.hasClass(this._option.classPrefix + CONSTANTS.clickable)) {\n            this.isClickableTitle = true;\n        }\n    },\n\n    /**\n     * Register body element\n     * @param {jQuery} $element The root elment of component\n     * @param {string} classSelector A selector\n     * @param {string} classPrefix A prefix for class\n     * @private\n     */\n    _assignBody: function($element, classSelector, classPrefix) {\n        var $body = $element.find(classSelector + 'body'),\n            bodyTemplate,\n            defaultClassPrefixRegExp;\n\n        if (!$body.length) {\n            bodyTemplate = CONSTANTS.calendarBody;\n            defaultClassPrefixRegExp = CONSTANTS.defaultClassPrefixRegExp;\n\n            $body = $(bodyTemplate.replace(defaultClassPrefixRegExp, classPrefix));\n            $element.append($body);\n        }\n\n        this._assignWeek(classSelector);\n        this._assignMonthLayer(classSelector);\n        this._assignYearLayer(classSelector);\n\n        this.$body = $body.hide();\n    },\n\n    /**\n     * Register week elemnt on body\n     * @param {string} classSelector A selector\n     * @private\n     */\n    _assignWeek: function(classSelector) {\n        var $body = this.$element.find(classSelector + 'body');\n        var $weekTemplate = $body.find(classSelector + 'week');\n\n        this.$weekTemplate = $weekTemplate.clone(true);\n        this.$weekAppendTarget = $weekTemplate.parent();\n    },\n\n    /**\n     * Register element of month's layer and save drawing info\n     * @param {string} classSelector A selector\n     * @private\n     */\n    _assignMonthLayer: function(classSelector) {\n        var $body = this.$element.find(classSelector + 'body');\n        var $monthsTemplate = $body.find(classSelector + 'month-group');\n        var cols = $monthsTemplate.find(classSelector + 'month').length;\n        var rows = Math.ceil(this._option.monthTitles.length / cols);\n\n        this.dataOfMonthLayer = {\n            template: $monthsTemplate.clone(true),\n            appendedTarget: $monthsTemplate.parent(),\n            frame: {\n                cols: cols,\n                rows: rows\n            }\n        };\n    },\n\n    /**\n     * Register element of year's layer and save drawing info\n     * @param {string} classSelector A selector\n     * @private\n     */\n    _assignYearLayer: function(classSelector) {\n        var $body = this.$element.find(classSelector + 'body');\n        var $yearsTemplate = $body.find(classSelector + 'year-group');\n        var cols = $yearsTemplate.find(classSelector + 'year').length;\n        var rows = Math.ceil(this._option.itemCountOfYear / cols);\n\n        this.dataOfYearLayer = {\n            template: $yearsTemplate.clone(true),\n            appendedTarget: $yearsTemplate.parent(),\n            frame: {\n                cols: cols,\n                rows: rows\n            }\n        };\n    },\n\n    /**\n     * Register footer element\n     * @param {jQuery} $element The root element of component\n     * @param {string} classSelector A selector\n     * @param {string} classPrefix A prefix for class\n     * @private\n     */\n    _assignFooter: function($element, classSelector, classPrefix) {\n        var $footer = $element.find(classSelector + 'footer'),\n            footerTemplate,\n            defaultClassPrefixRegExp;\n\n        if (!$footer.length) {\n            footerTemplate = CONSTANTS.calendarFooter;\n            defaultClassPrefixRegExp = CONSTANTS.defaultClassPrefixRegExp;\n\n            $footer = $(footerTemplate.replace(defaultClassPrefixRegExp, classPrefix));\n            $element.append($footer);\n        }\n        this.$today = $footer.find(classSelector + 'today');\n        this.$footer = $footer;\n    },\n\n    /**\n     * Set event handlers and attach event on element\n     * @private\n     */\n    _attachEvent: function() {\n        this.handlers.clickRolloverBtn = bind(this._onClickRolloverButton, this);\n\n        this.attachEventToRolloverBtn();\n\n        extend(this.handlers, {\n            clickTitle: bind(this._onClickTitle, this),\n            clickYearLayer: bind(this._onClickYearLayer, this),\n            clickMonthLayer: bind(this._onClickMonthLayer, this)\n        });\n\n        if (this.isClickableTitle) {\n            this.attachEventToTitle();\n        }\n        this.attachEventToBody();\n    },\n\n    /**\n     * Attach event on rollover buttons in \"header\" element\n     */\n    attachEventToRolloverBtn: function() {\n        var selector = '.' + this._option.classPrefix + 'rollover';\n        var btns = this.$header.find(selector);\n\n        btns.on('click', this.handlers.clickRolloverBtn);\n    },\n\n    /**\n     * Detach event on rollover buttons in \"header\" element\n     */\n    detachEventToRolloverBtn: function() {\n        var selector = '.' + this._option.classPrefix + 'rollover';\n        var btns = this.$header.find(selector);\n\n        btns.off('click', this.handlers.clickRolloverBtn);\n    },\n\n    /**\n     * Attach event on title in \"header\" element\n     */\n    attachEventToTitle: function() {\n        this.$title.on('click', this.handlers.clickTitle);\n    },\n\n    /**\n     * Detach event on title in \"header\" element\n     */\n    detachEventToTitle: function() {\n        this.$title.off('click', this.handlers.clickTitle);\n    },\n\n    /**\n     * Attach event on title in \"body\" element (month &amp; year layer)\n     */\n    attachEventToBody: function() {\n        var classPrefix = '.' + this._option.classPrefix;\n        var yearLayer = this.dataOfYearLayer.appendedTarget;\n        var monthLayer = this.dataOfMonthLayer.appendedTarget;\n\n        yearLayer.on('click', classPrefix + 'year', this.handlers.clickYearLayer);\n        monthLayer.on('click', classPrefix + 'month', this.handlers.clickMonthLayer);\n    },\n\n    /**\n     * Detach event on title in \"body\" element (month &amp; year layer)\n     */\n    detachEventToBody: function() {\n        var classPrefix = '.' + this._option.classPrefix;\n        var yearLayer = this.dataOfYearLayer.appendedTarget;\n        var monthLayer = this.dataOfMonthLayer.appendedTarget;\n\n        yearLayer.off('click', classPrefix + 'year', this.handlers.clickYearLayer);\n        monthLayer.off('click', classPrefix + 'month', this.handlers.clickMonthLayer);\n    },\n\n    /**\n     * Event handler - click on rollover buttons\n     * @param {MouseEvent} event - Mouse event\n     * @private\n     */\n    _onClickRolloverButton: function(event) {\n        var relativeMonthValue = $(event.currentTarget).data(CONSTANTS.relativeMonthValueKey);\n        event.preventDefault();\n        this.draw(0, relativeMonthValue, true);\n    },\n\n    /**\n     * Event handler - click on title\n     * @param {MouseEvent} event - Mouse event\n     * @private\n     */\n    _onClickTitle: function(event) {\n        var shownLayerIdx = this.shownLayerIdx;\n        var date;\n\n        event.preventDefault();\n\n        if (shownLayerIdx === 2) {\n            return;\n        }\n\n        shownLayerIdx = (shownLayerIdx !== 2) ? (shownLayerIdx + 1) : 0;\n        date = this.getDate();\n\n        this.draw(date.year, date.month, false, shownLayerIdx);\n    },\n\n    /**\n     * Event handler - click on month's layer\n     * @param {MouseEvent} event - Mouse event\n     * @private\n     */\n    _onClickYearLayer: function(event) {\n        var relativeMonthValue = $(event.currentTarget).data(CONSTANTS.relativeMonthValueKey);\n        event.preventDefault();\n        this.draw(0, relativeMonthValue, true, 1);\n    },\n\n    /**\n     * Event handler - click on year's layer\n     * @param {MouseEvent} event - Mouse event\n     * @private\n     */\n    _onClickMonthLayer: function(event) {\n        var relativeMonthValue = $(event.currentTarget).data(CONSTANTS.relativeMonthValueKey);\n        event.preventDefault();\n        this.draw(0, relativeMonthValue, true, 0);\n    },\n\n    /**\n     * Get Hash data to drow calendar\n     * @param {number} year A year\n     * @param {number} month A month\n     * @param {boolean} [isRelative]  Whether is related other value or not\n     * @returns {{year: number, month: number}} A date hash\n     * @private\n     */\n    _getDateForDrawing: function(year, month, isRelative) {\n        var nDate = this.getDate(),\n            relativeDate;\n\n        nDate.date = 1;\n        if (!util.isNumber(year) &amp;&amp; !util.isNumber(month)) {\n            return nDate;\n        }\n\n        if (isRelative) {\n            relativeDate = utils.getRelativeDate(year, month, 0, nDate);\n            nDate.year = relativeDate.year;\n            nDate.month = relativeDate.month;\n        } else {\n            nDate.year = year || nDate.year;\n            nDate.month = month || nDate.month;\n        }\n\n        return nDate;\n    },\n\n    /**\n     * Judge to redraw calendar\n     * @param {number} year A year\n     * @param {number} month A month\n     * @returns {boolean} reflow\n     * @private\n     */\n    _isNecessaryForDrawing: function(year, month) {\n        var shownDate = this._shownDate;\n\n        return (shownDate.year !== year || shownDate.month !== month);\n    },\n\n    /**\n     * Draw calendar text\n     * @param {{year: number, month: number}} dateForDrawing Tha hash that show up on calendar\n     * @private\n     */\n    _setCalendarText: function(dateForDrawing) {\n        var year = dateForDrawing.year,\n            month = dateForDrawing.month;\n\n        this._setCalendarToday();\n        this._setCalendarTitle(year, month);\n    },\n\n    /**\n     * Draw dates by month.\n     * @param {{year: number, month: number}} dateForDrawing A date to draw\n     * @param {string} classPrefix A class prefix\n     * @private\n     */\n    _drawDates: function(dateForDrawing, classPrefix) {\n        var year = dateForDrawing.year,\n            month = dateForDrawing.month,\n            dayInWeek = 0,\n            datePrevMonth = utils.getRelativeDate(0, -1, 0, dateForDrawing),\n            dateNextMonth = utils.getRelativeDate(0, 1, 0, dateForDrawing),\n            dates = [],\n            firstDay = utils.getFirstDay(year, month),\n            indexOfLastDate = this._fillDates(year, month, dates);\n\n        util.forEach(dates, function(date, i) {\n            var isPrevMonth = false,\n                isNextMonth = false,\n                $dateContainer = $(this._$dateContainerElement[i]),\n                tempYear = year,\n                tempMonth = month,\n                eventData;\n\n            if (i &lt; firstDay) {\n                isPrevMonth = true;\n                $dateContainer.addClass(classPrefix + CONSTANTS.prevMonth);\n                tempYear = datePrevMonth.year;\n                tempMonth = datePrevMonth.month;\n            } else if (i > indexOfLastDate) {\n                isNextMonth = true;\n                $dateContainer.addClass(classPrefix + CONSTANTS.nextMonth);\n                tempYear = dateNextMonth.year;\n                tempMonth = dateNextMonth.month;\n            }\n\n            // Weekend\n            this._setWeekend(dayInWeek, $dateContainer, classPrefix);\n\n            // Today\n            if (this._isToday(tempYear, tempMonth, date)) {\n                $dateContainer.addClass(classPrefix + 'today');\n            }\n\n            eventData = {\n                $date: $(this._$dateElement.get(i)),\n                $dateContainer: $dateContainer,\n                year: tempYear,\n                month: tempMonth,\n                date: date,\n                isPrevMonth: isPrevMonth,\n                isNextMonth: isNextMonth,\n                html: date\n            };\n            $(eventData.$date).html(eventData.html.toString());\n            dayInWeek = (dayInWeek + 1) % 7;\n\n            /**\n             * Fire draw event when calendar draw each date.\n             * @api\n             * @event Calendar#draw\n             * @param {string} type A name of custom event\n             * @param {boolean} isPrevMonth Whether the draw day is last month or not\n             * @param {boolean} isNextMonth Wehter the draw day is next month or not\n             * @param {jQuery} $date The element have date html\n             * @param {jQuery} $dateContainer Child element that has className [prefix]week.\n             *                                It is possible this element equel elDate.\n             * @param {number} date A draw date\n             * @param {number} month A draw month\n             * @param {number} year A draw year\n             * @param {string} html A html string\n             * @example\n             * // draw custom even handlers\n             * calendar.on('draw', function(drawEvent){ ... });\n             **/\n            this.fire('draw', eventData);\n        }, this);\n    },\n\n    /**\n     * Jedge the input date is today.\n     * @param {number} year A year\n     * @param {number} month A month\n     * @param {number} date A date\n     * @returns {boolean}\n     * @private\n     */\n    _isToday: function(year, month, date) {\n        var today = utils.getDateHashTable();\n        var isYear = year ? (today.year === year) : true;\n        var isMonth = month ? (today.month === month) : true;\n        var isDate = date ? (today.date === date) : true;\n\n        return isYear &amp;&amp; isMonth &amp;&amp; isDate;\n    },\n\n    /**\n     * Make one week tempate.\n     * @param {number} year  A year\n     * @param {number} month A month\n     * @private\n     */\n    _setWeeks: function(year, month) {\n        var $elWeek,\n            weeks = utils.getWeeks(year, month),\n            i;\n        for (i = 0; i &lt; weeks; i += 1) {\n            $elWeek = this.$weekTemplate.clone(true);\n            $elWeek.appendTo(this.$weekAppendTarget);\n            this._weekElements.push($elWeek);\n        }\n    },\n\n    /**\n     * Save draw dates to array\n     * @param {string} year A draw year\n     * @param {string} month A draw month\n     * @param {Array} dates A draw date\n     * @returns {number} index of last date\n     * @private\n     */\n    _fillDates: function(year, month, dates) {\n        var firstDay = utils.getFirstDay(year, month),\n            lastDay = utils.getLastDay(year, month),\n            lastDate = utils.getLastDate(year, month),\n            datePrevMonth = utils.getRelativeDate(0, -1, 0, {year: year, month: month, date: 1}),\n            prevMonthLastDate = utils.getLastDate(datePrevMonth.year, datePrevMonth.month),\n            indexOfLastDate,\n            i;\n\n        if (firstDay > 0) {\n            for (i = prevMonthLastDate - firstDay; i &lt; prevMonthLastDate; i += 1) {\n                dates.push(i + 1);\n            }\n        }\n        for (i = 1; i &lt; lastDate + 1; i += 1) {\n            dates.push(i);\n        }\n        indexOfLastDate = dates.length - 1;\n        for (i = 1; i &lt; 7 - lastDay; i += 1) {\n            dates.push(i);\n        }\n\n        return indexOfLastDate;\n    },\n\n    /**\n     * Set weekend\n     * @param {number} day A date\n     * @param {jQuery} $dateContainer A container element for date\n     * @param {string} classPrefix A prefix of class\n     * @private\n     */\n    _setWeekend: function(day, $dateContainer, classPrefix) {\n        if (day === 0) {\n            $dateContainer.addClass(classPrefix + 'sun');\n        } else if (day === 6) {\n            $dateContainer.addClass(classPrefix + 'sat');\n        }\n    },\n\n    /**\n     * Clear calendar\n     * @private\n     */\n    _clear: function() {\n        this._weekElements = [];\n        this.$weekAppendTarget.empty();\n        this.dataOfMonthLayer.appendedTarget.empty();\n        this.dataOfYearLayer.appendedTarget.empty();\n    },\n\n    /**\n     * Draw title with format option.\n     * @param {number} year A value of year (ex. 2008)\n     * @param {(number|string)} month A month (1 ~ 12)\n     * @private\n     **/\n    _setCalendarTitle: function(year, month) {\n        var option = this._option,\n            titleFormat = option.titleFormat,\n            replaceMap,\n            reg;\n\n        month = utils.prependLeadingZero(month);\n        replaceMap = this._getReplaceMap(year, month);\n\n        reg = CONSTANTS.titleRegExp;\n        this._setDateTextInCalendar(this.$title, titleFormat, replaceMap, reg);\n\n        reg = CONSTANTS.titleYearRegExp;\n        this._setDateTextInCalendar(this.$titleYear, option.yearTitleFormat, replaceMap, reg);\n\n        reg = CONSTANTS.titleMonthRegExp;\n        this._setDateTextInCalendar(this.$titleMonth, option.monthTitleFormat, replaceMap, reg);\n    },\n\n    /**\n     * Update title\n     * @param {jQuery|HTMLElement} element A update element\n     * @param {string} form A update form\n     * @param {Object} map A object that has value matched regExp\n     * @param {RegExp} reg A regExp to chagne form\n     * @private\n     */\n    _setDateTextInCalendar: function(element, form, map, reg) {\n        var title,\n            $el = $(element);\n\n        if (!$el.length) {\n            return;\n        }\n        title = utils.getConvertedTitle(form, map, reg);\n        $el.text(title);\n    },\n\n    /**\n     * Get map data for form\n     * @param {string|number} year A year\n     * @param {string|number} month A month\n     * @param {string|number} [date] A day\n     * @returns {Object} ReplaceMap\n     * @private\n     */\n    _getReplaceMap: function(year, month, date) {\n        var option = this._option,\n            yearSub = (year.toString()).substr(2, 2),\n            monthLabel = option.monthTitles[month - 1],\n            labelKey = new Date(year, month - 1, date || 1).getDay(),\n            dayLabel = option.dayTitles[labelKey];\n\n        return {\n            yyyy: year,\n            yy: yearSub,\n            mm: month,\n            m: Number(month),\n            M: monthLabel,\n            dd: date,\n            d: Number(date),\n            D: dayLabel\n        };\n    },\n\n    /**\n     * Set today\n     * @private\n     */\n    _setCalendarToday: function() {\n        var $today = this.$today,\n            todayFormat,\n            today,\n            year,\n            month,\n            date,\n            replaceMap,\n            reg;\n\n        if (!$today.length) {\n            return;\n        }\n\n        today = utils.getDateHashTable();\n        year = today.year;\n        month = utils.prependLeadingZero(today.month);\n        date = utils.prependLeadingZero(today.date);\n        todayFormat = this._option.todayFormat;\n        replaceMap = this._getReplaceMap(year, month, date);\n        reg = CONSTANTS.todayRegExp;\n        this._setDateTextInCalendar($today, todayFormat, replaceMap, reg);\n    },\n\n    /**\n     * Set title on year's layer\n     * @param {number} year - Year\n     */\n    _setTitleOnYearLayer: function(year) {\n        var itemCountOfYear = this._getInfoOfYearRange(year);\n        var startYearText = this._getConvertedYearTitle(itemCountOfYear.startYear);\n        var endYearText = this._getConvertedYearTitle(itemCountOfYear.endYear);\n        var title = startYearText + ' - ' + endYearText;\n\n        this.$title.text(title);\n    },\n\n    /**\n     * Set class name on title\n     * @param {number} shownLayerIdx - Year\n     */\n    _setClassNameOnTitle: function(shownLayerIdx) {\n        var className = this._option.classPrefix + CONSTANTS.clickable;\n\n        if (!this.isClickableTitle) {\n            return;\n        }\n\n        if (shownLayerIdx !== 2) {\n            this.$title.addClass(className);\n        } else {\n            this.$title.removeClass(className);\n        }\n    },\n\n    /**\n     * Get converted year text on year and month layer\n     * @param {number} year - Year\n     * @returns {string} Converted year text\n     */\n    _getConvertedYearTitle: function(year) {\n        var option = this._option;\n        var replaceMap, reg;\n\n        replaceMap = this._getReplaceMap(year);\n        reg = CONSTANTS.titleYearRegExp;\n\n        return utils.getConvertedTitle(option.yearTitleFormat, replaceMap, reg);\n    },\n\n    /**\n     * Get years info by \"itemCountOfYear\" option\n     * @param {number} year - Year\n     * @returns {Object} Info of year's range\n     */\n    _getInfoOfYearRange: function(year) {\n        var frameInfo = this.dataOfYearLayer.frame;\n        var cols = frameInfo.cols;\n        var rows = frameInfo.rows;\n        var baseIdx = (cols * Math.floor(rows / 2)) + Math.floor(cols / 2);\n        var startYear = year - baseIdx;\n        var endYear = startYear + (cols * rows) - 1;\n\n        return {\n            startYear: startYear,\n            endYear: endYear\n        };\n    },\n\n    /**\n     * Get index of current shown layer by layer's type\n     * @param {string|number} type - Type of layer\n     * @returns {number} Index of shown layer\n     */\n    _getIndexOfShownLayer: function(type) {\n        return (type ? util.inArray(type, CONSTANTS.layerKeys) : this.shownLayerIdx);\n    },\n\n    /**\n     * Draw header element\n     * @param {{year: number, month: number}} dateForDrawing - The hash that show up on calendar\n     * @param {number} shownLayerIdx - Index of shown layer\n     * @private\n     */\n    _drawHeader: function(dateForDrawing, shownLayerIdx) {\n        var classSelector = '.' + this._option.classPrefix + 'btn-';\n        var prevBtn = this.$header.find(classSelector + CONSTANTS.prev);\n        var nextBtn = this.$header.find(classSelector + CONSTANTS.next);\n        var key = CONSTANTS.relativeMonthValueKey;\n        var itemCountOfYear = this._option.itemCountOfYear;\n        var prevValue, nextValue;\n\n        this._setClassNameOnTitle(shownLayerIdx);\n\n        if (shownLayerIdx === 0) {\n            this._setCalendarText(dateForDrawing);\n            prevValue = -1;\n            nextValue = 1;\n        } else if (shownLayerIdx === 1) {\n            this.$title.text(this._getConvertedYearTitle(dateForDrawing.year));\n            prevValue = -12;\n            nextValue = 12;\n        } else if (shownLayerIdx === 2) {\n            this._setTitleOnYearLayer(dateForDrawing.year);\n            prevValue = -12 * itemCountOfYear;\n            nextValue = 12 * itemCountOfYear;\n        }\n\n        prevBtn.data(key, prevValue);\n        nextBtn.data(key, nextValue);\n    },\n\n    /**\n     * Draw body elements\n     * @param {{year: number, month: number}} dateForDrawing - The hash that show up on calendar\n     * @param {number} shownLayerIdx - Index of shown layer\n     * @private\n     */\n    _drawBody: function(dateForDrawing, shownLayerIdx) {\n        var year = dateForDrawing.year;\n        var month = dateForDrawing.month;\n        var classPrefix = this._option.classPrefix;\n\n        // weeks\n        this._setWeeks(year, month);\n        this._$dateElement = $('.' + classPrefix + 'date', this.$weekAppendTarget);\n        this._$dateContainerElement = $('.' + classPrefix + 'week > *', this.$weekAppendTarget);\n\n        // dates\n        this._drawDates(dateForDrawing, classPrefix);\n\n        // month layer\n        this._drawFrameOnMonthLayer();\n        this._drawButtonsOfMonth(dateForDrawing, classPrefix);\n\n        // year layer\n        this._drawFrameOnYearLayer();\n        this._drawButtonsOfYear(dateForDrawing, classPrefix);\n\n        // show layer\n        this._changeShownLayer(shownLayerIdx);\n    },\n\n    /**\n     * Draw frame containing buttons on month's layer\n     * @private\n     */\n    _drawFrameOnMonthLayer: function() {\n        var i = 0;\n        var rows = this.dataOfMonthLayer.frame.rows;\n        var dataOfMonthLayer = this.dataOfMonthLayer;\n        var $monthGroupEl;\n\n        for (; i &lt; rows; i += 1) {\n            $monthGroupEl = dataOfMonthLayer.template.clone(true);\n            $monthGroupEl.appendTo(dataOfMonthLayer.appendedTarget);\n        }\n    },\n\n    /**\n     * Draw selectable buttons on month's layer\n     * @param {{year: number, month: number}} dateForDrawing - The hash that show up on calendar\n     * @param {string} classPrefix - A class prefix\n     * @private\n     */\n    _drawButtonsOfMonth: function(dateForDrawing, classPrefix) {\n        var key = CONSTANTS.relativeMonthValueKey;\n        var selectedMonth = dateForDrawing.month;\n        var monthTitles = this._option.monthTitles;\n        var $monthEls = this.dataOfMonthLayer.appendedTarget.find('.' + classPrefix + 'month');\n        var $buttonEl, month, relativeMonth;\n        var eventData;\n\n        util.forEach(monthTitles, function(title, idx) {\n            $buttonEl = $monthEls.eq(idx);\n            month = idx + 1;\n\n            if (month === selectedMonth) {\n                $buttonEl.addClass(classPrefix + CONSTANTS.selected);\n            }\n\n            if (this._isToday(this._shownDate.year, month)) {\n                $buttonEl.addClass(classPrefix + CONSTANTS.today);\n            }\n\n            relativeMonth = month - selectedMonth;\n\n            $buttonEl.data(key, relativeMonth).html(title);\n\n            eventData = {\n                $date: $buttonEl,\n                $dateContainer: $buttonEl,\n                year: dateForDrawing.year,\n                month: month,\n                date: 0,\n                html: title\n            };\n\n            this.fire('draw', eventData);\n        }, this);\n    },\n\n    /**\n     * Draw frame containing buttons on year's layer\n     * @private\n     */\n    _drawFrameOnYearLayer: function() {\n        var i = 0;\n        var rows = this.dataOfMonthLayer.frame.rows;\n        var dataOfYearLayer = this.dataOfYearLayer;\n        var $yearGroupEl;\n\n        for (; i &lt; rows; i += 1) {\n            $yearGroupEl = dataOfYearLayer.template.clone(true);\n            $yearGroupEl.appendTo(dataOfYearLayer.appendedTarget);\n        }\n    },\n\n    /**\n     * Draw selectable buttons on year's layer\n     * @param {{year: number, month: number}} dateForDrawing - The hash that show up on calendar\n     * @param {string} classPrefix - A class prefix\n     * @private\n     */\n    _drawButtonsOfYear: function(dateForDrawing, classPrefix) {\n        var key = CONSTANTS.relativeMonthValueKey;\n        var year = dateForDrawing.year;\n        var itemCountOfYear = this._getInfoOfYearRange(year);\n        var startYear = itemCountOfYear.startYear;\n        var endYear = itemCountOfYear.endYear;\n        var cnt = 0;\n        var $yearEls = this.dataOfYearLayer.appendedTarget.find('.' + classPrefix + 'year');\n        var $buttonEl, relativeMonth;\n        var eventData;\n\n        for (; startYear &lt;= endYear; startYear += 1) {\n            $buttonEl = $yearEls.eq(cnt);\n\n            if (startYear === year) {\n                $buttonEl.addClass(classPrefix + CONSTANTS.selected);\n            }\n\n            if (this._isToday(startYear)) {\n                $buttonEl.addClass(classPrefix + CONSTANTS.today);\n            }\n\n            relativeMonth = (startYear - year) * 12;\n\n            $buttonEl.data(key, relativeMonth).html(startYear);\n\n            cnt += 1;\n\n            eventData = {\n                $date: $buttonEl,\n                $dateContainer: $buttonEl,\n                year: startYear,\n                month: 0,\n                date: 0,\n                html: startYear\n            };\n\n            this.fire('draw', eventData);\n        }\n    },\n\n    /**\n     * Change current shown layer on calendar\n     * @param {number} shownLayerIdx - Index of shown layer\n     */\n    _changeShownLayer: function(shownLayerIdx) {\n        var classPrefix = this._option.classPrefix;\n        var prevshownLayerIdx = this.shownLayerIdx;\n        var $bodys = this.$element.find('.' + classPrefix + 'body');\n\n        this.shownLayerIdx = shownLayerIdx;\n\n        $bodys.eq(prevshownLayerIdx).hide();\n        $bodys.eq(shownLayerIdx).show();\n    },\n\n    /**\n     * Draw calendar\n     * @api\n     * @param {number} [year] A year (ex. 2008)\n     * @param {number} [month] A month (1 ~ 12)\n     * @param {Boolean} [isRelative] A year and month is related\n     * @param {string} [shownType] Shown type of layer (ex. [day, month, year] | [0] ~ 2])\n     * @example\n     * calendar.draw(); // Draw with now date.\n     * calendar.draw(2008, 12); // Draw 2008/12\n     * calendar.draw(null, 12); // Draw current year/12\n     * calendar.draw(2010, null); // Draw 2010/current month\n     * calendar.draw(0, 1, true); // Draw next month\n     * calendar.draw(-1, null, true); // Draw prev year\n     * calendar.draw(0, 0, false, 'date'); // Draw today with date's layer\n     * calendar.draw(2010, 10, false, 'month'); // Draw 2010/10 with month's layer\n     * calendar.draw(2016, null, false, 'year'); // Draw 2016/month with year's layer\n     **/\n    draw: function(year, month, isRelative, shownType) {\n        var dateForDrawing = this._getDateForDrawing(year, month, isRelative);\n        var isReadyForDrawing = this.invoke('beforeDraw', dateForDrawing);\n        var shownLayerIdx;\n\n        /**===============\n         * beforeDraw\n         =================*/\n        if (!isReadyForDrawing) {\n            return;\n        }\n\n        /**===============\n         * draw\n         =================*/\n        shownLayerIdx = util.isNumber(shownType) ?\n                        shownType : this._getIndexOfShownLayer(shownType);\n\n        year = dateForDrawing.year;\n        month = dateForDrawing.month;\n\n        this.setDate(year, month);\n\n        this._clear();\n        this._drawHeader(dateForDrawing, shownLayerIdx);\n        this._drawBody(dateForDrawing, shownLayerIdx);\n\n        /**===============\n         * afterDraw\n         ================*/\n        this.fire('afterDraw', dateForDrawing);\n    },\n\n    /**\n     * Return current year and month(just shown).\n     * @api\n     * @returns {{year: number, month: number}}\n     * @example\n     *  getDate(); => { year: xxxx, month: xx };\n     */\n    getDate: function() {\n        return {\n            year: this._shownDate.year,\n            month: this._shownDate.month\n        };\n    },\n\n    /**\n     * Set date\n     * @api\n     * @param {number} [year] A year (ex. 2008)\n     * @param {number} [month] A month (1 ~ 12)\n     * @example\n     *  setDate(1984, 04);\n     **/\n    setDate: function(year, month) {\n        var date = this._shownDate;\n        date.year = util.isNumber(year) ? year : date.year;\n        date.month = util.isNumber(month) ? month : date.month;\n    }\n});\n\nutil.CustomEvents.mixin(Calendar);\nmodule.exports = Calendar;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"